{"version":3,"file":"wcslight.min.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;;;;;ACVO,MAAM,MAAM;;AACR,mBAAY,GAAU,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACDlC;;;;;;;GAOG;;;;;;;;;;AAE+C;AACgC;AACxB;AACjB;AAQ+B;AACF;AACb;AAEN;AACA;AAE5C,MAAM,QAAQ;IAEjB;;;;;;;OAOG;IACH,MAAM,CAAO,gBAAgB,CAAC,MAAa,EAAE,MAAc,EACvD,MAAc,EAAE,QAAgB;;YAEhC,MAAM,eAAe,GAAG,GAAG;YAE3B,6GAA6G;YAE7G,+IAA+I;YAC/I,MAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,qBAAqB,CAAC,QAAQ,CAAC;YACnE,IAAI,CAAC,YAAY;gBAAE,OAAO,IAAI;YAC9B,0CAA0C;YAE1C,6IAA6I;YAC7I,MAAM,iBAAiB,GAAyB,mEAAQ,CAAC,iBAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,eAAe,CAAC;YACnH,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACrB,OAAO,IAAI;YACf,CAAC;YAED,iLAAiL;YACjL,YAAY,CAAC,SAAS,CAAC,iBAAiB,CAAC;YACzC,mEAAmE;YAEnE,kFAAkF;YAClF,qEAAqE;YAErE,yCAAyC;YACzC,uCAAuC;YACvC,MAAM,YAAY,GAAG,mEAAQ,CAAC,YAAY,CAAC,iBAAiB,EAAE,YAAY,CAAC,aAAa,EAAE,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC;YACrH,KAAK,IAAI,aAAa,IAAI,YAAY,CAAC,WAAW,EAAE,EAAE,CAAC;gBACnD,MAAM,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC;gBAC/B,MAAM,QAAQ,GAAG,aAAa,CAAC,CAAC,CAAC;gBACjC,MAAM,IAAI,GAAG,QAAQ,CAAC,UAAU,EAAE;gBAClC,MAAM,MAAM,GAAG,QAAQ,CAAC,SAAS,EAAE;gBACnC,MAAM,cAAc,GAAG,UAAU,MAAM,OAAO;gBAE9C,MAAM,UAAU,GAAG,EAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAC;gBAC/C,gDAAU,CAAC,eAAe,CAAC,UAAU,EAAE,cAAc,CAAC;YAC1D,CAAC;YACD,OAAO,YAAY;QAEvB,CAAC;KAAA;IAED,wCAAwC;IACxC,MAAM,CAAO,qBAAqB,CAAC,QAAgB;;;YAC/C,IAAI,IAAI,GAAsB,MAAM,gDAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC;YACjE,IAAI,CAAC,IAAI;gBAAE,OAAO,IAAI;YAEtB,MAAM,KAAK,GAAG,MAAM,CAAC,UAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAK,CAAC;YAE3D,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAC,CAAC;gBACvB,IAAI,UAAU,GAAG,IAAI,2FAAkB,EAAE;gBACzC,MAAM,UAAU,CAAC,YAAY,CAAC,QAAQ,CAAC;gBACvC,OAAO,UAAU;YACrB,CAAC;YACD,OAAO,IAAI;QAEf,CAAC;KAAA;IAED,iGAAiG;IACjG,MAAM,CAAO,gBAAgB;6DAAC,MAAa,EAAE,MAAc,EACvD,YAAoB,EAAE,WAAmB,EAAE,OAA2B,EAAE,YAA2B,IAAI;;YAEvG,MAAM,QAAQ,GAAG,MAAM,iFAAe,CAAC,iBAAiB,CAAC,WAAW,CAAC;YACrE,MAAM,YAAY,GAAW,QAAQ,CAAC,OAAO,CAAC,+EAAc,CAAC,KAAK,CAAC;YACnE,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,+EAAc,CAAC,KAAK,CAAC;YACxD,MAAM,UAAU,GAAG,QAAQ,CAAC,OAAO,CAAC,+EAAc,CAAC,UAAU,CAAC;YAG9D,IAAI,UAAU,GAAY,KAAK;YAC/B,IAAI,SAAS,CAAC,WAAW,EAAE,IAAI,UAAU,EAAE,CAAC;gBACxC,UAAU,GAAG,IAAI;YACrB,CAAC;YAED,IAAI,CAAC,SAAS,EAAE,CAAC;gBACb,MAAM,OAAO,GAAG,kEAAU,CAAC,oBAAoB,CAAC,YAAY,EAAE,UAAU,CAAC;gBACzE,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC;YACrC,CAAC;YACD,IAAI,SAAS,GAAG,YAAY,EAAE,CAAC;gBAC3B,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC;YAC3E,CAAC;YAED;;;cAGE;YACF,MAAM,UAAU,GAAW,OAAO,CAAC,iBAAiB,CAAC,MAAM,EAAE,YAAY,CAAC;YAC1E,MAAM,YAAY,GAAoB,OAAO,CAAC,iBAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,UAAU,CAAC;YACzG,IAAI,CAAC,YAAY;gBAAE,OAAO,IAAI;YAG9B,MAAM,kBAAkB,GAAG,YAAY,CAAC,yBAAyB,EAAE;YACnE,MAAM,GAAG,GAAG,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,YAAY,EAAE;YAC9C,MAAM,IAAI,GAAG,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,aAAa,EAAE;YAChD,IAAI,GAAG,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS;gBAAE,OAAO,IAAI;YAExD,8GAA8G;YAC9G,MAAM,eAAe,GAAG,MAAM,mEAAQ,CAAC,SAAS,CAAC,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,WAAW,CAAC;YAC9G,IAAI,CAAC,eAAe;gBAAE,OAAO,IAAI;YACjC,MAAM,QAAQ,GAAG,qBAAe,CAAC,eAAe,EAAE,0CAAE,WAAW,EAAE;YACjE,MAAM,QAAQ,GAAG,qBAAe,CAAC,eAAe,EAAE,0CAAE,WAAW,EAAE;YACjE,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,SAAS;gBAAE,OAAO,IAAI;YAEjE;;;;;;;;;;;;;;;;;;;;;eAqBG;YACH,8FAA8F;YAC9F,MAAM,KAAK,GAAG,GAAG;YACjB,MAAM,KAAK,GAAG,GAAG;YACjB,MAAM,MAAM,GAAG,GAAG;YAElB,MAAM,MAAM,GAAW,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,+EAAc,CAAC,MAAM,CAAC,CAAC;YACxE,IAAI,MAAM,IAAI,CAAC,IAAI,MAAM,IAAI,EAAE,IAAI,MAAM,IAAI,EAAE,IAAI,MAAM,IAAI,CAAC,EAAE,IAAI,MAAM,IAAI,CAAC,EAAE,EAAE,CAAC;gBAChF,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC;YAC/C,CAAC;YAED,MAAM,IAAI,GAAS,OAAO,CAAC,gBAAgB,CACvC,YAAY,EACZ,QAAQ,CAAC,OAAO,CAAC,+EAAc,CAAC,MAAM,CAAC,EACvC,UAAU,EACV,KAAK,EAAE,KAAK,EAAE,MAAM,EACpB,GAAG,EAAE,IAAI,EACT,QAAQ,EAAE,QAAQ,EAAE,eAAe,CAAC;YAExC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;YACjB,OAAO,IAAI;QACf,CAAC;KAAA;IAED,MAAM,CAAC,wBAAwB;QAE3B,OAAO,IAAI;IACf,CAAC;IAED,qDAAqD;IACrD,wGAAwG;IAExG,kBAAkB;IAClB,gBAAgB;IAChB,oGAAoG;IACpG,sCAAsC;IACtC,sCAAsC;IACtC,8BAA8B;IAC9B,8BAA8B;IAC9B,8BAA8B;IAC9B,gCAAgC;IAChC,wCAAwC;IACxC,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,8DAA8D;IAC9D,YAAY;IAEZ,uEAAuE;IACvE,uEAAuE;IACvE,wCAAwC;IACxC,gFAAgF;IAChF,0DAA0D;IAC1D,0DAA0D;IAE1D,0CAA0C;IAC1C,2CAA2C;IAC3C,uCAAuC;IACvC,kCAAkC;IAClC,oCAAoC;IACpC,4CAA4C;IAC5C,iBAAiB;IACjB,0BAA0B;IAC1B,mBAAmB;IACnB,4DAA4D;IAC5D,0CAA0C;IAC1C,8CAA8C;IAC9C,0CAA0C;IAC1C,kCAAkC;IAClC,oCAAoC;IACpC,4CAA4C;IAC5C,iBAAiB;IACjB,0BAA0B;IAC1B,YAAY;IAEZ,sBAAsB;IACtB,qDAAqD;IACrD,uBAAuB;IACvB,QAAQ;IAER,IAAI;IAEJ;;;;;OAKG;IACH,MAAM,CAAC,YAAY,CAAC,UAAe,EAAE,QAAa;QAC9C,MAAM,UAAU,GAAG;YACf,MAAM,EAAE,UAAU;YAClB,IAAI,EAAE,QAAQ;SACjB;QACD,uEAAuE;QACvE,MAAM,OAAO,GAAG,gDAAU,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;QAC1D,OAAO,OAAO,CAAC;IACnB,CAAC;IAKD,mDAAmD;IACnD,cAAc;IACd,IAAI;IAGJ,MAAM,CAAC,aAAa,CAAC,cAAsB;QACvC,IAAI,cAAc,KAAK,UAAU,EAAE,CAAC;YAChC,OAAO,IAAI,2FAAkB,EAAE,CAAC;YACpC,6CAA6C;YAC7C,sCAAsC;YACtC,8CAA8C;YAC9C,uCAAuC;QACvC,CAAC;aAAM,CAAC;YACJ,OAAO,IAAI,CAAC;YACZ,gDAAgD;QACpD,CAAC;IACL,CAAC;IAED,MAAM,CAAC,wBAAwB;QAC3B,OAAO,CAAC,UAAU,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;IAC3C,CAAC;CAEJ;AAGD,MAAM,MAAM,GAAG,IAAI,kDAAK,CAAC,4DAAU,CAAC,KAAK,EAAE,4DAAU,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AAC/E,QAAQ,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,6FAA6F,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;IACtJ,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;AACpB,CAAC,CAAC;;;;;;;;;;;;;;;;AChSF;;;;;GAKG;AAEH,IAAY,UAIX;AAJD,WAAY,UAAU;IACpB,qCAAuB;IACvB,qCAAuB;IACvB,6BAAe;AACjB,CAAC,EAJW,UAAU,KAAV,UAAU,QAIrB;;;;;;;;;;;;;;;;ACRM,MAAM,IAAI;IAIb,YAAY,MAA2B,EAAE,IAAoC;QACzE,IAAI,CAAC,OAAO,GAAG,MAAM;QACrB,IAAI,CAAC,KAAK,GAAG,IAAI;IACrB,CAAC;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,OAAO;IACvB,CAAC;IAED,IAAI,IAAI;QACJ,OAAO,IAAI,CAAC,KAAK;IACrB,CAAC;CAEJ;;;;;;;;;;;;;;;;ACpBD;;;;;;;GAOG;AAII,MAAM,UAAU;IAKnB,YAAa,CAAS,EAAE,CAAS,EAAE,SAAiB,GAAG;QACnD,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;QACZ,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;QACZ,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IAC1B,CAAC;IAED,IAAI;QACA,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAED,IAAI;QACA,OAAO,IAAI,CAAC,EAAE,CAAC;IACnB,CAAC;IAED,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,OAAO;IACvB,CAAC;CACJ;;;;;;;;;;;;;;;;ACjCD,IAAY,UAMX;AAND,WAAY,UAAU;IAClB,iDAAO;IACP,iDAAO;IACP,iDAAO;IACP,yCAAG;IACH,yCAAG;AACP,CAAC,EANW,UAAU,KAAV,UAAU,QAMrB;;;;;;;;;;;;;;;;;;;ACND;;GAEG;AAEiI;AAGvF;AAGP;AAE/B,MAAM,KAAK;IASjB,YAAY,OAAmB,EAAE,IAAgB,EAAE,GAAG,MAAqB;QAE1E,IAAI,OAAO,IAAI,sDAAU,CAAC,SAAS,EAAC,CAAC;YACpC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,8CAAM,CAAC,YAAY,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,8CAAM,CAAC,YAAY,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,8CAAM,CAAC,YAAY,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,SAAS,GAAG,+DAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAEtD,IAAI,CAAC,KAAK,GAAG,2DAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE/C,CAAC;aAAM,IAAI,OAAO,IAAI,sDAAU,CAAC,KAAK,EAAC,CAAC;YACvC,MAAM,CAAC,GAAG,oDAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAG,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;gBAChB,IAAI,CAAC,KAAK,GAAG,CAAC;gBACd,IAAI,CAAC,SAAS,GAAG,2DAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9C,IAAI,CAAC,SAAS,GAAG,+DAAoB,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC,4EAA4E;YACzI,CAAC;QAGF,CAAC;aAAM,IAAI,OAAO,IAAI,sDAAU,CAAC,SAAS,EAAC,CAAC;YAC3C,MAAM,CAAC,GAAG,wDAAa,CAAC,MAAM,CAAC,CAAC,CAAC,EAAG,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACrD,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;gBAChB,IAAI,CAAC,SAAS,GAAG,CAAC;gBAClB,IAAI,CAAC,SAAS,GAAG,+DAAoB,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC,4EAA4E;gBACxI,IAAI,CAAC,KAAK,GAAG,2DAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YAC/C,CAAC;QACF,CAAC;aAAK,CAAC;YACN,OAAO,CAAC,KAAK,CAAC,aAAa,GAAC,OAAO,GAAC,kBAAkB,CAAC,CAAC;QACzD,CAAC;QACD,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;YACjC,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,GAAG,CAAC;QAC9B,CAAC;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,EAAE,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,GAAG,CAAC;QACzB,CAAC;IACF,CAAC;IAGD,+DAA+D;IAE/D,yCAAyC;IAEzC,mGAAmG;IACnG,mGAAmG;IACnG,mGAAmG;IAEnG,2DAA2D;IAC3D,mDAAmD;IAEnD,2CAA2C;IAE3C,mFAAmF;IACnF,+GAA+G;IAC/G,0FAA0F;IAC1F,+GAA+G;IAC/G,aAAa;IACb,4DAA4D;IAC5D,kBAAkB;IAClB,MAAM;IACN,mDAAmD;IACnD,6IAA6I;IAE7I,+CAA+C;IAE/C,8FAA8F;IAC9F,qIAAqI;IACrI,qGAAqG;IACrG,qIAAqI;IACrI,aAAa;IACb,gEAAgE;IAChE,kBAAkB;IAClB,MAAM;IAEN,6IAA6I;IAC7I,mDAAmD;IAEnD,UAAU;IACV,6DAA6D;IAC7D,KAAK;IACL,IAAI;IAEJ,YAAY;QACX,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;IAED,QAAQ;QACP,OAAO,IAAI,CAAC,KAAK,CAAC;IACnB,CAAC;IAED,YAAY;QACX,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB,CAAC;CAyED;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzLD;;GAEG;AACH,gCAAgC;AAKa;AAI7C,SAAS,KAAK;AAEd,CAAC;AAEM,SAAS,oBAAoB,CAAC,GAAoB;IACxD,IAAI,MAAM,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC3B,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1B,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC;IAClC,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAClC,+DAA+D;IAC/D,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrC,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;IAE9B,IAAI,MAAM,GAAG,CAAC,EAAC,CAAC;QACf,MAAM,IAAI,GAAG,CAAC;IACf,CAAC;IACD,OAAO;QACN,MAAM,EAAE,MAAM;QACd,QAAQ,EAAE,QAAQ;QAClB,MAAM,EAAC,MAAM;QACb,QAAQ,EAAE,QAAQ;KAClB,CAAC;AACH,CAAC;AAAA,CAAC;AAEK,SAAS,gBAAgB,CAAC,QAAyB;IACzD,IAAI,KAAa,CAAC;IAClB,IAAI,MAAc,CAAC;IAEnB,KAAK,GAAG,QAAQ,CAAC,MAAM,CAAC;IACxB,IAAI,KAAK,GAAG,CAAC,EAAC,CAAC;QACd,KAAK,IAAI,GAAG,CAAC;IACd,CAAC;IACD,MAAM,GAAG,EAAE,GAAG,QAAQ,CAAC,QAAQ,CAAC;IAEhC,OAAO;QACN,OAAO,EAAE,KAAK;QACd,QAAQ,EAAE,MAAM;QAChB,OAAO,EAAE,QAAQ,CAAC,KAAK,CAAC;QACxB,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC;KAE1B,CAAC;AACH,CAAC;AAEM,SAAS,gBAAgB,CAAC,KAAkB;IAElD,IAAI,MAAc,CAAC;IACnB,IAAI,QAAgB,CAAC;IAErB,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC;IACrB,IAAI,MAAM,GAAG,CAAC,EAAC,CAAC;QACf,MAAM,IAAI,GAAG,CAAC;IACf,CAAC;IAED,QAAQ,GAAG,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;IAE7B,OAAO;QACN,QAAQ,EAAE,MAAM;QAChB,UAAU,EAAE,QAAQ;QACpB,QAAQ,EAAE,QAAQ,CAAC,MAAM,CAAC;QAC1B,UAAU,EAAE,QAAQ,CAAC,QAAQ,CAAC;KAC9B,CAAC;AACH,CAAC;AAEM,SAAS,oBAAoB,CAAC,QAAyB,EAAE,CAAS;IACxE,CAAC,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACpE,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACpE,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAExC,OAAO;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;QACN,GAAG,EAAE,CAAC;KACN,CAAC;AACH,CAAC;AAAA,CAAC;AAEK,SAAS,SAAS,CAAC,EAAU,EAAE,GAAW,EAAE,IAAgB;IAClE,IAAI,IAAI,IAAI,sDAAU,CAAC,OAAO,EAAE,CAAC;QAChC,OAAO;YACN,OAAO,EAAE,EAAE;YACX,QAAQ,EAAE,GAAG;YACb,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC;YACrB,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC;SACvB;IACF,CAAC;SAAM,IAAI,IAAI,IAAI,sDAAU,CAAC,OAAO,EAAE,CAAC;QACvC,OAAO;YACN,OAAO,EAAE,EAAE;YACX,QAAQ,EAAE,GAAG;YACb,OAAO,EAAE,QAAQ,CAAC,EAAE,CAAC;YACrB,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC;SACvB;IACF,CAAC;SAAM,CAAC;QACP,OAAO,CAAC,KAAK,CAAC,8BAA8B,GAAG,IAAI,GAAG,gBAAgB,CAAC,CAAC;QACxE,OAAO,IAAI;IACZ,CAAC;AAEF,CAAC;AAGM,SAAS,aAAa,CAAC,GAAW,EAAE,KAAa,EAAE,IAAgB;IACzE,IAAI,IAAI,IAAI,sDAAU,CAAC,OAAO,EAAE,CAAC;QAChC,OAAO;YACN,QAAQ,EAAE,GAAG;YACb,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC;YACvB,UAAU,EAAE,QAAQ,CAAC,KAAK,CAAC;SAC3B;IACF,CAAC;SAAM,IAAI,IAAI,IAAI,sDAAU,CAAC,OAAO,EAAE,CAAC;QACvC,OAAO;YACN,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC;YACvB,UAAU,EAAE,QAAQ,CAAC,KAAK,CAAC;YAC3B,QAAQ,EAAE,GAAG;YACb,UAAU,EAAE,KAAK;SACjB;IACF,CAAC;SAAM,CAAC;QACP,OAAO,CAAC,KAAK,CAAC,8BAA8B,GAAG,IAAI,GAAG,gBAAgB,CAAC,CAAC;QACxE,OAAO,IAAI;IACZ,CAAC;AACF,CAAC;AAED,SAAS,GAAG,CAAC,CAAkB,EAAE,CAAkB;IAClD,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACxC,CAAC;AAEI,SAAS,YAAY,CAAC,QAAgB;IAE7C,yBAAyB;IACxB,IAAI,IAAI,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IACnC,IAAI,IAAI,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IACnC,IAAI,IAAI,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IAEnC,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAC9B,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAC9B,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IAE9B,IAAI,IAAI,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACnC,IAAI,IAAI,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACnC,IAAI,IAAI,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAEnC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AAE/D,CAAC;AAEM,SAAS,QAAQ,CAAC,OAAe;IACvC,OAAO,CAAC,OAAO,GAAG,GAAG,CAAE,GAAG,IAAI,CAAC,EAAE,CAAE;AACpC,CAAC;AAEM,SAAS,QAAQ,CAAC,OAAe;IACvC,OAAO,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC;AAChC,CAAC;AAEM,SAAS,UAAU,CAAC,KAAa;IAEvC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAC,EAAE,CAAC,CAAC;IAC7B,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAC,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IACxC,IAAI,CAAC,GAAG,CAAC,KAAK,GAAC,EAAE,GAAG,CAAC,GAAG,CAAC,GAAC,EAAE,CAAC,GAAG,IAAI,CAAC;IAErC,OAAO;QACN,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;KACJ,CAAC;AACH,CAAC;AAEM,SAAS,WAAW,CAAC,MAAc;IACzC,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,IAAI,MAAM,GAAG,CAAC,EAAC,CAAC;QACf,IAAI,GAAG,CAAC,CAAC,CAAC;IACX,CAAC;IAED,IAAI,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAClC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAE/B,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAE,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAE3C,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,GAAG,CAAC,GAAC,EAAE,CAAC,GAAG,IAAI,CAAC;IACvC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IAEb,OAAO;QACN,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;QACJ,CAAC,EAAE,CAAC;KACJ,CAAC;AACH,CAAC;AAED,SAAS,UAAU,CAAC,MAAyB;IAC5C,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/B,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC;IACvE,OAAO,GAAG,CAAC;AACZ,CAAC;AAED,SAAS,SAAS,CAAC,KAAgB;IAClC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9B,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,GAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;IACzE,OAAO,GAAG,CAAC;AACZ,CAAC;AAED,SAAS,YAAY,CAAC,EAAoB,EAAE,MAAc;IACzD,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IACd,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;IACd,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAC,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,GAAC,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7D,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAClB,CAAC;;;;;;;;;;;;;;;;AC5MD;;;;;;;GAOG;AAEI,MAAe,kBAAkB;CA6BvC;;;;;;;;;;;;;;;;;AC/CD;;;;;;;GAOG;AAGiC;AACC;AACH;AAS3B,MAAM,UAAU;IAUtB;;;;;OAKG;IACH;;;;OAIG;IACH,qEAAqE;IACrE,OAAO;IACP,wGAAwG;IACxG,qGAAqG;IACrG,uGAAuG;IACvG,WAAW;IACX,OAAO;IACP,sCAAsC;IACtC,OAAO;IACP,qGAAqG;IACrG,2DAA2D;IAC3D,QAAQ;IACR,kCAAkC;IAClC,OAAO;IACP,oGAAoG;IACpG,mCAAmC;IACnC,OAAO;IACP,0CAA0C;IAC1C,mCAAmC;IACnC,oDAAoD;IACpD,2CAA2C;IAC3C,OAAO;IACP,OAAO;IAGP,oEAAoE;IACpE,sEAAsE;IACtE,sBAAsB;IACtB,6CAA6C;IAC7C,8DAA8D;IAC9D,0BAA0B;IAC1B,wBAAwB;IACxB,eAAe;IACf,2BAA2B;IAC3B,uBAAuB;IACvB,SAAS;IACT,aAAa;IAEb,IAAI;IAEJ,sEAAsE;IAEtE,sEAAsE;IACtE,gCAAgC;IAChC,mBAAmB;IAEnB,iBAAiB;IAEjB,IAAI;IAGJ,4FAA4F;IAC5F,MAAM,CAAC,YAAY,CAAC,YAAoB,EAAE,WAAmB;QAC5D,OAAO,CAAC,GAAG,CAAC,qDAAqD,YAAY,aAAa,CAAC;QAC3F,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG;QAC7B,MAAM,YAAY,GAAG,YAAY,GAAG,OAAO;QAC3C,OAAO,CAAC,GAAG,CAAC,gCAAgC,YAAY,EAAE,CAAC;QAC3D,MAAM,aAAa,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,YAAY,GAAG,YAAY,GAAG,WAAW,GAAG,WAAW,CAAC,CAAE;QACjH,OAAO,CAAC,GAAG,CAAC,SAAS,aAAa,EAAE,CAAC;QACrC,IAAI,aAAa,GAAG,CAAC,EAAE,CAAC;YACvB,OAAO,CAAC;QACT,CAAC;QACD,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC;IACjC,CAAC;IAED,MAAM,CAAC,gBAAgB,CAAC,KAAa;QACpC,MAAM,KAAK,GAAG,UAAC,EAAI,KAAK;QAClB,MAAM,OAAO,GAAG,IAAI,8CAAO,CAAC,KAAK,CAAC;QACxC,OAAO,OAAO;IACf,CAAC;IAED,MAAM,CAAC,oBAAoB,CAAC,eAAuB,EAAE,UAAkB;QACtE,MAAM,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC,eAAe,EAAE,UAAU,CAAC;QACnE,MAAM,KAAK,GAAG,UAAC,EAAI,YAAY;QAC/B,MAAM,OAAO,GAAG,IAAI,8CAAO,CAAC,KAAK,CAAC;QACxC,OAAO,OAAO;IACf,CAAC;IAED,4FAA4F;IAC5F,MAAM,CAAC,oBAAoB,CAAC,WAAmB,EAAE,KAAa;QAC7D,MAAM,wBAAwB,GAAG,IAAI,CAAC,IAAI,CAAE,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,GAAG,UAAC,WAAW,GAAG,CAAC,UAAC,EAAE,KAAK,EAAC,CAAE,EAAE,CAAC,EAAE,CAAE;QAClG,OAAO,CAAC,GAAG,CAAC,qCAAqC,WAAW,qBAAqB,KAAK,EAAE,CAAC;QACzF,MAAM,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE;QAC7B,MAAM,GAAG,GAAG,wBAAwB,GAAG,OAAO;QAC9C,MAAM,MAAM,GAAG,wBAAwB,GAAG,OAAO,GAAG,EAAE;QACtD,MAAM,MAAM,GAAG,wBAAwB,GAAG,OAAO,GAAG,IAAI;QACxD,OAAO,CAAC,GAAG,CAAE,wBAAwB,GAAG,wBAAwB,CAAC;QACjE,OAAO,CAAC,GAAG,CAAE,wBAAwB,GAAG,GAAG,CAAC;QAC5C,OAAO,CAAC,GAAG,CAAE,uBAAuB,GAAG,MAAM,CAAC;QAC9C,OAAO,CAAC,GAAG,CAAE,uBAAuB,GAAG,MAAM,CAAC;QAC9C,OAAO;YACN,KAAK,EAAE,wBAAwB;YAC/B,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,MAAM;YAChB,QAAQ,EAAE,MAAM;SAChB;IACF,CAAC;IAGD;;;;OAIG;IACH,MAAM,CAAC,aAAa,CAAC,KAAa,EAAE,OAAe;QAClD,gBAAgB;QAChB,gEAAgE;QAChE,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,UAAC,EAAI,KAAK,EAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QACjE,OAAO,MAAM,CAAC;IACf,CAAC;IAED,MAAM;IACN,MAAM;IACN,sDAAsD;IACtD,uDAAuD;IACvD,MAAM;IACN,2CAA2C;IAC3C,0BAA0B;IAC1B,2EAA2E;IAC3E,iEAAiE;IACjE,wEAAwE;IACxE,wBAAwB;IACxB,IAAI;IAEJ,iEAAiE;IACjE,oEAAoE;IACpE,uBAAuB;IACvB,mDAAmD;IACnD,sDAAsD;IACtD,KAAK;IACL,uBAAuB;IACvB,IAAI;IAEJ,6CAA6C;IAC7C,uCAAuC;IACvC,IAAI;IAEJ,yCAAyC;IACzC,mCAAmC;IACnC,IAAI;IAEJ,oEAAoE;IAEpE,uBAAuB;IACvB,yBAAyB;IACzB,mBAAmB;IACnB,oBAAoB;IACpB,mBAAmB;IACnB,KAAK;IAEL,2BAA2B;IAE3B,YAAY;IACZ,iBAAiB;IACjB,oBAAoB;IACpB,MAAM;IACN,IAAI;IAEJ;;;;;OAKG;IACH,MAAM,CAAC,WAAW,CAAC,KAAY,EAAE,CAAS;QAEzC,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,CAAC,IAAI,CAAC,IAAI,+CAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,QAAQ,GAAG,CAAC,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACzG,IAAI,CAAC,IAAI,CAAC,IAAI,+CAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,QAAQ,GAAG,CAAC,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACzG,IAAI,CAAC,IAAI,CAAC,IAAI,+CAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,QAAQ,GAAG,CAAC,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACzG,IAAI,CAAC,IAAI,CAAC,IAAI,+CAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,QAAQ,GAAG,CAAC,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QAEzG,OAAO,IAAI,CAAC;IACb,CAAC;;AA/LD,sEAAsE;AAC/D,2BAAgB,GAAW,GAAG,CAAC;AACtC,0DAA0D;AACnD,sBAAW,GAAW,IAAI,CAAC;AAC3B,YAAC,GAAW,CAAC,CAAC;AACd,YAAC,GAAW,CAAC,CAAC;AACd,iBAAM,GAAW,4CAAK,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;AC/BhE,MAAM,WAAW;IAIpB,YAAY,GAAW,EAAE,GAAW;QAChC,IAAI,CAAC,GAAG,GAAG,GAAG;QACd,IAAI,CAAC,GAAG,GAAG,GAAG;IAClB,CAAC;IAED,WAAW;QACP,OAAO,IAAI,CAAC,GAAG;IACnB,CAAC;IAED,WAAW;QACP,OAAO,IAAI,CAAC,GAAG;IACnB,CAAC;CAEJ;;;;;;;;;;;;;;;;ACjBM,MAAM,kBAAkB;IAQ3B,YAAY,SAAiB,EAAE,UAAkB,EAAE,KAAa,EAChE,MAAc,EAAE,KAAa,EAAE,MAAc;QACzC,IAAI,CAAC,UAAU,GAAG,UAAU;QAC5B,IAAI,CAAC,SAAS,GAAG,SAAS;QAE1B,IAAI,CAAC,MAAM,GAAG,MAAM;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK;QAElB,IAAI,CAAC,KAAK,GAAG,KAAK;QAClB,IAAI,CAAC,MAAM,GAAG,MAAM;IACxB,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,KAAK;IACrB,CAAC;IAED,SAAS;QACL,OAAO,IAAI,CAAC,MAAM;IACtB,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,KAAK;IACrB,CAAC;IAED,SAAS;QACL,OAAO,IAAI,CAAC,MAAM;IACtB,CAAC;IAED,YAAY;QACR,OAAO,IAAI,CAAC,SAAS;IACzB,CAAC;IAED,aAAa;QACT,OAAO,IAAI,CAAC,UAAU;IAC1B,CAAC;IAGD,QAAQ,CAAC,KAAa;QAClB,IAAI,CAAC,KAAK,GAAG,KAAK;IACtB,CAAC;IAED,SAAS,CAAC,MAAc;QACpB,IAAI,CAAC,MAAM,GAAG,MAAM;IACxB,CAAC;IAED,QAAQ,CAAC,KAAa;QAClB,IAAI,CAAC,KAAK,GAAG,KAAK;IACtB,CAAC;IAED,SAAS,CAAC,MAAc;QACpB,IAAI,CAAC,MAAM,GAAG,MAAM;IACxB,CAAC;IAED,YAAY,CAAC,GAAW;QACpB,IAAI,CAAC,SAAS,GAAG,GAAG;IACxB,CAAC;IAED,aAAa,CAAC,IAAY;QACtB,IAAI,CAAC,UAAU,GAAG,IAAI;IAC1B,CAAC;CAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEqC;AACG;AAElC,MAAM,QAAQ;IAGjB;QAFQ,aAAQ,GAA0B,IAAI,GAAG,EAAE;IAErC,CAAC;IAEf,WAAW;QACP,OAAO,IAAI,CAAC,QAAQ;IACxB,CAAC;IAED,OAAO,CAAC,MAAc;QAClB,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC;QACtC,OAAO,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;IAC3C,CAAC;IAEK,YAAY,CAAC,GAAW;;YAC1B,MAAM,IAAI,GAAG,MAAM,gDAAU,CAAC,QAAQ,CAAC,GAAG,CAAC;YAC3C,MAAM,QAAQ,GAAG,IAAI,kDAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE;YAChD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,QAAQ,CAAC;QACrD,CAAC;KAAA;IAED,OAAO,CAAC,IAAc;QAClB,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE;QAC/B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC;IACnC,CAAC;CACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3B+F;AAEhC;AACnB;AAE+B;AACtB;AACT;AACO;AAG7C,MAAM,QAAQ;IAgBjB,YAAY,UAA6B,EAAE,MAAqB,EAAE,QAA+B;QAdzF,YAAO,GAAsB,EAAE;QAO/B,QAAG,GAAW,GAAG;QACjB,QAAG,GAAW,GAAG;QAQrB,IAAI,UAAU,EAAE,CAAC;YACb,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC;QACvC,CAAC;aAAM,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC9B,OAAO,CAAC,KAAK,CAAC,oCAAoC,CAAC;YACnD,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC;QACzD,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,8DAAc,CAAC,KAAK,CAAC;YACnD,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,8DAAc,CAAC,UAAU,CAAC;YAC1D,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,8DAAc,CAAC,UAAU,CAAC;YAC1D,IAAI,CAAC,MAAM,GAAG,MAAM;YACpB,IAAI,MAAM,IAAI,MAAM,EAAE,CAAC;gBACnB,OAAO,CAAC,KAAK,CAAC,iCAAiC,CAAC;gBAChD,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC;YACtD,CAAC;YACD,IAAI,CAAC,SAAS,GAAG,MAAM;YACvB,IAAI,CAAC,MAAM,GAAG,MAAM;YACpB,IAAI,CAAC,OAAO,GAAG,sDAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC;YACtD,IAAI,CAAC,kBAAkB,GAAG,0EAAoB,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC;QAEzF,CAAC;IAEL,CAAC;IAED,kBAAkB,CAAC,cAA4B,EAAE,gBAAmC,EAAE,SAAiB;QACnG,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,gBAAgB,EAAE,SAAS,CAAC;QAC5D,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC;IACpC,CAAC;IACD,uHAAuH;IACvH,mEAAmE;IACnE,uCAAuC;IACvC,IAAI;IAEJ,SAAS;QACL,OAAO,IAAI,CAAC,MAAM;IACtB,CAAC;IAED,UAAU;QACN,OAAO,IAAI,CAAC,OAAO;IACvB,CAAC;IAED,kBAAkB,CAAC,UAAsB;;QAErC,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,IAAI;QAE9B,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,gBAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,8DAAc,CAAC,KAAK,CAAC,0CAAE,KAAK,CAAC;QAC5E,MAAM,MAAM,GAAG,MAAM,CAAC,gBAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,uDAAiB,CAAC,MAAM,CAAC,0CAAE,KAAK,CAAC;QAClF,MAAM,MAAM,GAAG,MAAM,CAAC,gBAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,uDAAiB,CAAC,MAAM,CAAC,0CAAE,KAAK,CAAC;QAClF,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,gBAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,0CAAE,KAAK,CAAC;QAEtE,IAAI,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;YAC5E,OAAO,CAAC,IAAI,CAAC,qCAAqC,CAAC;YACnD,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC;QAC1D,CAAC;QACD,IAAI,MAAM,IAAI,MAAM,EAAE,CAAC;YACnB,OAAO,CAAC,KAAK,CAAC,iCAAiC,CAAC;YAChD,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC;QACtD,CAAC;QACD,IAAI,CAAC,SAAS,GAAG,MAAM;QACvB,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC;QAC9B,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC;IAErC,CAAC;IAED,SAAS;QACL,OAAO,IAAI,CAAC,MAAM;IACtB,CAAC;IAEO,aAAa,CAAC,UAAsB;;QAExC,MAAM,MAAM,GAAG,MAAM,CAAC,gBAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,uDAAiB,CAAC,MAAM,CAAC,0CAAE,KAAK,CAAC;QAClF,MAAM,KAAK,GAAG,MAAM,CAAC,gBAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,uDAAiB,CAAC,KAAK,CAAC,0CAAE,KAAK,CAAC;QAChF,MAAM,MAAM,GAAG,MAAM,CAAC,gBAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,uDAAiB,CAAC,MAAM,CAAC,0CAAE,KAAK,CAAC;QAElF,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;QAEvC,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC;YACvD,MAAM,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;YACjC,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC;gBAC3C,MAAM,OAAO,GAAG,gDAAU,CAAC,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,GAAG,UAAU,EAAE,IAAI,GAAG,UAAU,GAAG,UAAU,CAAC,EAAE,MAAM,CAAC;gBACpI,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC;oBAClB,SAAQ;gBACZ,CAAC;gBACD,MAAM,WAAW,GAAG,KAAK,GAAG,MAAM,GAAG,OAAO,CAAC;gBAC7C,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;oBAC5C,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC;gBAC3B,CAAC;qBAAM,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;oBACnD,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC;gBAC3B,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IAED,MAAM,CAAO,gBAAgB,CAAC,IAAY;;YACtC,MAAM,IAAI,GAAG,MAAM,gDAAU,CAAC,QAAQ,CAAC,IAAI,CAAC;YAC5C,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;gBACf,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,gBAAgB,CAAC;gBAC1C,OAAO,IAAI;YACf,CAAC;YACD,OAAO,IAAI;QACf,CAAC;KAAA;IAGD,OAAO;QACH,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE;IACtD,CAAC;IAEO,UAAU,CAAC,cAA4B,EAAE,gBAAmC,EAAE,SAAiB;;QAGnG,MAAM,MAAM,GAAG,MAAM,CAAC,sBAAgB,CAAC,QAAQ,CAAC,uDAAiB,CAAC,MAAM,CAAC,0CAAE,KAAK,CAAC;QACjF,MAAM,KAAK,GAAG,MAAM,CAAC,sBAAgB,CAAC,QAAQ,CAAC,uDAAiB,CAAC,KAAK,CAAC,0CAAE,KAAK,CAAC;QAC/E,MAAM,MAAM,GAAG,MAAM,CAAC,sBAAgB,CAAC,QAAQ,CAAC,uDAAiB,CAAC,MAAM,CAAC,0CAAE,KAAK,CAAC;QAEjF,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;QACvC,IAAI,CAAC,UAAU,EAAE,CAAC;YACd,OAAO,CAAC,KAAK,CAAC,oBAAoB,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC;QACzC,CAAC;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,KAAK,CAAC,SAAS,CAAC;QACnC,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,SAAS,EAAE,GAAG,EAAE,EAAE,CAAC;YACvC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,UAAU,CAAC,SAAS,GAAG,UAAU,CAAC;QAC9D,CAAC;QAGD,cAAc,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAE7B,MAAM,EAAE,GAAG,KAAK,CAAC,QAAQ,EAAE;YAC3B,MAAM,GAAG,GAAG,KAAK,CAAC,SAAS,EAAE;YAC7B,MAAM,EAAE,GAAG,0DAAS,CAAC,EAAE,EAAE,GAAG,EAAE,4DAAU,CAAC,OAAO,CAAC;YACjD,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC;gBACb,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,GAAG,0BAA0B,CAAC,CAAC;gBACxE,OAAO;YACX,CAAC;YACD,MAAM,EAAE,GAAG,0EAAoB,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;YACvD,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,0EAAoB,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;YAE3G,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,SAAS,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,IAAI,SAAS;gBAAE,OAAO;YAEvE,MAAM,UAAU,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;YACzC,IAAI,CAAC,UAAU;gBAAE,OAAO,CAAC,oCAAoC;YAE7D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;gBAClC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,UAAU,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;YAC5D,CAAC;YAED,MAAM,OAAO,GAAG,gDAAU,CAAC,iBAAiB,CAAC,CAAC,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;YACpE,IAAI,OAAO,IAAI,IAAI;gBAAE,OAAO;YAE5B,MAAM,WAAW,GAAG,KAAK,GAAG,MAAM,GAAG,OAAO,CAAC;YAC7C,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG;gBAAE,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC;YACtE,IAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG;gBAAE,IAAI,CAAC,GAAG,GAAG,WAAW,CAAC;QAE1E,CAAC,CAAC,CAAC;IAGP,CAAC;IACD,uHAAuH;IAGvH,wFAAwF;IACxF,sFAAsF;IACtF,wFAAwF;IAExF,8CAA8C;IAC9C,yBAAyB;IACzB,8CAA8C;IAC9C,gDAAgD;IAChD,QAAQ;IAER,+CAA+C;IAC/C,uDAAuD;IACvD,0EAA0E;IAC1E,QAAQ;IAIR,+DAA+D;IAE/D,6CAA6C;IAE7C,4DAA4D;IAC5D,4BAA4B;IAC5B,sFAAsF;IACtF,uBAAuB;IACvB,YAAY;IAEZ,0CAA0C;IAC1C,wEAAwE;IACxE,8DAA8D;IAC9D,0CAA0C;IAC1C,uBAAuB;IACvB,YAAY;IAEZ,kEAAkE;IAClE,iHAAiH;IACjH,6BAA6B;IAC7B,6BAA6B;IAE7B,iDAAiD;IACjD,mEAAmE;IACnE,6DAA6D;IAC7D,2CAA2C;IAC3C,wDAAwD;IACxD,mCAAmC;IACnC,2DAA2D;IAC3D,oBAAoB;IACpB,mBAAmB;IAEnB,iJAAiJ;IACjJ,qCAAqC;IACrC,2BAA2B;IAC3B,gBAAgB;IAEhB,4DAA4D;IAC5D,+DAA+D;IAC/D,0CAA0C;IAC1C,sEAAsE;IACtE,0CAA0C;IAC1C,gBAAgB;IAChB,YAAY;IACZ,QAAQ;IACR,IAAI;IAEI,wBAAwB,CAAC,GAAW,EAAE,gBAAmC;;QAC7E,MAAM,KAAK,GAAG,sBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,0CAAE,KAAK;QACnD,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC;YACvC,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,cAAc,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,GAAG,GAAG,iBAAiB,CAAC;QAC5C,CAAC;QACD,MAAM,IAAI,GAAG,IAAI,oDAAc,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC;QAC/C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;IAC5B,CAAC;IAEO,eAAe,CAAC,GAAW,EAAE,gBAAmC;;QACpE,MAAM,KAAK,GAAG,sBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,0CAAE,KAAK;QACnD,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,IAAI,IAAI,EAAE,CAAC;YACvC,MAAM,IAAI,GAAG,IAAI,oDAAc,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC;YAC/C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;QAC5B,CAAC;IACL,CAAC;IAIO,SAAS,CAAC,gBAAmC;QAEjD,IAAI,CAAC,MAAM,GAAG,IAAI,uDAAiB,EAAE;QAErC,IAAI,CAAC,wBAAwB,CAAC,uDAAiB,CAAC,MAAM,EAAE,gBAAgB,CAAC;QACzE,IAAI,CAAC,wBAAwB,CAAC,uDAAiB,CAAC,MAAM,EAAE,gBAAgB,CAAC;QAEzE,IAAI,CAAC,eAAe,CAAC,uDAAiB,CAAC,KAAK,EAAE,gBAAgB,CAAC;QAC/D,IAAI,CAAC,eAAe,CAAC,uDAAiB,CAAC,MAAM,EAAE,gBAAgB,CAAC;QAChE,IAAI,CAAC,eAAe,CAAC,uDAAiB,CAAC,KAAK,EAAE,gBAAgB,CAAC;QAE/D,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,uDAAiB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAE9E,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,uDAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC;QAE5F,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,uDAAiB,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC;QAE5F,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,uDAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAErF,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,uDAAiB,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAErF,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,uDAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAE/E,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,uDAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAE/E,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,8DAAc,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;QAEpF,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;QAE9E,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC;QAC7B,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,uDAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAE3E,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,uDAAiB,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAE3E,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,uDAAiB,CAAC,MAAM,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC;QAEtF,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,uDAAiB,CAAC,OAAO,EAAE,EAAE,EAAE,uDAAuD,CAAC,CAAC;QAE9H,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,GAAG,GAAG,IAAI,+CAAQ,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,MAAM,GAAG,yDAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC/B,IAAI,MAAM,GAAG,EAAE,GAAG,yDAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QAEtC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,uDAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;QAC7E,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,uDAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;QAE7E,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAGzD,CAAC;;AA5Sc,eAAM,GAAG,UAAU;AACnB,eAAM,GAAG,UAAU;AACnB,aAAI,GAAW,MAAM;;;;;;;;;;;;;;;;;;;;;ACxBa;AAGE;AACA;AACV;AACG;AAGzC,MAAM,oBAAoB;IAQ7B,MAAM,CAAC,WAAW,CAAC,MAAc,EAAE,EAAW;QAEtC,IAAI,UAAU,GAAmB;YAC7B,OAAO,EAAE,GAAG;YACZ,OAAO,EAAE,GAAG;YACZ,OAAO,EAAE,GAAG;YACZ,OAAO,EAAE,GAAG;YACZ,eAAe,EAAE,EAAE;SACtB;QAGD,IAAI,WAAW,GAAG,EAAE,CAAC,qBAAqB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACtD,IAAI,SAAS,GAAG,EAAE,CAAC;QAEnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC1C,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,+CAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5C,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;gBACT,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;gBAC7B,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBACzB,gEAAgE;gBAChE,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;oBAC5B,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;wBAC1C,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;oBACxC,CAAC;yBAAM,CAAC;wBACJ,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;oBACpC,CAAC;gBACL,CAAC;YACL,CAAC;QACL,CAAC;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACxC,IAAI,UAAU,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACpC,+DAA+D;YAC/D,8CAA8C;YAC9C,IAAI,MAAM,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,UAAU,CAAC;YAEtC,IAAI,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YAE7B,6BAA6B;YAC7B,IAAI,CAAC,GAAG,IAAI,kDAAK,CAAC,4DAAU,CAAC,KAAK,EAAE,4DAAU,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YACvE,IAAI,KAAK,GAAG,oBAAoB,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;YAClE,UAAU,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC3C,UAAU,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAE/C,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;gBACzD,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,CAAC;YACD,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;gBACzD,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,CAAC;YACD,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;gBACzD,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,CAAC;YACD,IAAI,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;gBACzD,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,CAAC;QAEL,CAAC;QACD,OAAO,UAAU,CAAC;IACtB,CAAC;IAEL,MAAM,CAAC,kBAAkB,CAAC,EAAe;QACrC,IAAI,MAAM,GAAW,GAAG,CAAC;QACzB,IAAI,MAAM,GAAW,GAAG,CAAC;QAEzB,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,oBAAoB,CAAC,MAAM,EAAE,CAAC,CAAC,mBAAmB;YACzE,MAAM,GAAG,EAAE,CAAC,KAAK,CAAC;YAElB,MAAM,GAAG,4CAAK,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,oBAAoB,CAAC,CAAC,GAAG,EAAE,GAAG,oBAAoB,CAAC,CAAC,CAAC;QAGzF,CAAC;aAAM,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,CAAC,cAAc;YAE1E,IAAI,KAAK,GAAG,EAAE,CAAC,KAAK,CAAC;YAErB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ;YACnB,IAAI,oBAAoB,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,CAAC,sBAAsB;gBAC3E,CAAC,GAAG,CAAC,CAAC;YACV,CAAC;YAED,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,4CAAK,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YACrF,IAAI,KAAK,GAAG,CAAE,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,oBAAoB,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;YAE7I,MAAM,GAAG,KAAK,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC;YACzC,MAAM,GAAG,CAAC,GAAG,GAAG,oBAAoB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;YAEvF,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAChB,MAAM,IAAI,CAAC,CAAC,CAAC;YACjB,CAAC;QACL,CAAC;QAED,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC5B,CAAC;IAED,MAAM,CAAC,gBAAgB,CAAC,CAAS,EAAE,CAAS,EAAE,UAA0B,EAAE,OAAe;QACrF,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;QAC9D,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;QAE9D,IAAI,MAAc,CAAC;QACnB,IAAI,MAAc,CAAC;QACnB,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,GAAG,IAAI,UAAU,CAAC,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,KAAK,EAAE,CAAC;YAC7E,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;QACtD,CAAC;aAAM,CAAC;YACJ,MAAM,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;QAChD,CAAC;QACD,MAAM,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;QAG5C,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;QAChC,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,GAAG,CAAC;QAEhC,kFAAkF;QAClF,UAAU;QACV,mDAAmD;QACnD,mDAAmD;QACnD,mDAAmD;QAEnD,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC;QAC5B,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC;QAC5B,OAAO,CAAC,CAAC,EAAE,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,gBAAgB,CAAC,CAAS,EAAE,CAAS,EAAE,UAA0B,EAAE,MAAc,EAAE,MAAc;QACpG;;;;;;;;;mBASW;QACX,oCAAoC;QACpC,oCAAoC;QAEpC,IAAI,OAAO,GAAG,MAAM,CAAC;QACrB,IAAI,OAAO,GAAG,MAAM,CAAC;QACrB,IAAI,MAAM,EAAE,CAAC;YACT,OAAO,GAAG,MAAM,CAAC;QACrB,CAAC;QACD,IAAI,MAAM,EAAE,CAAC;YACT,OAAO,GAAG,MAAM,CAAC;QACrB,CAAC;QACD,MAAM,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,OAAO,CAAC;QACnC,MAAM,MAAM,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,OAAO,CAAC;QAEnC,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACtE,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QACtE,MAAM,KAAK,GAAG,CAAC,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;QAE1D,0BAA0B;QAC1B,MAAM,CAAC,GAAG,UAAU,CAAC,KAAK,GAAG,SAAS,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;QAC3D,MAAM,CAAC,GAAG,KAAK,GAAG,SAAS,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,CAAC;QAEhD,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,kBAAkB,CAAC,CAAS,EAAE,CAAS;QAE1C,IAAI,MAAM,GAAW,GAAG;QACxB,IAAI,QAAQ,GAAW,GAAG;QAC1B,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,oBAAoB,CAAC,CAAC;QAIrE,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,mBAAmB;YAExC,MAAM,GAAG,CAAC;YACV,QAAQ,GAAG,yDAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;QAEhG,CAAC;aAAM,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,gBAAgB;YAE3C,MAAM,KAAK,GAAG,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,oBAAoB,CAAC,CAAC,CAAC,GAAG,GAAG;YAC3F,MAAM,QAAQ,GAAG,4CAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,oBAAoB,CAAC,CAAC,CAAC;YACzE,IAAI,CAAC,GAAG,CAAC,EAAC,QAAQ;YAClB,IAAI,oBAAoB,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,QAAQ,GAAG,CAAC,EAAE,CAAC,CAAC,sBAAsB;gBAC1E,CAAC,GAAG,CAAC;YACT,CAAC;YACD,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,oBAAoB,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,oBAAoB,CAAC,CAAC,CAAC;YAChI,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK;YAChC,QAAQ,GAAG,yDAAQ,CAAC,QAAQ,CAAC;YAC7B,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;gBACT,QAAQ,IAAI,CAAC,CAAC;YAClB,CAAC;QACL,CAAC;QACD,6BAA6B;QAC7B,mBAAmB;QACnB,iFAAiF;QACjF,MAAM,CAAC,GAAG,IAAI,kDAAK,CAAC,4DAAU,CAAC,KAAK,EAAE,4DAAU,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;QAE5E,OAAO,CAAC,CAAC;IACb,CAAC;;AAtMM,gCAAW,GAAW,IAAI,CAAC;AAC3B,sBAAC,GAAW,CAAC,CAAC;AACd,sBAAC,GAAW,CAAC,CAAC;AACd,2BAAM,GAAW,4CAAK,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdrD;AACW;AACG;AACV;AACW;AACR;AACiB;AACR;AAEhB;AACzC,0DAA0D;AACb;AACC;AACS;AACA;AAEA;AAIhD,MAAM,QAAQ;IAMjB,YAAY,YAAoB;QAHxB,YAAO,GAAmB,IAAI;QAC9B,aAAQ,GAA0B,IAAI;QAG1C,IAAI,CAAC,OAAO,GAAG,YAAY;QAC3B,IAAI,CAAC,IAAI,EAAE;QACX,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,EAAE,CAAC;YACvB,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC;YAC/B,MAAM,IAAI,KAAK,CAAC,iBAAiB,CAAC;QACtC,CAAC;QACD,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE,CAAC;YACxB,OAAO,CAAC,IAAI,CAAC,kBAAkB,CAAC;YAChC,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC;QACvC,CAAC;IACL,CAAC;IAEK,IAAI;;YACN,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,iBAAiB,EAAE;YAC/C,MAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,8DAAc,CAAC,KAAK,CAAC;YACpD,IAAI,CAAC,OAAO,GAAG,uDAAU,CAAC,gBAAgB,CAAC,KAAK,CAAC;QACrD,CAAC;KAAA;IAEa,iBAAiB;;YAC3B,MAAM,QAAQ,GAAG,gEAAe,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC;YAChE,OAAO,QAAQ;QACnB,CAAC;KAAA;IAED,MAAM,CAAC,iBAAiB,CAAC,MAAa,EAAE,SAAiB,EAAE,YAAoB,EAAE,UAAkB;QAI/F,MAAM,OAAO,GAAG,uDAAU,CAAC,oBAAoB,CAAC,YAAY,EAAE,UAAU,CAAC;QAEzE,2DAA2D;QAC3D,IAAI,eAAe,GAAG,IAAI,iEAAe,EAAE;QAG3C,MAAM,GAAG,GAAG,IAAI,+CAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,YAAY,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,YAAY,EAAE,CAAC,MAAM,CAAC,CAAC;QACpG,MAAM,UAAU,GAAG,yDAAQ,CAAC,SAAS,CAAC,CAAC;QAEvC,kHAAkH;QAClH,MAAM,QAAQ,GAAa,OAAO,CAAC,kBAAkB,CAAC,GAAG,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC,eAAe;QAE1F,iDAAiD;QACjD,uCAAuC;QACvC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAEzC,kEAAkE;YAClE,qCAAqC;YACrC,IAAI;YACJ,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;gBAChF,eAAe,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,iCAAiC;YACrC,CAAC;QAEL,CAAC;QAED,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAClC,mCAAmC;QACnC,4BAA4B;QAC5B,IAAI;QACJ,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;YACjD,eAAe,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC;QAGD,8CAA8C;QAC9C,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,KAAK,GAAG,SAAS,CAAC;QAChD,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,KAAK,GAAG,SAAS,CAAC;QAChD,IAAI,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,SAAS,CAAC;QAClD,IAAI,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,SAAS,CAAC;QAElD,eAAe,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,CAAC,MAAc,EAAE,EAAE;YACtD,0CAA0C;YAE1C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;gBAClC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;oBAElC,MAAM,KAAK,GAAiB,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC,CAAC;oBAElF,IAAI,KAAK,IAAI,IAAI;wBAAE,SAAQ;oBAC3B,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,GAAG,KAAK;wBAChE,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,MAAM,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,MAAM,EAAE,CAAC;wBACvE,SAAS;oBACb,CAAC;oBACD,eAAe,CAAC,aAAa,CAAC,IAAI,sDAAU,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;oBACtG,qEAAqE;gBACzE,CAAC;YACL,CAAC;QACL,CAAC,CAAC;QAEF,kEAAkE;QAClE,wBAAwB;QACxB,OAAO,eAAe;IAC1B,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,CAAS,EAAE,CAAS,EAAE,MAAc,EAAE,OAAgB,EAAE,UAAkB;QAEvF,IAAI,CAAC,GAAG,IAAI;QACZ,IAAI,OAAO,EAAE,CAAC;YACV,MAAM,UAAU,GAAG,0EAAoB,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YACrE,IAAI,EAAE,GAAG,0EAAoB,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;YACzF,sIAAsI;YACtI;;;;;;cAME;YACF,CAAC,GAAG,0EAAoB,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1D,iCAAiC;YACjC,qBAAqB;YACrB,IAAI;QACR,CAAC;aAAM,CAAC;YACJ,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,2CAA2C;QACpF,CAAC;QAGD,OAAO,CAAC,CAAC;IACb,CAAC;IAED,2KAA2K;IAC3K,MAAM,CAAC,YAAY,CAAC,cAA+B,EAAE,gBAAmC,EAAE,YAAoB,EAAE,UAAkB;QAE9H,MAAM,OAAO,GAAG,uDAAU,CAAC,oBAAoB,CAAC,YAAY,EAAE,UAAU,CAAC;QAEzE,IAAI,QAAQ,GAAG,IAAI,kDAAQ,EAAE;QAE7B,cAAc,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,CAAC,MAAc,EAAE,EAAE;YACrD,IAAI,QAAQ,GAAG,IAAI,8DAAc,EAAE;YACnC,QAAQ,CAAC,OAAO,CAAC,8DAAc,CAAC,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC;YACrD,QAAQ,CAAC,OAAO,CAAC,8DAAc,CAAC,UAAU,EAAE,UAAU,CAAC;YACvD,MAAM,QAAQ,GAAG,IAAI,kDAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC;YAErD,MAAM,oBAAoB,GAAG,cAAc,CAAC,oBAAoB,CAAC,MAAM,CAAC;YAExE,QAAQ,CAAC,kBAAkB,CAAC,oBAAoB,EAAE,gBAAgB,EAAE,UAAU,CAAC;YAC/E,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC;QAC9B,CAAC,CAAC;QACF,OAAO,QAAQ;IAEnB,CAAC;IAED,MAAM,CAAO,SAAS,CAAC,SAA0B,EAAE,SAAiB,EAAE,UAAmB,EAAE,UAAkB,EAAE,WAAmB;;YAE9H,MAAM,OAAO,GAAG,uDAAU,CAAC,gBAAgB,CAAC,SAAS,CAAC;YAEtD,IAAI,MAAc,CAAC;YACnB,IAAI,UAAU,GAAkB,IAAI,CAAC;YACrC,mFAAmF;YACnF,IAAI,UAAU,EAAE,CAAC;gBACb,QAAQ,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;YAC1C,CAAC;YACD,IAAI,UAAU,GAA0B,IAAI;YAI5C,SAAS,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC5C,MAAM,EAAE,GAAG,KAAK,CAAC,QAAQ,EAAE;gBAC3B,MAAM,GAAG,GAAG,KAAK,CAAC,SAAS,EAAE;gBAE7B,MAAM,CAAC,GAAG,IAAI,kDAAK,CAAC,6DAAU,CAAC,KAAK,EAAE,6DAAU,CAAC,OAAO,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;gBACnE,MAAM,GAAG,GAAG,IAAI,+CAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,YAAY,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC,YAAY,EAAE,CAAC,MAAM,CAAC,CAAC;gBAE1F,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAE9B,IAAI,UAAU,KAAK,MAAM,IAAI,UAAU,IAAI,IAAI,EAAE,CAAC;oBAC9C,UAAU,GAAG,0EAAoB,CAAC,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;oBAC/D,UAAU,GAAG,MAAM,CAAC;gBACxB,CAAC;gBACD,IAAI,UAAU,EAAE,CAAC;oBACb,MAAM,EAAE,GAAG,0EAAoB,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;oBACjE,MAAM,EAAE,GAAG,0EAAoB,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;oBACvF,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;oBACzB,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC;gBAC/B,CAAC;gBACD,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC;YACnC,CAAC,CAAC,CAAC;YACH,IAAI,MAAM,GAAG,MAAM,QAAQ,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC;YAC7E,OAAO,MAAM;QACjB,CAAC;KAAA;IAED,6BAA6B;IAC7B,MAAM,CAAC,iBAAiB,CAAC,SAA0B;QAC/C,uCAAuC;QACvC,MAAM,OAAO,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG;QAC7B,MAAM,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE;QAC7B,MAAM,KAAK,GAAG,OAAO,GAAG,OAAO;QAC/B,MAAM,KAAK,GAAG,OAAO,GAAG,OAAO;QAC/B,MAAM,KAAK,GAAG,OAAO,GAAG,QAAQ;QAChC,SAAS,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAE,CAAC,KAAK,EAAE,EAAE;YAC7C,MAAM,EAAE,GAAG,KAAK,CAAC,QAAQ,EAAE;YAC3B,MAAM,GAAG,GAAG,KAAK,CAAC,SAAS,EAAE;YAC7B,MAAM,MAAM,GAAG,OAAO,GAAG,EAAE;YAC3B,MAAM,OAAO,GAAG,OAAO,GAAG,GAAG;YAC7B,SAAS;YACT,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;gBAC7C,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;YACnE,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;YAC1B,MAAM,KAAK,GAAG,CAAC,GAAG,OAAO;YAEzB,YAAY;YACZ,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC;gBACzE,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAC5G,MAAM,CAAC,GAAG,KAAK,GAAG,YAAY;YAC9B,MAAM,KAAK,GAAG,CAAC,GAAG,OAAO;YACzB,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC;YAC/B,sCAAsC;QAC1C,CAAC,CAAC,CAAC;QACH,yBAAyB;IAC7B,CAAC;IAED,MAAM,CAAO,cAAc,CAAC,SAA0B,EAAE,WAAmB,EAAE,SAAiB;;YAE1F,MAAM,QAAQ,GAAG,SAAS,CAAC,YAAY,EAAE;YACzC,IAAI,QAAQ,GAAG,EAAE,CAAC;YAElB,KAAK,IAAI,UAAU,IAAI,QAAQ,EAAE,CAAC;gBAE9B,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,mDAAmD;gBACvG,MAAM,OAAO,GAAG,WAAW,GAAG,SAAS,GAAG,SAAS,GAAG,MAAM,GAAG,GAAG,GAAG,OAAO,GAAG,UAAU,GAAG,OAAO,CAAC;gBACpG,OAAO,CAAC,GAAG,CAAC,0BAA0B,OAAO,EAAE,CAAC;gBAEhD,oEAAoE;gBACpE,QAAQ,CAAC,IAAI,CAAC,gDAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;;oBAE3D,IAAI,UAAU,EAAE,CAAC;wBAEb,MAAM,MAAM,GAAG,MAAM,CAAC,gBAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAK,CAAC;wBAClE,MAAM,MAAM,GAAG,MAAM,CAAC,gBAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAK,CAAC;wBAClE,MAAM,MAAM,GAAG,MAAM,CAAC,gBAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAK,CAAC;wBAClE,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,EAAE,CAAC;4BAChC,OAAO,CAAC,KAAK,CAAC,WAAW,MAAM,aAAa,MAAM,aAAa,MAAM,kBAAkB,OAAO,EAAE,CAAC;4BACjG,OAAM;wBACV,CAAC;wBAED,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;wBAExC,SAAS,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;4BACzD,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC;4BAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;gCAClC,UAAU,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,UAAU,GAAG,CAAC,CAAC,CAAC;4BACjF,CAAC;4BACD,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;4BACnC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;wBAC9C,CAAC,CAAC;oBACN,CAAC;gBACL,CAAC,CAAC,CAAC,CAAC;YACR,CAAC;YACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC5B,OAAO,SAAS;QACpB,CAAC;KAAA;CAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrR2C;AACS;AAG9C,MAAM,eAAe;IAExB,MAAM,CAAO,iBAAiB,CAAC,OAAc;;YACzC,IAAI,YAAY,GAAG,EAAE;YACrB,IAAI,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,gBAAgB;gBAC5C,YAAY,GAAG,MAAM,eAAe,CAAC,kBAAkB,CAAC,OAAO,CAAC;YACpE,CAAC;iBAAM,CAAC,CAAC,aAAa;gBAClB,YAAY,GAAG,MAAM,eAAe,CAAC,iBAAiB,CAAC,OAAO,CAAC;YACnE,CAAC;YACD,MAAM,QAAQ,GAAkB,eAAe,CAAC,uBAAuB,CAAC,YAAY,CAAC;YACrF,OAAO,QAAQ;QACnB,CAAC;KAAA;IAEO,MAAM,CAAO,kBAAkB,CAAC,YAAoB;;YACxD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,YAAY,GAAG,aAAa,CAAC;YAC1D,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;gBACf,MAAM,IAAI,KAAK,CAAC,uBAAuB,QAAQ,CAAC,MAAM,EAAE,CAAC;YAC7D,CAAC;iBAAM,CAAC;gBACJ,MAAM,QAAQ,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE;gBACtC,OAAO,QAAQ;YACnB,CAAC;YACD,uBAAuB;YACvB,yCAAyC;YACzC,wDAAwD;YACxD,8DAA8D;YAC9D,WAAW;YACX,qCAAqC;YACrC,IAAI;YACJ,kBAAkB;QACtB,CAAC;KAAA;IAEO,MAAM,CAAO,iBAAiB,CAAC,YAAoB;;YAEvD,MAAM,QAAQ,GAAG,YAAY,GAAG,aAAa;YAC7C,MAAM,OAAO,GAAW,MAAM,0DAAQ,CAAC,QAAQ,CAAC;YAChD,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,OAAO,CAAC;YACrC,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,OAAO,CAAC;YAC5C,MAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAE3C,OAAO,QAAQ;QACnB,CAAC;KAAA;IAEO,MAAM,CAAC,uBAAuB,CAAC,YAAoB;QACvD,IAAI,QAAQ,GAAG,IAAI,8DAAc,EAAE;QACnC,MAAM,MAAM,GAAG,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAExC,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gBACtB,SAAS;YACb,CAAC;YAED,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC/B,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE,CAAC;gBAC1B,SAAS;YACb,CAAC;YACD,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;YAC5B,MAAM,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;YAC5B,IAAI,KAAK,GAAkB,GAAG;YAC9B,IAAI,GAAG,IAAI,8DAAc,CAAC,KAAK,IAAI,GAAG,IAAI,8DAAc,CAAC,UAAU,IAAI,GAAG,IAAI,8DAAc,CAAC,KAAK,IAAI,GAAG,IAAI,8DAAc,CAAC,MAAM,EAAE,CAAC;gBACjI,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC;YACzB,CAAC;YACD,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC;QAChC,CAAC;QACD,OAAO,QAAQ;IACnB,CAAC;CACJ;;;;;;;;;;;;;;;;ACrEM,MAAM,cAAc;IAYvB;QAFQ,YAAO,GAAqB,IAAI,GAAG,EAAe;IAE5C,CAAC;IAEf,OAAO,CAAC,GAAU,EAAE,KAAS;QACzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC;IAChC,CAAC;IAED,OAAO,CAAC,GAAW;QACf,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;IAChC,CAAC;IAED,UAAU;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,cAAc,CAAC,QAAQ;IAC5E,CAAC;;AAtBM,yBAAU,GAAU,iBAAiB;AACrC,oBAAK,GAAU,YAAY;AAC3B,oBAAK,GAAU,YAAY;AAC3B,uBAAQ,GAAU,UAAU;AAC5B,oBAAK,GAAU,kBAAkB;AACjC,qBAAM,GAAU,mBAAmB;;;;;;;;;;;;;;;;;ACPT;AAE9B,MAAM,UAAU;IAanB,YAAY,CAAS,EAAE,CAAS,EAAE,MAA0B;QAP5D,eAAU,GAAsB,IAAI;QACpC,UAAK,GAAkB,IAAI;QAQvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,oEAAoE;QACpE,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;YAC7C,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YACX,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;YACX,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;YACd,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACnB,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;YACZ,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;YACb,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACZ,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QAChB,CAAC;IAEL,CAAC;IAED,IAAI;QACA,OAAO,IAAI,CAAC,CAAC;IACjB,CAAC;IAED,IAAI;QACA,OAAO,IAAI,CAAC,CAAC;IACjB,CAAC;IACD,QAAQ;QACJ,OAAO,IAAI,CAAC,EAAE;IAClB,CAAC;IAED,SAAS;QACL,OAAO,IAAI,CAAC,GAAG;IACnB,CAAC;IAED,aAAa;QACT,OAAO,IAAI,CAAC,UAAU;IAC1B,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,KAAK;IACrB,CAAC;IAED,QAAQ,CAAC,KAAiB,EAAE,MAAc;QACtC,IAAI,IAAI,CAAC,UAAU,IAAI,SAAS,EAAE,CAAC;YAC/B,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACxC,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC;QAChD,CAAC;QACD,IAAI,CAAC,UAAU,GAAG,KAAK;QACvB,IAAI,CAAC,KAAK,GAAG,gDAAU,CAAC,iBAAiB,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC;IAC/D,CAAC;IAED,aAAa,CAAC,MAAc;QACxB,IAAI,CAAC,MAAM,GAAG,MAAM;IACxB,CAAC;IAED,KAAK,CAAC,CAAQ,EAAE,CAAQ;QACpB,IAAI,CAAC,CAAC,GAAG,CAAC;QACV,IAAI,CAAC,CAAC,GAAG,CAAC;IACd,CAAC;IAED,WAAW,CAAC,EAAS,EAAE,GAAU;QAC7B,IAAI,CAAC,EAAE,GAAG,EAAE;QACZ,IAAI,CAAC,GAAG,GAAG,GAAG;IAClB,CAAC;CAEJ;;;;;;;;;;;;;;;;;;AChF8C;AACc;AAGtD,MAAM,eAAe;IASxB,mCAAmC;IACnC,iCAAiC;IACjC;QANA,kBAAa,GAAkB,IAAI;QACnC,kBAAa,GAAkB,IAAI;QAM/B,IAAI,CAAC,QAAQ,GAAG,EAAE;QAClB,IAAI,CAAC,cAAc,GAAG,IAAI,KAAK,EAAc;IAEjD,CAAC;IAED,cAAc,CAAC,CAAS,EAAE,CAAS;QAC/B,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC;IACzE,CAAC;IAED,oBAAoB,CAAC,MAAc;QAC/B,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC;IAChE,CAAC;IAED,iBAAiB;QACb,OAAO,IAAI,CAAC,cAAc;IAC9B,CAAC;IAED,YAAY;QACR,OAAO,IAAI,CAAC,QAAQ;IACxB,CAAC;IAED,aAAa,CAAC,KAAiB;QAC3B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;IACnC,CAAC;IAED,aAAa,CAAC,MAAc;QACxB,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;QAC9B,CAAC;IACL,CAAC;IAGD,yBAAyB;QACrB,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO,IAAI,CAAC;QAElD,sCAAsC;QACtC,IAAI,KAAK,GAAG,QAAQ,EAAE,KAAK,GAAG,CAAC,QAAQ,CAAC;QACxC,IAAI,MAAM,GAAG,QAAQ,EAAE,MAAM,GAAG,CAAC,QAAQ,CAAC;QAE1C,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YAClC,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;gBACxB,IAAI,CAAC,CAAC,EAAE,GAAG,KAAK;oBAAE,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;gBAC/B,IAAI,CAAC,CAAC,EAAE,GAAG,KAAK;oBAAE,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC;YACnC,CAAC;YACD,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC;gBACzB,IAAI,CAAC,CAAC,GAAG,GAAG,MAAM;oBAAE,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC;gBACnC,IAAI,CAAC,CAAC,GAAG,GAAG,MAAM;oBAAE,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC;YACvC,CAAC;QACL,CAAC;QAED,0CAA0C;QAC1C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC;YAClD,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YACvD,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,MAAM,GAAG,GAAG,KAAK,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;QACxC,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QAE5C,OAAO,IAAI,sEAAkB,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;IAC3E,CAAC;IAED,cAAc,CAAC,KAAoB;QAC/B,IAAI,CAAC,KAAK;YAAE,OAAM;QAElB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACtB,IAAI,CAAC,aAAa,GAAG,KAAK;QAC9B,CAAC;aAAM,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YACpC,IAAI,CAAC,aAAa,GAAG,KAAK;QAC9B,CAAC;QAED,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;YACtB,IAAI,CAAC,aAAa,GAAG,KAAK;QAC9B,CAAC;aAAM,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;YACpC,IAAI,CAAC,aAAa,GAAG,KAAK;QAC9B,CAAC;IACL,CAAC;IAED,eAAe;QACX,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;YAC3C,OAAO,IAAI,wDAAW,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC;QAClE,CAAC;QACD,OAAO,IAAI;IAEf,CAAC;CAEJ;;;;;;;;;;;;;;;;;;;;;;;;ACtGD;;;;;;;GAOG;;;;;;;;;;AAI8F;AAGnC;AACjB;AACU;AACA;AACM;AACV;AACR;AAC3C,kDAAkD;AAG3C,MAAM,kBAAmB,SAAQ,sEAAkB;IAwBtD;QACI,KAAK,EAAE,CAAC;QAdZ,WAAM,GAAW,YAAY,CAAC;QAC9B,WAAM,GAAW,YAAY,CAAC;QAc1B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,0CAA0C;QACjE,IAAI,CAAC,QAAQ,GAAG,IAAI,KAAK,EAAc,CAAC;QACxC,IAAI,CAAC,UAAU,GAAG,IAAI,uDAAiB,EAAE,CAAC;IAC9C,CAAC;IAGK,YAAY,CAAC,MAAc;;;YAE7B,MAAM,IAAI,GAAG,MAAM,gDAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC/C,IAAI,CAAC,IAAI,EAAE,CAAC;gBACR,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC;gBAC7B,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC;YACnC,CAAC;YAED,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;YAC1B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;YAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAK,CAAC;YAC3D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,UAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAK,CAAC;YAE3D,IAAI,CAAC,MAAM,GAAG,UAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAe,CAAC;YAC9D,IAAI,CAAC,MAAM,GAAG,UAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAe,CAAC;YAC9D,IAAI,CAAC,OAAO,GAAG,UAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAe,CAAC;YAE/D,MAAM,OAAO,GAAG,UAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAe,CAAC;YACpE,MAAM,OAAO,GAAG,UAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAe,CAAC;YACpE,IAAI,OAAO,KAAK,OAAO,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;gBACxE,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC;YACtD,CAAC;YACD,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;YAEtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YACzD,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;gBACjB,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC;YACtB,CAAC;YACD,mEAAmE;YACnE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAE3D,OAAO,IAAI,CAAC;QAEhB,CAAC;KAAA;IAED,eAAe;QACX,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACrC,CAAC;IAGD,qBAAqB,CAAC,IAAgB;;QAElC,MAAM,KAAK,GAAG,MAAM,CAAC,UAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,0CAAE,KAAK,CAAC,CAAC;QAC3D,MAAM,MAAM,GAAG,MAAM,CAAC,UAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAK,CAAC,CAAC;QAC7D,MAAM,MAAM,GAAG,MAAM,CAAC,UAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAK,CAAC,CAAC;QAC7D,MAAM,MAAM,GAAG,MAAM,CAAC,UAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAK,CAAC,CAAC;QAC7D,MAAM,MAAM,GAAG,MAAM,CAAC,UAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAK,CAAC,CAAC;QAC7D,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAExC,IAAI,cAAc,GAAe,IAAI,KAAK,CAAW,MAAM,CAAC,CAAC;QAE7D,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;YACjC,cAAc,CAAC,EAAE,CAAC,GAAG,IAAI,KAAK,CAAS,MAAM,CAAC,CAAC;YAC/C,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;gBACjC,MAAM,MAAM,GAAG,gDAAU,CAAC,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,GAAG,UAAU,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,MAAM,CAAC,CAAC;gBACpH,IAAI,MAAM,EAAE,CAAC;oBACT,IAAI,WAAW,GAAG,KAAK,GAAG,MAAM,GAAG,MAAM,CAAC;oBAC1C,cAAc,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;gBACzC,CAAC;YAEL,CAAC;QACL,CAAC;QACD,OAAO,cAAc,CAAC;IAC1B,CAAC;IAED,4HAA4H;IAC5H,6CAA6C;IAE7C,8DAA8D;IAC9D,+DAA+D;IAC/D,yDAAyD;IACzD,oEAAoE;IACpE,oEAAoE;IAEpE,6DAA6D;IAE7D,8DAA8D;IAE9D,4DAA4D;IAE5D,oEAAoE;IACpE,oEAAoE;IAEpE,qGAAqG;IACrG,qGAAqG;IACrG,kHAAkH;IAClH,kHAAkH;IAClH,kGAAkG;IAClG,oGAAoG;IAEpG,qDAAqD;IACrD,qDAAqD;IACrD,+EAA+E;IAC/E,+EAA+E;IAG/E,2EAA2E;IAC3E,mHAAmH;IACnH,wDAAwD;IAExD,8BAA8B;IAG9B,IAAI;IAEJ,kIAAkI;IAClI,6DAA6D;IAC7D,sDAAsD;IACtD,MAAM;IACN,8BAA8B;IAC9B,4BAA4B;IAC5B,2DAA2D;IAC3D,4BAA4B;IAC5B,qBAAqB;IACrB,gDAAgD;IAChD,QAAQ;IACR,IAAI;IAGJ,aAAa,CAAC,YAAoB,EAC9B,MAAc,EACd,UAAkB,EAClB,KAAa,EAAE,KAAa,EAAE,MAAc,EAC5C,GAAW,EAAE,IAAY,EACzB,QAAgB,EAAE,QAAgB;QAElC,MAAM,UAAU,GAAG,IAAI,uDAAiB,EAAE,CAAC;QAE3C,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;QACzD,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC;QAChE,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC;QAChE,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACtD,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;QAC5D,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;QAC1D,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;QAC5D,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;QAE1D,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;QACjE,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;QAEjE,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,qCAAqC;QACxG,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,YAAY,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,qCAAqC;QACxG,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,UAAU,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,yCAAyC;QAC9G,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,UAAU,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,yCAAyC;QAE9G,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,6BAA6B;QACvF,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,8BAA8B;QAEzF,MAAM,GAAG,GAAG,KAAK,GAAG,MAAM,GAAG,QAAQ,CAAC;QACtC,MAAM,GAAG,GAAG,KAAK,GAAG,MAAM,GAAG,QAAQ,CAAC;QACtC,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,SAAS,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,iBAAiB;QAC5E,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,SAAS,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,iBAAiB;QAG5E,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,QAAQ,EAAE,kBAAkB,EAAE,EAAE,CAAC,CAAC,CAAC;QACxE,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,SAAS,EAAE,EAAE,EAAE,yDAAyD,CAAC,CAAC,CAAC;QAChH,UAAU,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAErD,OAAO,UAAU,CAAC;IAEtB,CAAC;IAGD,kIAAkI;IAClI,8EAA8E;IAE9E,iDAAiD;IAEjD,6EAA6E;IAC7E,6EAA6E;IAC7E,kEAAkE;IAElE,wEAAwE;IACxE,wEAAwE;IAExE,wEAAwE;IACxE,wEAAwE;IAExE,sEAAsE;IACtE,mBAAmB;IACnB,0EAA0E;IAC1E,QAAQ;IAER,sEAAsE;IACtE,qBAAqB;IACrB,wBAAwB;IACxB,QAAQ;IACR,wEAAwE;IAExE,oEAAoE;IACpE,oBAAoB;IACpB,uBAAuB;IACvB,QAAQ;IACR,sEAAsE;IAEtE,6EAA6E;IAC7E,6EAA6E;IAE7E,mHAAmH;IACnH,mHAAmH;IACnH,2HAA2H;IAC3H,2HAA2H;IAC3H,2GAA2G;IAC3G,6GAA6G;IAE7G,uDAAuD;IACvD,uDAAuD;IACvD,wFAAwF;IACxF,wFAAwF;IAGxF,oFAAoF;IACpF,4HAA4H;IAC5H,iEAAiE;IAEjE,8BAA8B;IAE9B,IAAI;IACJ,kIAAkI;IAClI,aAAa;QACT,OAAO,IAAI,CAAC,UAAU,CAAC;IAC3B,CAAC;IACD,kIAAkI;IAClI,yBAAyB;QACrB,IAAI,MAAM,GAAG,IAAI,uDAAiB,EAAE,CAAC;QACrC,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,CAAC;YAC5C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG;YACpB,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gBAC3E,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK;gBACxB,MAAM,CAAC,MAAM,CAAC,IAAI,oDAAc,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;YACtD,CAAC;QACL,CAAC;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IAMD,qDAAqD;IACrD,wCAAwC;IACxC,mCAAmC;IACnC,yBAAyB;IACzB,IAAI;IAEJ,iBAAiB,CAAC,MAAc,EAAE,MAAc;QAC5C,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED,iBAAiB,CAAC,MAAa,EAAE,MAAc,EAAE,MAAc,EAAE,UAAkB;QAG/E,MAAM,MAAM,GAAG,UAAU;QACzB,MAAM,MAAM,GAAG,MAAM,CAAC;QAEtB,IAAI,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,KAAK,GAAG,MAAM,CAAC;QAC7C,IAAI,KAAK,GAAG,CAAC,EAAE,CAAC;YACZ,KAAK,IAAI,GAAG,CAAC;QACjB,CAAC;QACD,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC;QAEjD,MAAM,cAAc,GAAG,IAAI,qEAAe,EAAE;QAE5C,0EAA0E;QAE1E,4BAA4B;QAC5B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC9B,cAAc,CAAC,aAAa,CAAC,IAAI,2DAAU,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC;gBACpG,iEAAiE;YACrE,CAAC;QACL,CAAC;QAED,MAAM,YAAY,GAAG,cAAc,CAAC,iBAAiB,EAAE,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC;QACtE,iDAAiD;QACjD,yBAAyB;QACzB,+CAA+C;QAC/C,IAAI;QACJ,qCAAqC;QACrC,sCAAsC;QAEtC,mBAAmB;QACnB,OAAO,cAAc;IAEzB,CAAC;IAID,yDAAyD;IACzD,SAAS,CAAC,CAAS,EAAE,CAAS;QAE1B,IAAI,EAAU,CAAC;QACf,IAAI,GAAW,CAAC;QAChB,uCAAuC;QACvC,0CAA0C;QAC1C,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC;QAClC,GAAG,GAAG,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QACpC,IAAI,CAAC,GAAG,IAAI,kDAAK,CAAC,4DAAU,CAAC,KAAK,EAAE,4DAAU,CAAC,OAAO,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;QACjE,OAAO,CAAC,CAAC;QACT,oBAAoB;IAExB,CAAC;IAED,cAAc,CAAC,SAA0B,EAAE,MAAyB;;QAEhE,MAAM,MAAM,GAAG,YAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAe,CAAC;QAC1D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;YAC3B,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;QAC7D,CAAC;QACD,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAE1C,MAAM,KAAK,GAAG,YAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAe,CAAC;QACzD,MAAM,MAAM,GAAG,MAAC,YAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,0CAAE,KAAgB,mCAAI,KAAK,CAAC,CAAC,qBAAqB;QAC3F,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAC1F,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,MAAM,IAAI,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;QAE5F,MAAM,MAAM,GAAG,SAAS,CAAC,iBAAiB,EAAE,CAAC;QAC7C,IAAI,MAAM,CAAC,MAAM,KAAK,KAAK,GAAG,MAAM,EAAE,CAAC;YACnC,MAAM,IAAI,KAAK,CAAC,6BAA6B,MAAM,CAAC,MAAM,cAAc,KAAK,GAAG,MAAM,EAAE,CAAC,CAAC;QAC9F,CAAC;QAED,2DAA2D;QAC3D,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAwB,CAAC;QACjD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC9B,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,KAAK,CAAa,KAAK,CAAC,CAAC,CAAC;QAClD,CAAC;QAED,qEAAqE;QACrE,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,CAAC;YAC3C,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,CAAC;YACpC,MAAM,GAAG,GAAG,GAAG,GAAG,KAAK,CAAC;YAExB,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC;YAElC,IAAI,EAAE,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,CAAC;YACrC,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC;gBACb,sEAAsE;gBACtE,qFAAqF;gBACrF,MAAM,IAAI,KAAK,CAAC,UAAU,GAAG,IAAI,GAAG,mCAAmC,MAAM,EAAE,CAAC,CAAC;YACrF,CAAC;YACD,IAAI,EAAE,CAAC,UAAU,KAAK,YAAY,EAAE,CAAC;gBACjC,MAAM,IAAI,KAAK,CACX,UAAU,GAAG,IAAI,GAAG,gBAAgB,EAAE,CAAC,UAAU,gBAAgB,YAAY,YAAY,MAAM,GAAG,CACrG,CAAC;YACN,CAAC;YAED,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;YACjB,kEAAkE;QACtE,CAAC;QAED,OAAO,IAAI,gDAAI,CAAC,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC,CAAC;IACxC,CAAC;IAMD,gBAAgB,CAAC,YAAoB,EACjC,MAAc,EACd,UAAkB,EAClB,KAAa,EAAE,KAAa,EAAE,MAAc,EAC5C,GAAW,EAAE,IAAY,EACzB,QAAgB,EAAE,QAAgB,EAClC,eAAgC;QAEhC,MAAM,MAAM,GAAsB,IAAI,CAAC,aAAa,CAChD,YAAY,EACZ,MAAM,EACN,UAAU,EACV,KAAK,EAAE,KAAK,EAAE,MAAM,EACpB,GAAG,EAAE,IAAI,EACT,QAAQ,EAAE,QAAQ,CAAC;QACvB,MAAM,IAAI,GAAS,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,MAAM,CAAC;QAC/D,OAAO,IAAI,CAAC;IAChB,CAAC;IAGD,SAAS,CAAC,SAA0B;;QAEhC,MAAM,WAAW,GAAG,IAAI,CAAC,eAAe,EAAE;QAE1C,gIAAgI;QAChI,wDAAwD;QACxD,MAAM,KAAK,GAAG,MAAM,CAAC,UAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,0CAAE,KAAK,CAAC;QAC9D,MAAM,UAAU,GAAG,gDAAU,CAAC,mBAAmB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QAEtE,KAAK,IAAI,KAAK,IAAI,SAAS,CAAC,iBAAiB,EAAE,EAAE,CAAC;YAE9C,8GAA8G;YAC9G,MAAM,EAAE,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;YAC5B,MAAM,GAAG,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;YAE9B,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YACtD,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;YAExD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBACzD,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC;YAC3C,CAAC;iBAAM,CAAC;gBACJ,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,WAAW,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC;gBACpF,KAAK,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC;YAC7C,CAAC;YACD,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC9C,CAAC;QACD,OAAO,SAAS,CAAC;IAErB,CAAC;CAEJ;;;;;;;;;;;AC/cD;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;ACAA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AAC6C;AACI;AACF;AACkB;AAC1D;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uBAAuB,wDAAW;AAClC,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wDAAW,0BAA0B,0EAAiB;AAC7E;AACA;AACA;AACA,uBAAuB,wDAAW,0BAA0B,0EAAiB;AAC7E;AACA;AACA;AACA,uBAAuB,wDAAW,0BAA0B,0EAAiB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA,eAAe,sDAAU;AACzB;AACA;AACA,eAAe,sDAAU;AACzB;AACA;AACA;AACA;AACA,gCAAgC,iMAA2B;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,+RAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;;;;;;;;;;;;;;;;AChHA,YAAY,aAAa;AACA;AAClB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,WAAW;AACrE,iDAAiD,aAAa;AAC9D,4BAA4B,IAAI,EAAE,MAAM,EAAE,QAAQ;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,0BAA0B;AACtE,gDAAgD,uBAAuB;AACvE;AACA,gDAAgD,IAAI;AACpD;AACA;AACA,4DAA4D,mBAAmB,WAAW,IAAI;AAC9F;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAgB;AAC5B,8DAA8D,SAAS;AACvE;AACA;AACA,sDAAsD,MAAM;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACvEA,YAAY,aAAa;AACkC;AACM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,2BAA2B,0EAAiB;AAC5C,0CAA0C,KAAK;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,oEAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;AACkC;AACM;AAClB;AACF;AACtC;AACP;AACA,uBAAuB,wDAAW,0BAA0B,0EAAiB;AAC7E;AACA;AACA;AACA,uBAAuB,wDAAW,0BAA0B,0EAAiB;AAC7E;AACA;AACA;AACA,uBAAuB,wDAAW,0BAA0B,0EAAiB;AAC7E;AACA;AACA;AACA,wBAAwB,wDAAW,0BAA0B,0EAAiB;AAC9E,wBAAwB,wDAAW,0BAA0B,0EAAiB;AAC9E;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,oCAAoC,oEAAc;AAClD,oCAAoC,oEAAc;AAClD;AACA;AACA;AACA;AACA,4BAA4B,oEAAc;AAC1C;AACA;AACA;AACA;AACA;AACA,uBAAuB,wDAAW,0BAA0B,0EAAiB;AAC7E;AACA;AACA;AACA,sBAAsB,wDAAW,0BAA0B,0EAAiB;AAC5E;AACA;AACA;AACA,oBAAoB,wDAAW,0BAA0B,0EAAiB;AAC1E;AACA;AACA;AACA,qBAAqB,wDAAW,0BAA0B,0EAAiB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,qBAAqB,sDAAU;AAC/B;AACA;AACA;AACA,qBAAqB,sDAAU;AAC/B;AACA;AACA;AACA;AACA,qBAAqB,sDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sDAAU;AAC/B;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,oCAAoC,qBAAqB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,YAAY;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,GAAG;AACtC;AACA,4BAA4B,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1I2D;AAC3D,YAAY,aAAa;AACwC;AACpB;AACA;AACE;AACE;AACJ;AAC7C;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC3BqD;AAC9C;AACP;AACA;AACA,4BAA4B,8DAAc;AAC1C,4BAA4B,8DAAc;AAC1C,4BAA4B,8DAAc;AAC1C,4BAA4B,8DAAc;AAC1C,4BAA4B,8DAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACzEiC;AAC1B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,0CAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACnEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACmC;AAC5B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxDa;AACoC;AACN;AACV;AACE;AACM;AACJ;AACI;AACR;AACF;AACE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA,2BAA2B,4CAAK;AAChC,2BAA2B,4CAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0CAAI;AAC5B,wBAAwB,0CAAI;AAC5B,wBAAwB,0CAAI;AAC5B,wBAAwB,0CAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC,4BAA4B,0CAAI;AAChC,mCAAmC,0CAAI;AACvC,uCAAuC,0CAAI;AAC3C,uCAAuC,0CAAI;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wCAAG;AACzB;AACA;AACA;AACA,wBAAwB,0CAAI;AAC5B,wBAAwB,0CAAI;AAC5B,wBAAwB,0CAAI;AAC5B,wBAAwB,0CAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,sBAAsB,wCAAG;AACzB;AACA;AACA;AACA,wBAAwB,0CAAI;AAC5B,wBAAwB,0CAAI;AAC5B,wBAAwB,0CAAI;AAC5B,wBAAwB,0CAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wCAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA,mCAAmC;AACnC;AACA;AACA,gDAAgD;AAChD,gDAAgD;AAChD,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,mDAAmD;AACnD;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA,8CAA8C,oDAAS,oCAAoC,oDAAS;AACpG;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAAK;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB,wBAAwB,YAAY;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC,oBAAoB,0CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAQ,SAAS;AAC/C;AACA;AACA;AACA;AACA;AACA,kCAAkC,kDAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,kDAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oDAAS;AAChC;AACA;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA,sBAAsB,4CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB,wBAAwB,YAAY;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kDAAQ;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,oBAAoB,WAAW,OAAO;AACtC;AACA,6CAA6C;AAC7C,wBAAwB,QAAQ;AAChC;AACA,kEAAkE,4CAAK;AACvE,8CAA8C,4CAAK;AACnD,6DAA6D,4CAAK;AAClE;AACA;AACA,sBAAsB,8CAAM;AAC5B,wBAAwB,QAAQ,OAAO;AACvC;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA,iCAAiC,WAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS,eAAe,eAAe;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4CAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,kDAAkD;AAClD;AACA;AACA,mBAAmB;AACnB,gCAAgC,OAAO;AACvC,sDAAsD;AACtD;AACA;AACA;AACA,mCAAmC;AACnC,6BAA6B;AAC7B,+DAA+D;AAC/D,iCAAiC;AACjC;AACA,mBAAmB;AACnB,gCAAgC;AAChC,oCAAoC,OAAO,OAAO;AAClD,0DAA0D;AAC1D;AACA;AACA,uBAAuB;AACvB,mEAAmE;AACnE,qCAAqC;AACrC;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,kCAAkC;AAClC,yCAAyC;AACzC,gCAAgC;AAChC,oCAAoC,OAAO,OAAO;AAClD,0DAA0D;AAC1D;AACA;AACA,uBAAuB;AACvB,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0CAAI;AAC5B;AACA,qBAAqB,0CAAI;AACzB;AACA;AACA,wBAAwB,0CAAI;AAC5B;AACA,qBAAqB,0CAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4CAAK;AAC3B,sBAAsB,4CAAK;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,YAAY;AAClD;AACA;AACA;AACA;AACA,SAAS,iBAAiB,wBAAwB,YAAY;AAC9D;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAQ;AACjC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,mBAAmB,0CAAI;AACvB;AACA;AACA,qBAAqB,4CAAK;AAC1B,qBAAqB,4CAAK;AAC1B,wBAAwB,WAAW,OAAO;AAC1C,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,sBAAsB,8CAAM;AAC5B,wBAAwB,QAAQ,OAAO;AACvC;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC7vBiC;AACA;AAC1B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,0CAAI;AAC7B;AACA;AACA;AACA;AACA,mBAAmB,0CAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC/LmC;AAC5B;AACP;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA,yBAAyB,4CAAK;AAC9B;AACA,4BAA4B,4CAAK;AACjC;AACA;AACA,2BAA2B,4CAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC/BO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACmC;AACM;AAClC;AACP;AACA,4BAA4B,kDAAQ;AACpC;AACA,sBAAsB,4CAAK;AAC3B,2BAA2B,4CAAK;AAChC,2BAA2B,4CAAK;AAChC,qBAAqB,4CAAK;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,SAAS;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA,eAAe,4CAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,4CAAK;AACvB,sBAAsB,4CAAK;AAC3B,sBAAsB,4CAAK;AAC3B,gBAAgB,4CAAK;AACrB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpHA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACVO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACR2C;AACN;AACY;AAChB;AACM;AACE;AACA;AACR;AACF;AACE;AACE;AACnC;;;;;;;;;;;;;;;ACXO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;UC5CA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA;WACA,uBAAuB,4BAA4B;WACnD;WACA;WACA;WACA,iBAAiB,oBAAoB;WACrC;WACA,mGAAmG,YAAY;WAC/G;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,mEAAmE,iCAAiC;WACpG;WACA;WACA;WACA;;;;;WCzCA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WClBA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA,iCAAiC;;WAEjC;WACA;WACA;WACA,KAAK;WACL,eAAe;WACf;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;WACA;WACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFsC;AAIU;AAOA;AACA;AACV;AAWA;AACgC;AAChB;AACC;AACwB;AAEtB","sources":["webpack://wcslight/webpack/universalModuleDefinition","webpack://wcslight/./src/Config.ts","webpack://wcslight/./src/WCSLight.ts","webpack://wcslight/./src/model/CoordsType.ts","webpack://wcslight/./src/model/FITS.ts","webpack://wcslight/./src/model/ImagePixel.ts","webpack://wcslight/./src/model/NumberType.ts","webpack://wcslight/./src/model/Point.ts","webpack://wcslight/./src/model/Utils.ts","webpack://wcslight/./src/projections/AbstractProjection.ts","webpack://wcslight/./src/projections/HiPSHelper.ts","webpack://wcslight/./src/projections/MinMaxValue.ts","webpack://wcslight/./src/projections/RADecMinMaxCentral.ts","webpack://wcslight/./src/projections/hips/FITSList.ts","webpack://wcslight/./src/projections/hips/HiPSFITS.ts","webpack://wcslight/./src/projections/hips/HiPSIntermediateProj.ts","webpack://wcslight/./src/projections/hips/HiPSProj.ts","webpack://wcslight/./src/projections/hips/HiPSPropManager.ts","webpack://wcslight/./src/projections/hips/HiPSProperties.ts","webpack://wcslight/./src/projections/hips/ImagePixel.ts","webpack://wcslight/./src/projections/hips/TilesRaDecList2.ts","webpack://wcslight/./src/projections/mercator/MercatorProjection.ts","webpack://wcslight/ignored|/Users/fabriziogiordano/Desktop/PhD/code/new/FITSParser/lib-esm|fs","webpack://wcslight/ignored|/Users/fabriziogiordano/Desktop/PhD/code/new/wcslight/src/projections/hips|node:fs/promises","webpack://wcslight/../FITSParser/lib-esm/FITSParser.js","webpack://wcslight/../FITSParser/lib-esm/FITSWriter.js","webpack://wcslight/../FITSParser/lib-esm/ParseHeader.js","webpack://wcslight/../FITSParser/lib-esm/ParsePayload.js","webpack://wcslight/../FITSParser/lib-esm/ParseUtils.js","webpack://wcslight/../FITSParser/lib-esm/index.js","webpack://wcslight/../FITSParser/lib-esm/model/FITSHeaderItem.js","webpack://wcslight/../FITSParser/lib-esm/model/FITSHeaderManager.js","webpack://wcslight/./node_modules/healpixjs/lib-esm/CircleFinder.js","webpack://wcslight/./node_modules/healpixjs/lib-esm/Constants.js","webpack://wcslight/./node_modules/healpixjs/lib-esm/Fxyf.js","webpack://wcslight/./node_modules/healpixjs/lib-esm/Healpix.js","webpack://wcslight/./node_modules/healpixjs/lib-esm/Hploc.js","webpack://wcslight/./node_modules/healpixjs/lib-esm/Pointing.js","webpack://wcslight/./node_modules/healpixjs/lib-esm/RangeSet.js","webpack://wcslight/./node_modules/healpixjs/lib-esm/Vec3.js","webpack://wcslight/./node_modules/healpixjs/lib-esm/Xyf.js","webpack://wcslight/./node_modules/healpixjs/lib-esm/Zphi.js","webpack://wcslight/./node_modules/healpixjs/lib-esm/index.js","webpack://wcslight/./node_modules/healpixjs/lib-esm/pstack.js","webpack://wcslight/webpack/bootstrap","webpack://wcslight/webpack/runtime/compat get default export","webpack://wcslight/webpack/runtime/define property getters","webpack://wcslight/webpack/runtime/ensure chunk","webpack://wcslight/webpack/runtime/get javascript chunk filename","webpack://wcslight/webpack/runtime/global","webpack://wcslight/webpack/runtime/hasOwnProperty shorthand","webpack://wcslight/webpack/runtime/load script","webpack://wcslight/webpack/runtime/make namespace object","webpack://wcslight/webpack/runtime/publicPath","webpack://wcslight/webpack/runtime/jsonp chunk loading","webpack://wcslight/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"wcslight\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"wcslight\"] = factory();\n\telse\n\t\troot[\"wcslight\"] = factory();\n})(self, () => {\nreturn ","export class Config {\n    static MAX_DECIMALS:number = 6\n}","/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n * \n * @link   github https://github.com/fab77/wcslight\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n\nimport { FITSParsed, FITSParser } from 'jsfitsio';\nimport { MercatorProjection } from './projections/mercator/MercatorProjection.js';\nimport { HiPSProj } from './projections/hips/HiPSProj.js';\nimport { Point } from './model/Point.js';\nimport { AbstractProjection } from './projections/AbstractProjection.js';\n// import { CutoutResult } from './model/CutoutResult.js';\n\n// import { HEALPixProjection } from './projections/HEALPixProjection.js';\nimport { FITS } from './model/FITS.js';\nimport { FITSList } from './projections/hips/FITSList.js';\nimport { HiPSFITS } from './projections/hips/HiPSFITS.js';\nimport { HiPSPropManager } from './projections/hips/HiPSPropManager.js';\nimport { HiPSProperties } from './projections/hips/HiPSProperties.js';\nimport { HiPSHelper } from './projections/HiPSHelper.js';\nimport { TilesRaDecList2 } from './projections/hips/TilesRaDecList2.js';\nimport { CoordsType } from './model/CoordsType.js';\nimport { NumberType } from './model/NumberType.js';\n\nexport class WCSLight {\n\n    /**\n     * This function receives a FITS and generate a cutout on HiPS FITS.\n     * @param center of the cutout in degrees\n     * @param radius of the cutout in degrees\n     * @param pxsize of the cutout in degrees\n     * @param filePath of the input FITS file\n     * @returns fitsList of FITS in HiPS format\n     */\n    static async fitsCutoutToHiPS(center: Point, radius: number,\n        pxsize: number, filePath: string): Promise<FITSList | null> {\n\n        const HiPS_TILE_WIDTH = 512\n\n        // 0. here is missing the validation/check that the input file used to get the value, contains the center ...\n        \n        // 1. open input fits file and understand the projection and set up in inprojection details like NAXIS1-2, CDELT1-2, CRVAL1-2, minRa and minDec\n        const inProjection = await WCSLight.extractProjectionType(filePath)\n        if (!inProjection) return null\n        // const bitpix = inProjection.getBitpix()\n        \n        // 2. from HiPS output projection, compute the list of RA,Dec and related tileno based on center, radius, pxsize, and tilewidth forced to 512\n        const outTilesRaDecList: TilesRaDecList2|null = HiPSProj.getImageRADecList(center, radius, pxsize, HiPS_TILE_WIDTH)\n        if (!outTilesRaDecList) {\n            return null\n        }\n\n        // 3. by using the list of RA and Dec on point 2., convert RA,Dec into i,j used in the input projection to get pixel values (try to merge the 2 calls below in one single method)\n        inProjection.world2pix(outTilesRaDecList)\n        // const invalues = await inProjection.getPixValues(tilesRaDecList)\n        \n        // 4. collect the details required to construct the output HiPS projection header \n        // const fitsHeaderParams = inProjection.getCommonFitsHeaderParams();\n\n        // here pass inProjection.getFITSHeader()\n        // 5. generate output HiPS FITS file(s)\n        const fitsFileList = HiPSProj.getFITSFiles(outTilesRaDecList, inProjection.getFITSHeader(), pxsize, HiPS_TILE_WIDTH);\n        for( let hipsFitsEntry of fitsFileList.getFITSList()) {\n            const tileno = hipsFitsEntry[0]\n            const hipsFits = hipsFitsEntry[1]\n            const data = hipsFits.getPayload()\n            const header = hipsFits.getHeader() \n            const FITS_FILE_PATH = `./hips_${tileno}.fits`\n\n            const fitsParsed = {header: header, data: data}\n            FITSParser.saveFITSLocally(fitsParsed, FITS_FILE_PATH)\n        }\n        return fitsFileList\n        \n    }\n\n    // only MERCATOR supported at the moment\n    static async extractProjectionType(filePath: string): Promise<AbstractProjection | null> {\n        let fits: FITSParsed | null = await FITSParser.loadFITS(filePath)\n        if (!fits) return null\n        \n        const ctype = String(fits.header.findById(\"CTYPE1\")?.value)\n        \n        if (ctype.includes(\"MER\")){\n            let projection = new MercatorProjection()\n            await projection.initFromFile(filePath)\n            return projection\n        }\n        return null\n\n    }\n\n    // TODO: instead of using AbstractProjection, use a constant file with supported projection names\n    static async hipsCutoutToFITS(center: Point, radius: number,\n        pixelAngSize: number, baseHiPSURL: string, outproj: AbstractProjection, hipsOrder: number | null = null ): Promise<FITS | null> {\n        \n        const hipsProp = await HiPSPropManager.parsePropertyFile(baseHiPSURL)\n        const hipsMaxOrder: number = hipsProp.getItem(HiPSProperties.ORDER)\n        const hipsFrame = hipsProp.getItem(HiPSProperties.FRAME)\n        const TILE_WIDTH = hipsProp.getItem(HiPSProperties.TILE_WIDTH)\n\n\n        let isGalactic: boolean = false\n        if (hipsFrame.toLowerCase() == 'galactic') {\n            isGalactic = true\n        }\n\n        if (!hipsOrder) {\n            const healpix = HiPSHelper.getHelpixBypxAngSize(pixelAngSize, TILE_WIDTH)\n            hipsOrder = Number(healpix.order)    \n        }\n        if (hipsOrder > hipsMaxOrder) {\n            throw new Error(\"requested HiPS order exceeds the maximum HiPS order \")\n        }\n\n        /*\n        below how naxis are computed\n        outproj.getImageRADecList -> computeSquaredNaxes -> set naxis1 and naxis2\n        */\n        const naxisWidth: number = outproj.computeNaxisWidth(radius, pixelAngSize)\n        const outRADecList: TilesRaDecList2 = outproj.getImageRADecList(center, radius, pixelAngSize, naxisWidth)\n        if (!outRADecList) return null\n\n\n        const raDecMinMaxCentral = outRADecList.computeRADecMinMaxCentral()\n        const cRA = raDecMinMaxCentral?.getCentralRA()\n        const cDec = raDecMinMaxCentral?.getCentralDec()\n        if (cRA === undefined || cDec === undefined) return null\n        \n        // TODO check if possible to compute in the word2pix, when iterating onver ImagePixels, the min and max value.\n        const raDecWithValues = await HiPSProj.world2pix(outRADecList, hipsOrder, isGalactic, TILE_WIDTH, baseHiPSURL)\n        if (!raDecWithValues) return null\n        const minValue = raDecWithValues.getMinMaxValues()?.getMinValue()\n        const maxValue = raDecWithValues.getMinMaxValues()?.getMaxValue()\n        if (minValue === undefined || maxValue === undefined) return null\n        \n        /** info required:\n         * SIMPLE  = T                                                                     \n            BITPIX  = -64                                                                   \n            NAXIS   = 2                                                                     \n            NAXIS1  = 512                                                                   \n            NAXIS2  = 512                                                                   \n            BSCALE  = 1                                                                     \n            BZERO   = 0                                                                     \n            CTYPE1  = RA---HPX                                                              \n            CTYPE2  = DEC--HPX                                                              \n            DATAMIN = 0                                                                     \n            DATAMAX = 0                                                                     \n            hips_order= 7                                                                   \n            NPIX    = 113056                                                                \n            CRPIX1  = 56528                                                                 \n            CRPIX2  = 56528                                                                 \n            ORIGIN  = WCSLight v.0.x                                                        \n            COMMENT =  / WCSLight v0.x developed by F.Giordano and Y.Ascasibar              \n            CRVAL1  = 170.15625                                                             \n            CRVAL2  = 18.5243910738658                                                      \n            END                                                                             \n         */\n        // TODO BLANK, BZERO, BSCALE must be taken from the FITS tiles and not from the HiPS metadata.\n        const BLANK = 0.0\n        const BZERO = 0.0\n        const BSCALE = 1.0\n\n        const BITPIX: number = parseInt(hipsProp.getItem(HiPSProperties.BITPIX))\n        if (BITPIX != 8 && BITPIX != 16 && BITPIX != 32 && BITPIX != -32 && BITPIX != -64) {\n            throw new Error(\"unsupported BITPIX value\")\n        }\n\n        const fits: FITS = outproj.generateFITSFile(\n            pixelAngSize, \n            hipsProp.getItem(HiPSProperties.BITPIX),  \n            naxisWidth, \n            BLANK, BZERO, BSCALE,\n            cRA, cDec,\n            minValue, maxValue, raDecWithValues)\n        \n        console.log(fits)\n        return fits\n    }\n\n    static hipsFITSChangeProjection(): HiPSFITS | null {\n\n        return null\n    }\n\n    // static async cutout(center: Point, radius: number,\n    //     pxsize: number, inproj: AbstractProjection, outproj: AbstractProjection): Promise<CutoutResult> {\n\n    //     // HIPS out\n    //     // MER in\n    //     const outRADecList: Array<Array<number>> = outproj.getImageRADecList(center, radius, pxsize);\n    //     if (outRADecList.length == 0) {\n    //         const res: CutoutResult = {\n    //             fitsheader: [],\n    //             fitsdata: null,\n    //             inproj: inproj,\n    //             outproj: outproj,\n    //             fitsused: inproj.fitsUsed\n    //         };\n    //         return res;\n    //     }\n    //     const inputPixelsList = inproj.world2pix(outRADecList);\n    //     try {\n\n    //         const invalues = await inproj.getPixValues(inputPixelsList);\n    //         const fitsHeaderParams = inproj.getCommonFitsHeaderParams();\n    //         if (invalues !== undefined) {\n    //             const fitsdata = outproj.setPxsValue(invalues, fitsHeaderParams);\n    //             const fitsheader = outproj.getFITSHeader();\n    //             const fits = new FITS(fitsheader, fitsdata)\n\n    //             const res: CutoutResult = {\n    //                 fitsheader: fits.header,\n    //                 fitsdata: fits.data,\n    //                 inproj: inproj,\n    //                 outproj: outproj,\n    //                 fitsused: inproj.fitsUsed\n    //             };\n    //             return res;\n    //         } else {\n    //             const nanFits = outproj.generateFITSWithNaN()\n    //             const res: CutoutResult = {\n    //                 fitsheader: nanFits.header,\n    //                 fitsdata: nanFits.data,\n    //                 inproj: inproj,\n    //                 outproj: outproj,\n    //                 fitsused: inproj.fitsUsed\n    //             };\n    //             return res;\n    //         }\n\n    //     } catch (err) {\n    //         console.error(\"[WCSLight] ERROR: \" + err);\n    //         return null;\n    //     }\n\n    // }\n\n    /**\n     * \n     * @param {*} fitsheader \n     * @param {*} fitsdata \n     * @returns {URL}\n     */\n    static generateFITS(fitsheader: any, fitsdata: any): string {\n        const fitsParsed = {\n            header: fitsheader,\n            data: fitsdata\n        }\n        // const blobUrl = FITSParser.generateFITSForWeb(fitsheader, fitsdata);\n        const blobUrl = FITSParser.generateFITSForWeb(fitsParsed);\n        return blobUrl;\n    }\n\n\n\n\n    // static changeProjection(filepath, outprojname) {\n    //     // TODO\n    // }\n\n\n    static getProjection(projectionName: string) {\n        if (projectionName === \"Mercator\") {\n            return new MercatorProjection(); \n        // } else if (projectionName === \"HEALPix\") {\n        //     return new HEALPixProjection();\n        // } else if (projectionName === \"Gnomonic\") {\n        //     return new GnomonicProjection();\n        } else {\n            return null;\n            // throw new ProjectionNotFound(projectionName);\n        }\n    }\n\n    static getAvaillableProjections() {\n        return [\"Mercator\", \"HiPS\", \"HEALPix\"];\n    }\n\n}\n\n\nconst center = new Point(CoordsType.ASTRO, NumberType.DEGREES, 170.015, 18.35);\nWCSLight.fitsCutoutToHiPS(center, 0.06, 0.0005, \"/Users/fgiordano/Desktop/REORG/PhD/code/github/wcslight/test/output/UC3/3_0/Mercator46.fits\").then(res => {\n    console.log(res)\n})","/**\n * @author Fabrizio Giordano (Fab77)\n * Enum for coordinate types.\n * @readonly\n * @enum {{name: string, hex: string}}\n */\n\nexport enum CoordsType {\n  CARTESIAN = \"cartesian\",\n  SPHERICAL = \"spherical\",\n  ASTRO = \"astro\"\n}\n","\nimport { FITSHeaderManager } from 'jsfitsio';\n\nexport class FITS {\n    _header: FITSHeaderManager[]\n    _data: Map<number, Array<Uint8Array>>\n\n    constructor(header: FITSHeaderManager[], data: Map<number, Array<Uint8Array>>) {\n        this._header = header\n        this._data = data\n    }\n\n    get header() {\n        return this._header\n    }\n    \n    get data() {\n        return this._data\n    }\n\n}","/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n * \n * @link   github https://github.com/fab77/wcslight\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n\n\n\nexport class ImagePixel {\n    _i: number;     // int i of input projection\n    _j: number;     // int j of input projection\n    _tileno: number;// int\n    \n    constructor (i: number, j: number, tileno: number = NaN) {\n        this._i = i;\n        this._j = j;\n        this._tileno = tileno;\n    }\n\n    geti() {\n        return this._i;\n    }\n\n    getj() {\n        return this._j;\n    }\n\n    get tileno() {\n        return this._tileno\n    }\n}\n","export enum NumberType {\n    DEGREES,\n    RADIANS,\n    DECIMAL,\n    HMS,\n    DMS\n}","/**\n * @author Fabrizio Giordano (Fab77)\n */\n\nimport {sphericalToCartesian, cartesianToSpherical, sphericalToAstro, astroToSpherical, fillSpherical, fillAstro} from './Utils.js';\nimport { CartesianCoords } from './CartesianCoords.js';\nimport { AstroCoords} from './AstroCoords.js';\nimport { CoordsType } from './CoordsType.js';\nimport { SphericalCoords } from './SphericalCoords.js';\nimport { NumberType } from './NumberType.js';\nimport { Config } from '../Config.js';\n\nexport class Point{\n\n\tprivate astro!: AstroCoords\n\t// equatorial: EquatorialCoords;\n\t// galactic: GalacticCoords;\n\n\tprivate spherical!: SphericalCoords;\n\tprivate cartesian!: CartesianCoords;\n\n\tconstructor(in_type: CoordsType, unit: NumberType, ...coords: Array<number>) {\n\n\t\tif (in_type == CoordsType.CARTESIAN){\n\t\t\tthis.cartesian.x = parseFloat(coords[0].toFixed(Config.MAX_DECIMALS));\n\t\t\tthis.cartesian.y = parseFloat(coords[1].toFixed(Config.MAX_DECIMALS));\n\t\t\tthis.cartesian.z = parseFloat(coords[2].toFixed(Config.MAX_DECIMALS));\n\t\t\tthis.spherical = cartesianToSpherical(this.cartesian);\n\n\t\t\tthis.astro = sphericalToAstro(this.spherical);\n\t\t\t\n\t\t} else if (in_type == CoordsType.ASTRO){\n\t\t\tconst c = fillAstro(coords[0],  coords[1], unit);\n\t\t\tif (c !== null) {\n\t\t\t\tthis.astro = c\n\t\t\t\tthis.spherical = astroToSpherical(this.astro);\n\t\t\t\tthis.cartesian = sphericalToCartesian(this.spherical, 1.0); // TODO radius shall be taken from global (e.g. HiPS radius in case of HiPS)\n\t\t\t}\n\t\t\t\n\t\n\t\t} else if (in_type == CoordsType.SPHERICAL){\n\t\t\tconst s = fillSpherical(coords[0],  coords[1], unit);\n\t\t\tif (s !== null) {\n\t\t\t\tthis.spherical = s\n\t\t\t\tthis.cartesian = sphericalToCartesian(this.spherical, 1.0); // TODO radius shall be taken from global (e.g. HiPS radius in case of HiPS)\n\t\t\t\tthis.astro = sphericalToAstro(this.spherical);\n\t\t\t}\n\t\t} else{\n\t\t\tconsole.error(\"CoordsType \"+in_type+\" not recognised.\");\n\t\t}\n\t\tif (this.spherical.phiDeg > 360) {\n\t\t\tthis.spherical.phiDeg -= 360;\n\t\t}\n\t\tif (this.astro.raDeg > 360) {\n\t\t\tthis.astro.raDeg -= 360;\n\t\t}\n\t}\n\n\n\t// constructor(in_options: ICoordsFormat, in_type: CoordsType){\n\t\t\n\t// \tif (in_type == CoordsType.CARTESIAN){\n\n\t// \t\tthis.cartesian.x = parseFloat((in_options as CartesianCoords).x.toFixed(global.MAX_DECIMALS));\n\t// \t\tthis.cartesian.y = parseFloat((in_options as CartesianCoords).y.toFixed(global.MAX_DECIMALS));\n\t// \t\tthis.cartesian.z = parseFloat((in_options as CartesianCoords).z.toFixed(global.MAX_DECIMALS));\n\n\t// \t\tthis.spherical = cartesianToSpherical(this.cartesian);\n\t// \t\tthis.astro = sphericalToAstro(this.spherical);\n\t\t\t\n\t// \t}else if (in_type == CoordsType.ASTRO){\n\t\t\t\n\t// \t\tif ((in_options as AstroCoords).raDeg && (in_options as AstroCoords).decDeg) {\n\t// \t\t\tthis.astro = radegDecdegToAstro((in_options as AstroCoords).raDeg,  (in_options as AstroCoords).decDeg );\n\t// \t\t} else if ((in_options as AstroCoords).raRad && (in_options as AstroCoords).decRad) {\n\t// \t\t\tthis.astro = raradDecradToAstro((in_options as AstroCoords).raRad,  (in_options as AstroCoords).decRad );\n\t// \t\t} else {\n\t// \t\t\tconsole.error(\"AstroCoords incomplete \"+ in_options );\n\t// \t\t\treturn null;\n\t// \t\t}\n\t// \t\tthis.spherical = astroToSpherical(this.astro);\n\t// \t\tthis.cartesian = sphericalToCartesian(this.spherical, 1.0); // TODO radius shall be taken from global (e.g. HiPS radius in case of HiPS)\n\t\t\t\n\t// \t}else if (in_type == CoordsType.SPHERICAL){\n\n\t// \t\tif ((in_options as SphericalCoords).phiDeg && (in_options as SphericalCoords).thetaDeg) {\n\t// \t\t\tthis.spherical = phidegThetadegToSpherical((in_options as SphericalCoords).phiDeg,  (in_options as SphericalCoords).thetaDeg );\n\t// \t\t} else if ((in_options as SphericalCoords).phiRad && (in_options as SphericalCoords).thetaRad) {\n\t// \t\t\tthis.spherical = phiradThetaradToSpherical((in_options as SphericalCoords).phiRad,  (in_options as SphericalCoords).thetaRad );\n\t// \t\t} else {\n\t// \t\t\tconsole.error(\"SphericalCoords incomplete \"+ in_options );\n\t// \t\t\treturn null;\n\t// \t\t}\n\n\t// \t\tthis.cartesian = sphericalToCartesian(this.spherical, 1.0); // TODO radius shall be taken from global (e.g. HiPS radius in case of HiPS)\n\t// \t\tthis.astro = sphericalToAstro(this.spherical);\n\t\t\t\n\t// \t}else{\n\t// \t\tconsole.error(\"CoordsType \"+in_type+\" not recognised.\");\n\t// \t}\n\t// }\n\n\tgetSpherical() {\n\t\treturn this.spherical;\n\t}\n\n\tgetAstro() {\n\t\treturn this.astro;\n\t}\n\n\tgetCartesian() {\n\t\treturn this.cartesian;\n\t}\n\t// // taken from Healpixjs->Vec3. //TODO Point and Vec3 should be unified \n\t// /** Scale the vector by a given factor\n    // @param n the scale factor */\n\t// scale(n: number): Point{\n\t// \treturn new Point(CoordsType.CARTESIAN, NumberType.DECIMAL, this.x*n, this.y*n, this.z*n);\n\t// };\n\t// // taken from Healpixjs->Vec3. //TODO Point and Vec3 should be unified \n\t// dot(v: Point): number{ \n\t// \treturn this.x*v.x + this.y*v.y + this.z*v.z; \n\t// };\n\t// // taken from Healpixjs->Vec3. //TODO Point and Vec3 should be unified\n\t// cross(v: Point): Point{ \n\t// \treturn new Point(CoordsType.CARTESIAN, NumberType.DECIMAL, this.y*v.z - v.y*this.z, this.z*v.x - v.z*this.x, this.x*v.y - v.x*this.y);\n\t// };\n\t// // taken from Healpixjs->Vec3. //TODO Point and Vec3 should be unified\n\t// norm() : Point{\n\t// \tlet d = 1./this.length();\n\t// \treturn new Point(CoordsType.CARTESIAN, NumberType.DECIMAL, this.x*d, this.y*d, this.z*d);\n\t// };\n\t// // taken from Healpixjs->Vec3. //TODO Point and Vec3 should be unified\n\t// length(): number{ \n\t// \treturn Math.sqrt(this.lengthSquared()); \n\t// };\n\t// // taken from Healpixjs->Vec3. //TODO Point and Vec3 should be unified\n\t// lengthSquared(): number{ \n\t// \treturn this.x*this.x + this.y*this.y + this.z*this.z; \n  \t// };\n\n\t// subtract(v: Point) : Point{\n\t// \treturn new Point(CoordsType.CARTESIAN, NumberType.DECIMAL, this.x - v.x, this.y - v.y, this.z - v.z);\n\t// }\n\n\t// add(v: Point) : Point{\n\t// \treturn new Point(CoordsType.CARTESIAN, NumberType.DECIMAL, this.x + v.x, this.y + v.y, this.z + v.z);\n\t// }\n\t\n\n\t// get x(){\n\t// \treturn this._x;\n\t// }\n\t\n\t// get y(){\n\t// \treturn this._y;\n\t// }\n\t\n\t// get z(){\n\t// \treturn this._z;\n\t// }\n\t\n\t// get xyz(){\n    //     return this._xyz;\n    // }\n\t\n    // get raDeg(){\n    //     return this._raDeg;\n    // }\n    \n    // get decDeg(){\n    //     return this._decDeg;\n    // }\n    \n    // get raDecDeg(){\n    //     return this._raDecDeg;\n    // }\n    \n    // toADQL(){\n    // \treturn this._raDecDeg[0]+\",\"+this._raDecDeg[1];\n    // }\n    \n    // toString(){\n    // \treturn \"(raDeg, decDeg) => (\"+this._raDecDeg[0]+\",\"+this._raDecDeg[1]+\") (x, y,z) => (\"+this._xyz[0]+\",\"+this._xyz[1]+\",\"+this._xyz[2]+\")\";\n    // }\n}\n\n","/**\n * @author Fabrizio Giordano (Fab)\n */\n// import vec3 from 'gl-matrix';\n\nimport { AstroCoords } from \"./AstroCoords.js\";\nimport { CartesianCoords } from \"./CartesianCoords.js\";\nimport { HMSCoords } from \"./HMSCoords.js\";\nimport { NumberType } from \"./NumberType.js\";\nimport { SexagesimalCoords } from \"./SexagesimalCoords.js\";\nimport { SphericalCoords } from \"./SphericalCoords.js\";\n\nfunction Utils(){\n\t\n}\n\nexport function cartesianToSpherical(xyz: CartesianCoords): SphericalCoords{\n\tlet dotXYZ = dot(xyz, xyz);\n\tlet r = Math.sqrt(dotXYZ);\t\n\tlet thetaRad = Math.acos(xyz.z/r);\n\tlet thetaDeg = radToDeg(thetaRad);\n\t// NB: in atan(y/x) is written with params switched atan2(x, y)\n\tlet phiRad = Math.atan2(xyz.y,xyz.x);\n\tlet phiDeg = radToDeg(phiRad);\n\n\tif (phiDeg < 0){\n\t\tphiDeg += 360;\n\t}\n\treturn {\n\t\tphiDeg: phiDeg, \n\t\tthetaDeg: thetaDeg,\n\t\tphiRad:phiRad,\n\t\tthetaRad: thetaRad\n\t};\n};\n\nexport function sphericalToAstro(phiTheta: SphericalCoords): AstroCoords{\n\tlet raDeg: number;\n\tlet decDeg: number;\n\n\traDeg = phiTheta.phiDeg;\n\tif (raDeg < 0){\n\t\traDeg += 360;\n\t}\n\tdecDeg = 90 - phiTheta.thetaDeg;\n\t\n\treturn {\n\t\t\"raDeg\": raDeg,\n\t\t\"decDeg\": decDeg,\n\t\t\"raRad\": degToRad(raDeg),\n\t\t\"decRad\": degToRad(decDeg)\n\n\t};\n}\n\nexport function astroToSpherical(raDec: AstroCoords): SphericalCoords{\n\t\n\tlet phiDeg: number;\n\tlet thetaDeg: number;\n\n\tphiDeg = raDec.raDeg;\n\tif (phiDeg < 0){\n\t\tphiDeg += 360;\n\t}\n\t\n\tthetaDeg = 90 - raDec.decDeg;\n\t\n\treturn {\n\t\t\"phiDeg\": phiDeg,\n\t\t\"thetaDeg\": thetaDeg,\n\t\t\"phiRad\": degToRad(phiDeg),\n\t\t\"thetaRad\": degToRad(thetaDeg),\n\t};\n}\n\nexport function sphericalToCartesian(phiTheta: SphericalCoords, r: number): CartesianCoords{\n\tr = (r == undefined) ? 1 : r;\n\tvar x = r * Math.sin(phiTheta.thetaRad) * Math.cos(phiTheta.phiRad);\n\tvar y = r * Math.sin(phiTheta.thetaRad) * Math.sin(phiTheta.phiRad);\n\tvar z = r * Math.cos(phiTheta.thetaRad);\n\n\treturn {\n\t\t\"x\": x, \n\t\t\"y\": y, \n\t\t\"z\": z\n\t};\n};\n\nexport function fillAstro(ra: number, dec: number, unit: NumberType): AstroCoords | null{\n\tif (unit == NumberType.DEGREES) {\n\t\treturn {\n\t\t\t\"raDeg\": ra,\n\t\t\t\"decDeg\": dec,\n\t\t\t\"raRad\": degToRad(ra),\n\t\t\t\"decRad\": degToRad(dec)\n\t\t}\n\t} else if (unit == NumberType.RADIANS) {\n\t\treturn {\n\t\t\t\"raRad\": ra,\n\t\t\t\"decRad\": dec,\n\t\t\t\"raDeg\": radToDeg(ra),\n\t\t\t\"decDeg\": radToDeg(dec)\n\t\t}\n\t} else {\n\t\tconsole.error(\"Wrong operation. NumberType \" + unit + \" not supported\");\n\t\treturn null\n\t}\n\t\n}\n\n\nexport function fillSpherical(phi: number, theta: number, unit: NumberType):  SphericalCoords | null{\n\tif (unit == NumberType.DEGREES) {\n\t\treturn {\n\t\t\t\"phiDeg\": phi,\n\t\t\t\"thetaDeg\": theta,\n\t\t\t\"phiRad\": degToRad(phi),\n\t\t\t\"thetaRad\": degToRad(theta)\n\t\t}\n\t} else if (unit == NumberType.RADIANS) {\n\t\treturn {\n\t\t\t\"phiDeg\": radToDeg(phi),\n\t\t\t\"thetaDeg\": radToDeg(theta),\n\t\t\t\"phiRad\": phi,\n\t\t\t\"thetaRad\": theta\n\t\t}\n\t} else {\n\t\tconsole.error(\"Wrong operation. NumberType \" + unit + \" not supported\");\n\t\treturn null\n\t}\n}\n\nfunction dot(a: CartesianCoords, b: CartesianCoords) : number{\n\treturn a.x * b.x + a.y * b.y + a.z * b.z;\n  }\n\nexport function colorHex2RGB(hexColor: string): [number, number, number] {\n\n//\tconsole.log(hexColor);\n\tvar hex1 = hexColor.substring(1,3);\n\tvar hex2 = hexColor.substring(3,5);\n\tvar hex3 = hexColor.substring(5,7);\n\t\n\tvar dec1 = parseInt(hex1, 16);\n\tvar dec2 = parseInt(hex2, 16);\n\tvar dec3 = parseInt(hex3, 16);\n\t\n\tvar rgb1 = (dec1 / 255).toFixed(2);\n\tvar rgb2 = (dec2 / 255).toFixed(2);\n\tvar rgb3 = (dec3 / 255).toFixed(2);\n\t\n\treturn [parseFloat(rgb1), parseFloat(rgb2), parseFloat(rgb3)];\n\n}\n\nexport function degToRad(degrees: number) : number{\n\treturn (degrees / 180 ) * Math.PI ;\n}\n\nexport function radToDeg(radians: number) : number{\n\treturn radians * 180 / Math.PI;\n}\n\nexport function raDegToHMS(raDeg: number): HMSCoords{\n\t\n\tvar h = Math.floor(raDeg/15);\n\tvar m = Math.floor((raDeg/15 - h) * 60);\n\tvar s = (raDeg/15 - h - m/60) * 3600;\n\t\n\treturn {\n\t\th: h, \n\t\tm: m, \n\t\ts: s\n\t};\n}\n\nexport function decDegToDMS(decDeg: number): SexagesimalCoords{\n\tvar sign = 1;\n\tif (decDeg < 0){\n\t\tsign = -1;\n\t}\n\t\n\tvar decDeg_abs = Math.abs(decDeg);\n\tvar d = Math.trunc(decDeg_abs);\n\t\n\tvar m = Math.trunc( (decDeg_abs - d) * 60);\n\t\n\tvar s = (decDeg_abs - d - m/60) * 3600;\n\td = d * sign;\n\t\n\treturn {\n\t\td: d, \n\t\tm: m, \n\t\ts: s\n\t};\n}\n\nfunction dms2DecDeg(decDMS: SexagesimalCoords){\n\tvar sign = Math.sign(decDMS.d);\n\tvar deg = (decDMS.d) + sign * (decDMS.m / 60) + sign * (decDMS.s/3600);\n\treturn deg;\n}\n\nfunction hms2RaDeg(raHMS: HMSCoords){\n\tvar sign = Math.sign(raHMS.h);\n\tvar deg = (raHMS.h + sign * (raHMS.m / 60) + sign * (raHMS.s/3600)) * 15;\n\treturn deg;\n}\n\nfunction worldToModel(xy: [number, number], radius: number): [number, number, number]{\n\tvar x = xy[0];\n\tvar y = xy[1];\n\tvar z = Math.sqrt(radius*radius - xy[0]*xy[0] - xy[1]*xy[1]);\n\treturn [x, y, z];\n}\n\n","import { FITSHeaderManager } from \"jsfitsio\";\n// import { FITSHeaderManager, FITSHeaderItem } from \"jsfitsio\";\n// import { FITSParsed } from \"jsfitsio\";\n// import { AstroCoords } from \"src/model/AstroCoords\";\n// import { ImagePixel } from \"../model/ImagePixel.js\";\nimport { Point } from \"../model/Point.js\";\n// import { FITS } from \"../model/FITS.js\";\nimport { TilesRaDecList2 } from \"./hips/TilesRaDecList2.js\";\nimport { FITS } from \"../model/FITS.js\";\n\n/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n *\n * @link   github https://github.com/fab77/wcslight\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n\nexport abstract class AbstractProjection {\n\n  public abstract getFITSHeader(): FITSHeaderManager;\n\n  public abstract getCommonFitsHeaderParams(): FITSHeaderManager;\n\n  public abstract setPixelValues(\n    values: TilesRaDecList2,\n    header: FITSHeaderManager,\n  ): FITS;\n\n  public abstract getImageRADecList(\n    center: Point, radius: number,\n    pxsize: number, naxisWidth: number\n  ): TilesRaDecList2;\n\n  public abstract pix2world(i: number, j: number): Point;\n\n  public abstract world2pix(radeclist: TilesRaDecList2): TilesRaDecList2;\n\n  public abstract computeNaxisWidth(radius: number, pxsize: number): number;\n\n  public abstract generateFITSFile(pixelAngSize: number,\n    BITPIX: number,\n    TILE_WIDTH: number,\n    BLANK: number, BZERO: number, BSCALE: number,\n    cRA: number, cDec: number,\n    minValue: number, maxValue: number,\n    raDecWithValues: TilesRaDecList2): FITS\n}\n","\n/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n * \n * @link   github https://github.com/fab77/wcslight\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n\n\nimport { Healpix } from 'healpixjs';\nimport { Pointing } from \"healpixjs\";\nimport { Hploc } from \"healpixjs\";\n\nimport { radToDeg } from '../model/Utils.js'; // TODO change package\nimport { CoordsType } from \"../model/CoordsType.js\";\nimport { HEALPixXYSpace } from \"../model/HEALPixXYSpace.js\";\nimport { Point } from \"../model/Point.js\";\nimport { NumberType } from '../model/NumberType.js';\nimport { AstroCoords } from \"../model/AstroCoords.js\";\n\nexport class HiPSHelper {\n\n\n\t// static pxXtile: number = 512; // TODO in some cases it is different\n\tstatic DEFAULT_Naxis1_2: number = 512;\n\t// static RES_ORDER_0: number = 58.6 / HiPSHelper.pxXtile;\n\tstatic RES_ORDER_0: number = 58.6;\n\tstatic H: number = 4;\n\tstatic K: number = 3;\n\tstatic THETAX: number = Hploc.asin((HiPSHelper.K - 1) / HiPSHelper.K);\n\t/**\n\t * Table 1 - ref paper HEALPix — a Framework for High Resolution Discretization,\n\t * and Fast Analysis of Data Distributed on the Sphere\n\t * K. M. G´orski1,2, E. Hivon3,4, A. J. Banday5, B. D. Wandelt6,7, F. K. Hansen8, M.\n\t * Reinecke5, M. Bartelman9\n\t */\n\t/**\n\t * \n\t * @param {decimal degrees} pxsize \n\t * @returns {int} nside\n\t */\n\t// static computeHiPSOrder(pxsize: number, pxXtile: number): number {\n\t// \t/**\n\t// \t * with same order k (table 1), HIPS angular resolution is higher of order of 512 (2^9) pixels than \n\t// \t * the HEALPix. This is because each tile in a HiPS is represented by default by 512x512 pixels.\\\n\t// \t * Angular resolution of different HEALPix orders in respect to the order 0, can be calculated this\n\t// \t * way:\n\t// \t * \n\t// \t * \tL(k) = L(0) / 2^k = 58.6 / 2^k\n\t// \t * \n\t// \t * Therefore, in the case of HiPS we need to take into account the extra resolution given by the \n\t// \t * 512x512 (2^9) tiles. In this case the above becomes:\n\t// \t * \t\n\t// \t * \tL(k) = L(0) / (2^k * 2^9) \n\t// \t * \n\t// \t * Though, in order to compute the required order starting from the pxsize desired (in input) we\n\t// \t * need to perform these steps:\n\t// \t * \n\t// \t * \tpxsize = L(k) = L(0) / (2^k * 2^9)\n\t// \t * \t2^k = L(0) / (pxsize * 2^9)\n\t// \t *  k * Log2 2 = Log2 L(0) - Log2 (pxsize * 2^9)\n\t// \t * \tk = Log2 L(0) - Log2 (pxsize * 2^9)\n\t// \t * \n\t// \t */\n\n\n\t// \tlet k = Math.log2( (HiPSHelper.RES_ORDER_0 / pxXtile) / pxsize);\n\t// \t// let k = Math.log2(HiPSHelper.RES_ORDER_0 / (pxXtile * pxsize));\n\t// \tk = Math.round(k);\n\t// \t// let theta0px = HiPSHelper.RES_ORDER_0;\n\t// \t// let k = Math.log2(theta0px) - Math.log2(pxsize * 2**9);\n\t// \t// k = Match.round(k);\n\t// \t// let nside = 2**k;\n\t// \t// return {\n\t// \t//     \"nside\" : nside,\n\t// \t//     \"norder\" : k\n\t// \t// };\n\t// \treturn k;\n\n\t// }\n\n\t// static computeHiPSOrder2(pxsize: number, pxXtile: number): number {\n\t\t\n\t// \tconst k = Math.log2( Math.sqrt(Math.PI/ 3) / ( pxsize * pxXtile) )\n\t// \tconst order = Math.round(k);\n\t// \tconsole.warn(k)\n \n\t// \treturn order;\n\n\t// }\n\n\n\t// based on \"HiPS – Hierarchical Progressive Survey\" IVOA recomandation (formula on table 5)\n\tstatic computeOrder(pxAngSizeDeg: number, pxTileWidth: number): number {\n\t\tconsole.log(`Computing HiPS order having pixel angular size of ${pxAngSizeDeg} in degrees`)\n\t\tconst deg2rad = Math.PI / 180\n\t\tconst pxAngSizeRad = pxAngSizeDeg * deg2rad\n\t\tconsole.log(`pixel angular res in radians ${pxAngSizeRad}`)\n\t\tconst computedOrder = 0.5 * Math.log2 ( Math.PI / (3 * pxAngSizeRad * pxAngSizeRad * pxTileWidth * pxTileWidth) )\n\t\tconsole.log(`Order ${computedOrder}`)\n\t\tif (computedOrder < 0) {\n\t\t\treturn 0\n\t\t}\n\t\treturn Math.floor(computedOrder)\n\t}\n\n\tstatic getHelpixByOrder(order: number): Healpix {\n\t\tconst nside = 2 ** order\n        const healpix = new Healpix(nside)\n\t\treturn healpix\n\t}\n\n\tstatic getHelpixBypxAngSize(pixelAngulaSize: number, TILE_WIDTH: number): Healpix {\n\t\tconst healpixOrder = HiPSHelper.computeOrder(pixelAngulaSize, TILE_WIDTH)\n        const nside = 2 ** healpixOrder\n        const healpix = new Healpix(nside)\n\t\treturn healpix\n\t}\n\n\t// based on \"HiPS – Hierarchical Progressive Survey\" IVOA recomandation (formula on table 5)\n\tstatic computePxAngularSize(pxTileWidth: number, order: number) {\n\t\tconst computedPxAngSizeRadiant = Math.sqrt( 4 * Math.PI / (12 * (pxTileWidth * (2**order) )**2 ) )\n\t\tconsole.log(`Computing Pixel size with tile of ${pxTileWidth} pixels and order ${order}`)\n\t\tconst rad2deg = 180 / Math.PI\n\t\tconst deg = computedPxAngSizeRadiant * rad2deg\n\t\tconst arcmin = computedPxAngSizeRadiant * rad2deg * 60\n\t\tconst arcsec = computedPxAngSizeRadiant * rad2deg * 3600\n\t\tconsole.log (\"Pixel size in radiant:\" + computedPxAngSizeRadiant)\n\t\tconsole.log (\"Pixel size in degrees:\" + deg)\n\t\tconsole.log (\"Pixel size in arcmin:\" + arcmin)\n\t\tconsole.log (\"Pixel size in arcsec:\" + arcsec)\n\t\treturn {\n\t\t\t\"rad\": computedPxAngSizeRadiant,\n\t\t\t\"deg\": deg,\n\t\t\t\"arcmin\": arcmin,\n\t\t\t\"arcsec\": arcsec\n\t\t}\n\t}\n\n\n\t/**\n\t * Reference: HiPS – Hierarchical Progressive Survey page 11\n\t * pxsize =~ sqrt[4 * PI / (12 * (512 * 2^order)^2)]\n\t * @param {*} order \n\t */\n\tstatic computePxSize(order: number, pxXtile: number): number {\n\t\t// TODO CHECK IT\n\t\t// let pxsize = 1 / (512 * 2 ** order) * Math.sqrt(Math.PI / 3);\n\t\tlet pxsize = 1 / (pxXtile * 2 ** order) * Math.sqrt(Math.PI / 3);\n\t\treturn pxsize;\n\t}\n\n\t// /**\n\t//  * \n\t//  * @param {Object {ra, dec}} point  decimal degrees\n\t//  * @returns {Object {phi_rad, theta_rad}} in radians\n\t//  */\n\t// static convert2PhiTheta (point: Point) {\n\t// \tlet phitheta_rad = {};\n\t// \tlet phiTheta_deg = HiPSHelper.astroDegToSpherical(point.ra, point.dec);\n\t// \tphitheta_rad.phi_rad = HiPSHelper.degToRad(phiTheta_deg.phi);\n\t//     phitheta_rad.theta_rad = HiPSHelper.degToRad(phiTheta_deg.theta);\n\t// \treturn phitheta_rad;\n\t// }\n\n\t// static astroDegToSphericalRad(raDeg: number, decDeg: number) {\n\t// \tlet phiThetaDeg = HiPSHelper.astroDegToSpherical(raDeg, decDeg);\n\t// \tlet phiThetaRad = {\n\t// \t\tphi_rad: HiPSHelper.degToRad(phiThetaDeg.phi),\n\t// \t\ttheta_rad: HiPSHelper.degToRad(phiThetaDeg.theta)\n\t// \t}\n\t// \treturn phiThetaRad;\n\t// }\n\n\t// static degToRad(degrees: number): number {\n\t// \treturn (degrees / 180 ) * Math.PI ;\n\t// }\n\n\t// static radToDeg(rad: number): number {\n\t// \treturn (rad / Math.PI ) * 180 ;\n\t// }\n\n\t// static astroDegToSpherical(raDeg: number, decDeg: number): Point{\n\n\t// \tlet phiDeg: number;\n\t// \tlet thetaDeg: number;\n\t// \tphiDeg = raDeg;\n\t// \tif (phiDeg < 0){\n\t// \t\tphiDeg += 360;\n\t// \t}\n\n\t// \tthetaDeg = 90 - decDeg;\n\n\t// \treturn {\n\t// \t\tphi: phiDeg,\n\t// \t\ttheta: thetaDeg\n\t// \t};\n\t// }\n\n\t/**\n\t * \n\t * @param {Object {phi_rad, theta_rad}} phiTheta_rad Center of the circle in radians\n\t * @param {decimal} r Radius of the circle in radians\n\t * @returns \n\t */\n\tstatic computeBbox(point: Point, r: number): Pointing[] {\n\n\t\tlet bbox = [];\n\t\tbbox.push(new Pointing(null, false, point.getSpherical().thetaRad - r, point.getSpherical().phiRad - r));\n\t\tbbox.push(new Pointing(null, false, point.getSpherical().thetaRad - r, point.getSpherical().phiRad + r));\n\t\tbbox.push(new Pointing(null, false, point.getSpherical().thetaRad + r, point.getSpherical().phiRad + r));\n\t\tbbox.push(new Pointing(null, false, point.getSpherical().thetaRad - r, point.getSpherical().phiRad - r));\n\n\t\treturn bbox;\n\t}\n\n\t// static setupByTile(tileno: number, hp: Healpix): HEALPixXYSpace {\n\n\t// \tlet xyGridProj: HEALPixXYSpace = {\n\t// \t\t\"min_y\": NaN,\n\t// \t\t\"max_y\": NaN,\n\t// \t\t\"min_x\": NaN,\n\t// \t\t\"max_x\": NaN,\n\t// \t\t\"gridPointsDeg\": []\n\t// \t}\n\n\n\t// \tlet cornersVec3 = hp.getBoundariesWithStep(tileno, 1);\n\t// \tlet pointings = [];\n\n\t// \tfor (let i = 0; i < cornersVec3.length; i++) {\n\t// \t\tpointings[i] = new Pointing(cornersVec3[i]);\n\t// \t\tif (i >= 1) {\n\t// \t\t\tlet a = pointings[i - 1].phi;\n\t// \t\t\tlet b = pointings[i].phi;\n\t// \t\t\t// case when RA is just crossing the origin (e.g. 357deg - 3deg)\n\t// \t\t\tif (Math.abs(a - b) > Math.PI) {\n\t// \t\t\t\tif (pointings[i - 1].phi < pointings[i].phi) {\n\t// \t\t\t\t\tpointings[i - 1].phi += 2 * Math.PI;\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\tpointings[i].phi += 2 * Math.PI;\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\n\t// \tfor (let j = 0; j < pointings.length; j++) {\n\t// \t\tlet coThetaRad = pointings[j].theta;\n\t// \t\t// HEALPix works with colatitude (0 North Pole, 180 South Pole)\n\t// \t\t// converting the colatitude in latitude (dec)\n\t// \t\tlet decRad = Math.PI / 2 - coThetaRad;\n\n\t// \t\tlet raRad = pointings[j].phi;\n\n\t// \t\t// projection on healpix grid\n\t// \t\tlet p = new Point(CoordsType.ASTRO, NumberType.RADIANS, raRad, decRad);\n\t// \t\tlet xyDeg = HiPSHelper.world2intermediate(p.getAstro());\n\t// \t\txyGridProj.gridPointsDeg[j * 2] = xyDeg[0];\n\t// \t\txyGridProj.gridPointsDeg[j * 2 + 1] = xyDeg[1];\n\n\t// \t\tif (isNaN(xyGridProj.max_y) || xyDeg[1] > xyGridProj.max_y) {\n\t// \t\t\txyGridProj.max_y = xyDeg[1];\n\t// \t\t}\n\t// \t\tif (isNaN(xyGridProj.min_y) || xyDeg[1] < xyGridProj.min_y) {\n\t// \t\t\txyGridProj.min_y = xyDeg[1];\n\t// \t\t}\n\t// \t\tif (isNaN(xyGridProj.max_x) || xyDeg[0] > xyGridProj.max_x) {\n\t// \t\t\txyGridProj.max_x = xyDeg[0];\n\t// \t\t}\n\t// \t\tif (isNaN(xyGridProj.min_x) || xyDeg[0] < xyGridProj.min_x) {\n\t// \t\t\txyGridProj.min_x = xyDeg[0];\n\t// \t\t}\n\n\t// \t}\n\t// \treturn xyGridProj;\n\t// }\n\n\t// static world2intermediate(ac: AstroCoords): [number, number] {\n\n\t// \tlet x_grid: number;\n\t// \tlet y_grid: number;\n\n\t// \tif (Math.abs(ac.decRad) <= HiPSHelper.THETAX) { // equatorial belts\n\t\t\t\n\t// \t\tx_grid = ac.raDeg;\n\t// \t\ty_grid = Hploc.sin(ac.decRad) * HiPSHelper.K * 90 / HiPSHelper.H;\n\t// \t\treturn [x_grid, y_grid];\n\n\t// \t} else if (Math.abs(ac.decRad) > HiPSHelper.THETAX) { // polar zones\n\n\t// \t\tconst raDeg = ac.raDeg;\n\n\t// \t\tlet w = 0; // omega\n\t// \t\tif (HiPSHelper.K % 2 !== 0 || ac.decRad > 0) { // K odd or thetax > 0\n\t// \t\t\tw = 1;\n\t// \t\t}\n\n\t// \t\tconst sigma = Math.sqrt(HiPSHelper.K * (1 - Math.abs(Hploc.sin(ac.decRad))));\n\t// \t\tconst phi_c = - 180 + (2 * Math.floor(((ac.raDeg + 180) * HiPSHelper.H / 360) + ((1 - w) / 2)) + w) * (180 / HiPSHelper.H);\n\n\t// \t\tx_grid = phi_c + (raDeg - phi_c) * sigma;\n\t// \t\ty_grid = (180 / HiPSHelper.H) * (((HiPSHelper.K + 1) / 2) - sigma);\n\n\t// \t\tif (ac.decRad < 0) {\n\t// \t\t\ty_grid *= -1;\n\t// \t\t}\n\t// \t\treturn [x_grid, y_grid]\n\t// \t}\n\n\t// \treturn [NaN, NaN];\n\n\t// }\n\n\t// static world2intermediate(sc: SphericalCoords): [number, number] {\n\t//     let x_grid: number;\n\t// \tlet y_grid: number;\n\n\t// \tif ( Math.abs(sc.thetaRad) <= HiPSHelper.THETAX) { // equatorial belts\n\t// \t\tx_grid = sc.phiDeg;\n\n\t// \t\ty_grid = Hploc.sin(sc.thetaRad) * HiPSHelper.K * 90 / HiPSHelper.H;\n\n\n\t// \t} else if ( Math.abs(sc.thetaRad) > HiPSHelper.THETAX) { // polar zones\n\n\t// \t\tlet phiDeg = sc.phiDeg;\n\n\t// \t\tlet w = 0; // omega\n\t// \t\tif (HiPSHelper.K % 2 !== 0 || sc.thetaRad > 0) { // K odd or thetax > 0\n\t// \t\t\tw = 1;\n\t// \t\t}\n\n\t// \t\tlet sigma = Math.sqrt( HiPSHelper.K * (1 - Math.abs(Hploc.sin(sc.thetaRad)) ) );\n\t// \t\tlet phi_c = - 180 + ( 2 * Math.floor( ((sc.phiRad + 180) * HiPSHelper.H/360) + ((1 - w)/2) ) + w ) * ( 180 / HiPSHelper.H );\n\n\t// \t\tx_grid = phi_c + (phiDeg - phi_c) * sigma;\n\t// \t\ty_grid = (180  / HiPSHelper.H) * ( ((HiPSHelper.K + 1)/2) - sigma);\n\n\t// \t\tif (sc.thetaRad < 0) {\n\t// \t\t\ty_grid *= -1;\n\t// \t\t}\n\t// \t}\n\n\t// \treturn [x_grid, y_grid];\n\n\t// }\n\n\t// static intermediate2pix(x: number, y: number, xyGridProj: HEALPixXYSpace, pxXtile: number): [number, number] {\n\t// \tlet xInterval = Math.abs(xyGridProj.max_x - xyGridProj.min_x);\n\t// \tlet yInterval = Math.abs(xyGridProj.max_y - xyGridProj.min_y);\n\n\t// \tlet i_norm: number;\n\t// \tlet j_norm: number;\n\t// \tif ((xyGridProj.min_x > 360 || xyGridProj.max_x > 360) && x < xyGridProj.min_x) {\n\t// \t\ti_norm = (x + 360 - xyGridProj.min_x) / xInterval;\n\t// \t} else {\n\t// \t\ti_norm = (x - xyGridProj.min_x) / xInterval;\n\t// \t}\n\t// \tj_norm = (y - xyGridProj.min_y) / yInterval;\n\n\n\t// \tlet i = 0.5 - (i_norm - j_norm);\n\t// \tlet j = (i_norm + j_norm) - 0.5;\n\n\t// \t// TODO CHECK THE FOLLOWING. BEFORE IT WAS i = Math.floor(i * HiPSHelper.pxXtile);\n\t// \tpxXtile\n\t// \t// i = Math.floor(i * HiPSHelper.DEFAULT_Naxis1_2);\n\t// \t// j = Math.floor(j * HiPSHelper.DEFAULT_Naxis1_2);\n\t// \t// return [i, HiPSHelper.DEFAULT_Naxis1_2 - j - 1];\n\t\t\n\t// \ti = Math.floor(i * pxXtile);\n\t// \tj = Math.floor(j * pxXtile);\n\t// \treturn [i, pxXtile - j - 1];\n\n\n\n\t// }\n\n\n\t// static pix2intermediate(i: number, j: number, xyGridProj: HEALPixXYSpace, naxis1: number, naxis2: number): [number, number] {\n\t// \t/**\n\t// \t   * (i_norm,w_pixel) = (0,0) correspond to the lower-left corner of the facet in the image\n\t// \t * (i_norm,w_pixel) = (1,1) is the upper right corner\n\t// \t * dimamond in figure 1 from \"Mapping on the HEalpix grid\" paper\n\t// \t * (0,0) leftmost corner\n\t// \t * (1,0) upper corner\n\t// \t * (0,1) lowest corner\n\t// \t * (1,1) rightmost corner\n\t// \t * Thanks YAGO! :p\n\t// \t */\n\t// \t// let cnaxis1 = HiPSHelper.pxXtile;\n\t// \t// let cnaxis2 = HiPSHelper.pxXtile;\n\n\t// \tlet cnaxis1 = naxis1;\n\t// \tlet cnaxis2 = naxis2;\n\t// \tif (naxis1) {\n\t// \t\tcnaxis1 = naxis1;\n\t// \t}\n\t// \tif (naxis2) {\n\t// \t\tcnaxis2 = naxis2;\n\t// \t}\n\t// \tlet i_norm = (i + 0.5) / cnaxis1;\n\t// \tlet j_norm = (j + 0.5) / cnaxis2;\n\n\t// \tlet xInterval = Math.abs(xyGridProj.max_x - xyGridProj.min_x) / 2.0;\n\t// \tlet yInterval = Math.abs(xyGridProj.max_y - xyGridProj.min_y) / 2.0;\n\t// \tlet yMean = (xyGridProj.max_y + xyGridProj.min_y) / 2.0;\n\n\t// \t// bi-linear interpolation\n\t// \tlet x = xyGridProj.max_x - xInterval * (i_norm + j_norm);\n\t// \tlet y = yMean - yInterval * (j_norm - i_norm);\n\n\t// \treturn [x, y];\n\t// }\n\n\n\t// static intermediate2world(x: number, y: number): Point {\n\n\t// \tlet phiDeg: number;\n\t// \tlet thetaDeg: number;\n\t// \tlet Yx = 90 * (HiPSHelper.K - 1) / HiPSHelper.H;\n\n\n\n\t// \tif (Math.abs(y) <= Yx) { // equatorial belts\n\n\t// \t\tphiDeg = x;\n\t// \t\tthetaDeg = radToDeg(Math.asin((y * HiPSHelper.H) / (90 * HiPSHelper.K)));\n\n\t// \t} else if (Math.abs(y) > Yx) { // polar regions\n\n\t// \t\tlet sigma = (HiPSHelper.K + 1) / 2 - Math.abs(y * HiPSHelper.H) / 180;\n\t// \t\tlet thetaRad = Hploc.asin(1 - (sigma * sigma) / HiPSHelper.K);\n\t// \t\tlet w = 0; // omega\n\t// \t\tif (HiPSHelper.K % 2 !== 0 || thetaRad > 0) { // K odd or thetax > 0\n\t// \t\t\tw = 1;\n\t// \t\t}\n\t// \t\tlet x_c = -180 + (2 * Math.floor((x + 180) * HiPSHelper.H / 360 + (1 - w) / 2) + w) * (180 / HiPSHelper.H);\n\t// \t\tphiDeg = x_c + (x - x_c) / sigma;\n\t// \t\tthetaDeg = radToDeg(thetaRad);\n\t// \t\tif (y <= 0) {\n\t// \t\t\tthetaDeg *= -1;\n\t// \t\t}\n\t// \t}\n\t// \t// return [phiDeg, thetaDeg];\n\t// \t// TODO CHECK THIS!\n\t// \t// let p = new Point(CoordsType.SPHERICAL, NumberType.DEGREES, phiDeg, thetaDeg);\n\t// \tlet p = new Point(CoordsType.ASTRO, NumberType.DEGREES, phiDeg, thetaDeg);\n\n\t// \treturn p;\n\n\t// }\n\n}\n","export class MinMaxValue {\n    min: number\n    max: number\n    \n    constructor(min: number, max: number) {\n        this.min = min\n        this.max = max\n    }\n\n    getMinValue() {\n        return this.min\n    }\n    \n    getMaxValue() {\n        return this.max\n    }\n\n}","export class RADecMinMaxCentral {\n    centralRA: number\n    centralDec: number\n    minRA: number\n    minDec: number\n    maxRA: number\n    maxDec: number\n    \n    constructor(centralRA: number, centralDec: number, minRA: number,\n    minDec: number, maxRA: number, maxDec: number) {\n        this.centralDec = centralDec\n        this.centralRA = centralRA\n\n        this.maxDec = maxDec\n        this.maxRA = maxRA\n\n        this.minRA = minRA\n        this.minDec = minDec\n    }\n\n    getMinRA() {\n        return this.minRA\n    }\n    \n    getMinDec() {\n        return this.minDec\n    }\n    \n    getMaxRA() {\n        return this.maxRA\n    }\n    \n    getMaxDec() {\n        return this.maxDec\n    }\n\n    getCentralRA() {\n        return this.centralRA\n    }\n    \n    getCentralDec() {\n        return this.centralDec\n    }\n\n\n    setMinRA(minRA: number) {\n        this.minRA = minRA\n    }\n    \n    setMinDec(minDec: number) {\n        this.minDec = minDec\n    }\n    \n    setMaxRA(maxRA: number) {\n        this.maxRA = maxRA\n    }\n    \n    setMaxDec(maxDec: number) {\n        this.maxDec = maxDec\n    }\n\n    setCentralRA(cRA: number) {\n        this.centralRA = cRA\n    }\n    \n    setCentralDec(cDec: number) {\n        this.centralDec = cDec\n    }\n\n}","import { FITSParser } from \"jsfitsio\";\nimport { HiPSFITS } from \"./HiPSFITS.js\";\n\nexport class FITSList{\n    private fitslist: Map<number, HiPSFITS> = new Map()\n\n    constructor(){}\n\n    getFITSList(): Map<number, HiPSFITS>{\n        return this.fitslist\n    }\n\n    getFITS(tileno: number): HiPSFITS | null {\n        const fits = this.fitslist.get(tileno)\n        return fits === undefined ? null : fits\n    }\n\n    async addFITSByURL(url: string) {\n        const fits = await FITSParser.loadFITS(url)\n        const hipsFits = new HiPSFITS(fits, null, null )\n        this.fitslist.set(hipsFits.getTileno(), hipsFits)\n    }\n\n    addFITS(fits: HiPSFITS) {\n        const tileno = fits.getTileno()\n        this.fitslist.set(tileno, fits)\n    }\n}","import { FITSHeaderItem, FITSHeaderManager, FITSParsed, FITSParser, ParseUtils } from \"jsfitsio\"\n\nimport { HiPSIntermediateProj } from \"./HiPSIntermediateProj.js\"\nimport { Healpix, Pointing } from \"healpixjs\"\nimport { HEALPixXYSpace } from \"../../model/HEALPixXYSpace.js\"\nimport { astroToSpherical, fillAstro, radToDeg } from \"../../model/Utils.js\"\nimport { NumberType } from \"../../model/NumberType.js\"\nimport { HiPSHelper } from \"../HiPSHelper.js\"\nimport { HiPSProperties } from \"./HiPSProperties.js\"\nimport { ImagePixel } from \"./ImagePixel.js\"\n\nexport class HiPSFITS {\n\n    private payload: Array<Uint8Array> = []\n    private header!: FITSHeaderManager\n    private tileno!: number\n    private order!: number\n    private tileWidth!: number\n    private healpix!: Healpix\n    private intermediateXYGrid!: HEALPixXYSpace\n    private min: number = NaN\n    private max: number = NaN\n    private static CTYPE1 = \"RA---HPX\"\n    private static CTYPE2 = \"DEC--HPX\"\n    private static NPIX: string = \"NPIX\"\n\n\n    constructor(fitsParsed: FITSParsed | null, tileno: number | null, hipsProp: HiPSProperties | null) {\n\n        if (fitsParsed) {\n            this.initFromFITSParsed(fitsParsed)\n        } else if (!tileno || !hipsProp) {\n            console.error(\"tileno or hipsProp are not defined\")\n            throw new Error(\"tileno or hipsProp are not defined\")\n        } else {\n            this.order = hipsProp.getItem(HiPSProperties.ORDER)\n            const naxis1 = hipsProp.getItem(HiPSProperties.TILE_WIDTH)\n            const naxis2 = hipsProp.getItem(HiPSProperties.TILE_WIDTH)\n            this.tileno = tileno\n            if (naxis1 != naxis2) {\n                console.error(\"NAXIS1 and NAXIS2 do not match.\")\n                throw new Error(\"NAXIS1 and NAXIS2 do not match.\")\n            }\n            this.tileWidth = naxis1\n            this.tileno = tileno\n            this.healpix = HiPSHelper.getHelpixByOrder(this.order)\n            this.intermediateXYGrid = HiPSIntermediateProj.setupByTile(this.tileno, this.healpix)\n\n        }\n\n    }\n\n    initFromUint8Array(imagePixelList: ImagePixel[], fitsHeaderParams: FITSHeaderManager, tileWidth: number) {\n        this.setPayload(imagePixelList, fitsHeaderParams, tileWidth)\n        this.setHeader(fitsHeaderParams)\n    }\n    // initFromUint8Array(raDecList: [number, number][], originalValues: Uint8Array, fitsHeaderParams: FITSHeaderManager) {\n    //     this.setPayload(raDecList, originalValues, fitsHeaderParams)\n    //     this.setHeader(fitsHeaderParams)\n    // }\n\n    getHeader(){\n        return this.header\n    }\n\n    getPayload() {\n        return this.payload\n    }\n\n    initFromFITSParsed(fitsParsed: FITSParsed) {\n\n        this.payload = fitsParsed.data\n\n        this.order = Number(fitsParsed.header.findById(HiPSProperties.ORDER)?.value)\n        const naxis1 = Number(fitsParsed.header.findById(FITSHeaderManager.NAXIS1)?.value)\n        const naxis2 = Number(fitsParsed.header.findById(FITSHeaderManager.NAXIS2)?.value)\n        this.tileno = Number(fitsParsed.header.findById(HiPSFITS.NPIX)?.value)\n\n        if (isNaN(this.order) || isNaN(naxis1) || isNaN(naxis2) || isNaN(this.tileno)) {\n            console.warn(\"ORDER, NAXIS1 or NAXIS2 not defined\")\n            throw new Error(\"ORDER, NAXIS1 or NAXIS2 not defined\")\n        }\n        if (naxis1 != naxis2) {\n            console.error(\"NAXIS1 and NAXIS2 do not match.\")\n            throw new Error(\"NAXIS1 and NAXIS2 do not match.\")\n        }\n        this.tileWidth = naxis1\n        this.computeMinMax(fitsParsed)\n        this.setHeader(fitsParsed.header)\n\n    }\n\n    getTileno() {\n        return this.tileno\n    }\n\n    private computeMinMax(fitsParsed: FITSParsed) {\n\n        const bitpix = Number(fitsParsed.header.findById(FITSHeaderManager.BITPIX)?.value)\n        const bzero = Number(fitsParsed.header.findById(FITSHeaderManager.BZERO)?.value)\n        const bscale = Number(fitsParsed.header.findById(FITSHeaderManager.BSCALE)?.value)\n\n        const bytesXelem = Math.abs(bitpix / 8)\n\n        for (let ridx = 0; ridx < fitsParsed.data.length; ridx++) {\n            const row = fitsParsed.data[ridx]\n            for (let cidx = 0; cidx < row.length; cidx++) {\n                const valpixb = ParseUtils.extractPixelValue(0, this.payload[ridx].slice(cidx * bytesXelem, cidx * bytesXelem + bytesXelem), bitpix)\n                if (valpixb == null) {\n                    continue\n                }\n                const valphysical = bzero + bscale * valpixb;\n                if (valphysical < this.min || isNaN(this.min)) {\n                    this.min = valphysical;\n                } else if (valphysical > this.max || isNaN(this.max)) {\n                    this.max = valphysical;\n                }\n            }\n        }\n    }\n\n    static async downloadFITSFile(path: string) {\n        const fits = await FITSParser.loadFITS(path)\n        if (fits == null) {\n            console.warn(`fits ${path} doesn't exist`)\n            return null\n        }\n        return fits\n    }\n\n\n    getFITS(): FITSParsed {\n        return { header: this.header, data: this.payload }\n    }\n\n    private setPayload(imagePixelList: ImagePixel[], fitsHeaderParams: FITSHeaderManager, tileWidth: number) {\n\n\n        const bitpix = Number(fitsHeaderParams.findById(FITSHeaderManager.BITPIX)?.value)\n        const bzero = Number(fitsHeaderParams.findById(FITSHeaderManager.BZERO)?.value)\n        const bscale = Number(fitsHeaderParams.findById(FITSHeaderManager.BSCALE)?.value)\n\n        const bytesXelem = Math.abs(bitpix / 8)\n        if (!bytesXelem) {\n            console.error(\"BITPIX not defined\")\n            throw new Error(\"BITPIX not defined\")\n        }\n\n        this.payload = new Array(tileWidth)\n        for (let row = 0; row < tileWidth; row++) {\n            this.payload[row] = new Uint8Array(tileWidth * bytesXelem)\n        }\n\n\n        imagePixelList.forEach((imgpx) => {\n\n            const ra = imgpx.getRADeg()\n            const dec = imgpx.getDecDeg()\n            const ac = fillAstro(ra, dec, NumberType.DEGREES)\n            if (ac == null) {\n                console.error(`Error converting ${ra}, ${dec} into AstroCoords object`);\n                return;\n            }\n            const xy = HiPSIntermediateProj.world2intermediate(ac);\n            const [col, row] = HiPSIntermediateProj.intermediate2pix(xy[0], xy[1], this.intermediateXYGrid, tileWidth);\n        \n            if (row < 0 || row >= tileWidth || col < 0 || col >= tileWidth) return;\n\n            const valueBytes = imgpx.getUint8Value();\n            if (!valueBytes) return; // or continue, depending on context\n            \n            for (let b = 0; b < bytesXelem; b++) {\n                this.payload[row][col * bytesXelem + b] = valueBytes[b];\n            }\n\n            const valpixb = ParseUtils.extractPixelValue(0, valueBytes, bitpix);\n            if (valpixb == null) return;\n\n            const valphysical = bzero + bscale * valpixb;\n            if (isNaN(this.min) || valphysical < this.min) this.min = valphysical;\n            if (isNaN(this.max) || valphysical > this.max) this.max = valphysical;\n\n        });\n\n\n    }\n    // private setPayload(raDecList: [number, number][], originalValues: Uint8Array, fitsHeaderParams: FITSHeaderManager) {\n\n\n    //     const bitpix = Number(fitsHeaderParams.findById(FITSHeaderManager.BITPIX)?.value)\n    //     const bzero = Number(fitsHeaderParams.findById(FITSHeaderManager.BZERO)?.value)\n    //     const bscale = Number(fitsHeaderParams.findById(FITSHeaderManager.BSCALE)?.value)\n\n    //     const bytesXelem = Math.abs(bitpix / 8)\n    //     if (!bytesXelem) {\n    //         console.error(\"BITPIX not defined\")\n    //         throw new Error(\"BITPIX not defined\")\n    //     }\n\n    //     this.payload = new Array(this.tileWidth)\n    //     for (let row = 0; row < this.tileWidth; row++) {\n    //         this.payload[row] = new Uint8Array(this.tileWidth * bytesXelem)\n    //     }\n\n\n\n    //     for (let rdidx = 0; rdidx < raDecList.length; rdidx++) {\n\n    //         const [ra, dec] = raDecList[rdidx]\n\n    //         const ac = fillAstro(ra, dec, NumberType.DEGREES)\n    //         if (ac == null) {\n    //             console.error(`Error converting ${ra}, ${dec} into AstroCoords object`)\n    //             continue\n    //         }\n\n    //         const sc = astroToSpherical(ac)\n    //         const ptg = new Pointing(null, false, sc.thetaRad, sc.phiRad)\n    //         const pixtileno: number = this.healpix.ang2pix(ptg)\n    //         if (pixtileno != this.tileno) {\n    //             continue\n    //         }\n\n    //         const xy = HiPSIntermediateProj.world2intermediate(ac);\n    //         let ij = HiPSIntermediateProj.intermediate2pix(xy[0], xy[1], this.intermediateXYGrid, this.tileWidth);\n    //         const col = ij[0];\n    //         const row = ij[1];\n\n    //         for (let b = 0; b < bytesXelem; b++) {\n    //             const byte = originalValues[rdidx * bytesXelem + b];\n    //             this.payload[row][col * bytesXelem + b] = byte\n    //             // TODO check what's nodata!\n    //             // if (nodata.get(\"\" + pixtileno + \"\")) {\n    //             // \tif (byte != 0) {\n    //             // \t\tnodata.set(\"\" + pixtileno + \"\", false);\n    //             // \t}\n    //             // }\n\n    //             const valpixb = ParseUtils.extractPixelValue(0, this.payload[row].slice(col * bytesXelem, col * bytesXelem + bytesXelem), bitpix);\n    //             if (valpixb == null) {\n    //                 continue\n    //             }\n\n    //             const valphysical = bzero + bscale * valpixb;\n    //             if (valphysical < this.min || isNaN(this.min)) {\n    //                 this.min = valphysical;\n    //             } else if (valphysical > this.max || isNaN(this.max)) {\n    //                 this.max = valphysical;\n    //             }\n    //         }\n    //     }\n    // }\n\n    private addMandatoryItemToHeader(key: string, fitsHeaderParams: FITSHeaderManager) {\n        const value = fitsHeaderParams.findById(key)?.value\n        if (value === undefined || value == null) {\n            console.error(`${key} not defined`)\n            throw new Error(key + \" is not defined\")\n        }\n        const item = new FITSHeaderItem(key, value, \"\")\n        this.header.insert(item)\n    }\n\n    private addItemToHeader(key: string, fitsHeaderParams: FITSHeaderManager) {\n        const value = fitsHeaderParams.findById(key)?.value\n        if (value !== undefined || value != null) {\n            const item = new FITSHeaderItem(key, value, \"\")\n            this.header.insert(item)\n        }\n    }\n\n\n\n    private setHeader(fitsHeaderParams: FITSHeaderManager) {\n\n        this.header = new FITSHeaderManager()\n\n        this.addMandatoryItemToHeader(FITSHeaderManager.SIMPLE, fitsHeaderParams)\n        this.addMandatoryItemToHeader(FITSHeaderManager.BITPIX, fitsHeaderParams)\n\n        this.addItemToHeader(FITSHeaderManager.BLANK, fitsHeaderParams)\n        this.addItemToHeader(FITSHeaderManager.BSCALE, fitsHeaderParams)\n        this.addItemToHeader(FITSHeaderManager.BZERO, fitsHeaderParams)\n\n        this.header.insert(new FITSHeaderItem(FITSHeaderManager.NAXIS, Number(2), \"\"))\n\n        this.header.insert(new FITSHeaderItem(FITSHeaderManager.NAXIS1, Number(this.tileWidth), \"\"))\n\n        this.header.insert(new FITSHeaderItem(FITSHeaderManager.NAXIS2, Number(this.tileWidth), \"\"))\n\n        this.header.insert(new FITSHeaderItem(FITSHeaderManager.CTYPE1, HiPSFITS.CTYPE1, \"\"))\n\n        this.header.insert(new FITSHeaderItem(FITSHeaderManager.CTYPE2, HiPSFITS.CTYPE2, \"\"))\n\n        this.header.insert(new FITSHeaderItem(FITSHeaderManager.DATAMIN, this.min, \"\"))\n\n        this.header.insert(new FITSHeaderItem(FITSHeaderManager.DATAMAX, this.min, \"\"))\n\n        this.header.insert(new FITSHeaderItem(HiPSProperties.ORDER, Number(this.order), \"\"))\n\n        this.header.insert(new FITSHeaderItem(HiPSFITS.NPIX, Number(this.tileno), \"\"))\n\n        const crpix = this.tileno / 2\n        this.header.insert(new FITSHeaderItem(FITSHeaderManager.CRPIX1, crpix, \"\"))\n\n        this.header.insert(new FITSHeaderItem(FITSHeaderManager.CRPIX2, crpix, \"\"))\n\n        this.header.insert(new FITSHeaderItem(FITSHeaderManager.ORIGIN, \"WCSLight v.0.x\", \"\"))\n\n        this.header.insert(new FITSHeaderItem(FITSHeaderManager.COMMENT, \"\", \"WCSLight v0.x developed by F.Giordano and Y.Ascasibar\"))\n\n        let vec3 = this.healpix.pix2vec(this.tileno);\n        let ptg = new Pointing(vec3);\n        let crval1 = radToDeg(ptg.phi);\n        let crval2 = 90 - radToDeg(ptg.theta);\n\n        this.header.insert(new FITSHeaderItem(FITSHeaderManager.CRVAL1, crval1, \"\"));\n        this.header.insert(new FITSHeaderItem(FITSHeaderManager.CRVAL2, crval2, \"\"));\n\n        this.header.insert(new FITSHeaderItem(\"END\", \"\", \"\"))\n\n\n    }\n\n\n}","import { Healpix, Hploc, Pointing } from \"healpixjs\";\nimport { AstroCoords } from \"../../model/AstroCoords.js\";\nimport { HEALPixXYSpace } from \"../../model/HEALPixXYSpace.js\";\nimport { CoordsType } from \"../../model/CoordsType.js\";\nimport { NumberType } from \"../../model/NumberType.js\";\nimport { Point } from \"../../model/Point.js\";\nimport { radToDeg } from \"../../model/Utils.js\";\n\n\nexport class HiPSIntermediateProj {\n\n    static RES_ORDER_0: number = 58.6;\n    static H: number = 4;\n    static K: number = 3;\n    static THETAX: number = Hploc.asin((HiPSIntermediateProj.K - 1) / HiPSIntermediateProj.K);\n\n\n    static setupByTile(tileno: number, hp: Healpix): HEALPixXYSpace {\n    \n            let xyGridProj: HEALPixXYSpace = {\n                \"min_y\": NaN,\n                \"max_y\": NaN,\n                \"min_x\": NaN,\n                \"max_x\": NaN,\n                \"gridPointsDeg\": []\n            }\n    \n    \n            let cornersVec3 = hp.getBoundariesWithStep(tileno, 1);\n            let pointings = [];\n    \n            for (let i = 0; i < cornersVec3.length; i++) {\n                pointings[i] = new Pointing(cornersVec3[i]);\n                if (i >= 1) {\n                    let a = pointings[i - 1].phi;\n                    let b = pointings[i].phi;\n                    // case when RA is just crossing the origin (e.g. 357deg - 3deg)\n                    if (Math.abs(a - b) > Math.PI) {\n                        if (pointings[i - 1].phi < pointings[i].phi) {\n                            pointings[i - 1].phi += 2 * Math.PI;\n                        } else {\n                            pointings[i].phi += 2 * Math.PI;\n                        }\n                    }\n                }\n            }\n    \n            for (let j = 0; j < pointings.length; j++) {\n                let coThetaRad = pointings[j].theta;\n                // HEALPix works with colatitude (0 North Pole, 180 South Pole)\n                // converting the colatitude in latitude (dec)\n                let decRad = Math.PI / 2 - coThetaRad;\n    \n                let raRad = pointings[j].phi;\n    \n                // projection on healpix grid\n                let p = new Point(CoordsType.ASTRO, NumberType.RADIANS, raRad, decRad);\n                let xyDeg = HiPSIntermediateProj.world2intermediate(p.getAstro());\n                xyGridProj.gridPointsDeg[j * 2] = xyDeg[0];\n                xyGridProj.gridPointsDeg[j * 2 + 1] = xyDeg[1];\n    \n                if (isNaN(xyGridProj.max_y) || xyDeg[1] > xyGridProj.max_y) {\n                    xyGridProj.max_y = xyDeg[1];\n                }\n                if (isNaN(xyGridProj.min_y) || xyDeg[1] < xyGridProj.min_y) {\n                    xyGridProj.min_y = xyDeg[1];\n                }\n                if (isNaN(xyGridProj.max_x) || xyDeg[0] > xyGridProj.max_x) {\n                    xyGridProj.max_x = xyDeg[0];\n                }\n                if (isNaN(xyGridProj.min_x) || xyDeg[0] < xyGridProj.min_x) {\n                    xyGridProj.min_x = xyDeg[0];\n                }\n    \n            }\n            return xyGridProj;\n        }\n\n    static world2intermediate(ac: AstroCoords): [number, number] {\n        let x_grid: number = NaN;\n        let y_grid: number = NaN;\n\n        if (Math.abs(ac.decRad) <= HiPSIntermediateProj.THETAX) { // equatorial belts\n            x_grid = ac.raDeg;\n\n            y_grid = Hploc.sin(ac.decRad) * HiPSIntermediateProj.K * 90 / HiPSIntermediateProj.H;\n\n\n        } else if (Math.abs(ac.decRad) > HiPSIntermediateProj.THETAX) { // polar zones\n\n            let raDeg = ac.raDeg;\n\n            let w = 0; // omega\n            if (HiPSIntermediateProj.K % 2 !== 0 || ac.decRad > 0) { // K odd or thetax > 0\n                w = 1;\n            }\n\n            let sigma = Math.sqrt(HiPSIntermediateProj.K * (1 - Math.abs(Hploc.sin(ac.decRad))));\n            let phi_c = - 180 + (2 * Math.floor(((ac.raDeg + 180) * HiPSIntermediateProj.H / 360) + ((1 - w) / 2)) + w) * (180 / HiPSIntermediateProj.H);\n\n            x_grid = phi_c + (raDeg - phi_c) * sigma;\n            y_grid = (180 / HiPSIntermediateProj.H) * (((HiPSIntermediateProj.K + 1) / 2) - sigma);\n\n            if (ac.decRad < 0) {\n                y_grid *= -1;\n            }\n        }\n\n        return [x_grid, y_grid];\n    }\n\n    static intermediate2pix(x: number, y: number, xyGridProj: HEALPixXYSpace, pxXtile: number): [number, number] {\n        let xInterval = Math.abs(xyGridProj.max_x - xyGridProj.min_x);\n        let yInterval = Math.abs(xyGridProj.max_y - xyGridProj.min_y);\n\n        let i_norm: number;\n        let j_norm: number;\n        if ((xyGridProj.min_x > 360 || xyGridProj.max_x > 360) && x < xyGridProj.min_x) {\n            i_norm = (x + 360 - xyGridProj.min_x) / xInterval;\n        } else {\n            i_norm = (x - xyGridProj.min_x) / xInterval;\n        }\n        j_norm = (y - xyGridProj.min_y) / yInterval;\n\n\n        let i = 0.5 - (i_norm - j_norm);\n        let j = (i_norm + j_norm) - 0.5;\n\n        // TODO CHECK THE FOLLOWING. BEFORE IT WAS i = Math.floor(i * HiPSHelper.pxXtile);\n        // pxXtile\n        // i = Math.floor(i * HiPSHelper.DEFAULT_Naxis1_2);\n        // j = Math.floor(j * HiPSHelper.DEFAULT_Naxis1_2);\n        // return [i, HiPSHelper.DEFAULT_Naxis1_2 - j - 1];\n\n        i = Math.floor(i * pxXtile);\n        j = Math.floor(j * pxXtile);\n        return [i, pxXtile - j - 1];\n    }\n\n    static pix2intermediate(i: number, j: number, xyGridProj: HEALPixXYSpace, naxis1: number, naxis2: number): [number, number] {\n        /**\n                   * (i_norm,w_pixel) = (0,0) correspond to the lower-left corner of the facet in the image\n                 * (i_norm,w_pixel) = (1,1) is the upper right corner\n                 * dimamond in figure 1 from \"Mapping on the HEalpix grid\" paper\n                 * (0,0) leftmost corner\n                 * (1,0) upper corner\n                 * (0,1) lowest corner\n                 * (1,1) rightmost corner\n                 * Thanks YAGO! :p\n                 */\n        // let cnaxis1 = HiPSHelper.pxXtile;\n        // let cnaxis2 = HiPSHelper.pxXtile;\n\n        let cnaxis1 = naxis1;\n        let cnaxis2 = naxis2;\n        if (naxis1) {\n            cnaxis1 = naxis1;\n        }\n        if (naxis2) {\n            cnaxis2 = naxis2;\n        }\n        const i_norm = (i + 0.5) / cnaxis1;\n        const j_norm = (j + 0.5) / cnaxis2;\n\n        const xInterval = Math.abs(xyGridProj.max_x - xyGridProj.min_x) / 2.0;\n        const yInterval = Math.abs(xyGridProj.max_y - xyGridProj.min_y) / 2.0;\n        const yMean = (xyGridProj.max_y + xyGridProj.min_y) / 2.0;\n\n        // bi-linear interpolation\n        const x = xyGridProj.max_x - xInterval * (i_norm + j_norm);\n        const y = yMean - yInterval * (j_norm - i_norm);\n\n        return [x, y];\n    }\n\n    static intermediate2world(x: number, y: number): Point {\n        \n        let phiDeg: number = NaN\n        let thetaDeg: number = NaN\n        const Yx = 90 * (HiPSIntermediateProj.K - 1) / HiPSIntermediateProj.H\n\n\n\n        if (Math.abs(y) <= Yx) { // equatorial belts\n\n            phiDeg = x\n            thetaDeg = radToDeg(Math.asin((y * HiPSIntermediateProj.H) / (90 * HiPSIntermediateProj.K)))\n\n        } else if (Math.abs(y) > Yx) { // polar regions\n\n            const sigma = (HiPSIntermediateProj.K + 1) / 2 - Math.abs(y * HiPSIntermediateProj.H) / 180\n            const thetaRad = Hploc.asin(1 - (sigma * sigma) / HiPSIntermediateProj.K)\n            let w = 0 // omega\n            if (HiPSIntermediateProj.K % 2 !== 0 || thetaRad > 0) { // K odd or thetax > 0\n                w = 1\n            }\n            const x_c = -180 + (2 * Math.floor((x + 180) * HiPSIntermediateProj.H / 360 + (1 - w) / 2) + w) * (180 / HiPSIntermediateProj.H)\n            phiDeg = x_c + (x - x_c) / sigma\n            thetaDeg = radToDeg(thetaRad)\n            if (y <= 0) {\n                thetaDeg *= -1\n            }\n        }\n        // return [phiDeg, thetaDeg];\n        // TODO CHECK THIS!\n        // let p = new Point(CoordsType.SPHERICAL, NumberType.DEGREES, phiDeg, thetaDeg);\n        const p = new Point(CoordsType.ASTRO, NumberType.DEGREES, phiDeg, thetaDeg);\n\n        return p;\n    }\n\n}","import { FITSList } from \"./FITSList.js\";\nimport { HiPSProperties } from \"./HiPSProperties.js\"\nimport { HiPSPropManager } from \"./HiPSPropManager.js\";\nimport { Point } from \"../../model/Point.js\";\nimport { Healpix, Pointing, RangeSet } from \"healpixjs\";\nimport { degToRad } from \"../../model/Utils.js\";\nimport { HiPSIntermediateProj } from \"./HiPSIntermediateProj.js\";\nimport { FITSHeaderManager, FITSParser } from \"jsfitsio\";\nimport { TilesRaDecList } from \"./TilesRaDecList.js\";\nimport { HiPSFITS } from \"./HiPSFITS.js\";\n// import { ImagePixel } from \"../../model/ImagePixel.js\";\nimport { ImagePixel } from \"./ImagePixel.js\";\nimport { HiPSHelper } from \"../HiPSHelper.js\";\nimport { CoordsType } from \"../../model/CoordsType.js\";\nimport { NumberType } from \"../../model/NumberType.js\";\nimport { HEALPixXYSpace } from \"../../model/HEALPixXYSpace.js\";\nimport { TilesRaDecList2 } from \"./TilesRaDecList2.js\";\n\n\n\nexport class HiPSProj {\n\n    private baseURL: string\n    private healpix: Healpix | null = null\n    private hipsProp: HiPSProperties | null = null\n\n    constructor(baseHiPSPath: string) {\n        this.baseURL = baseHiPSPath\n        this.init()\n        if (this.healpix == null) {\n            console.warn(\"healpix is null\")\n            throw new Error(\"healpix is null\")\n        }\n        if (this.hipsProp == null) {\n            console.warn(\"HiPSProp is null\")\n            throw new Error(\"HiPSProp is null\")\n        }\n    }\n\n    async init() {\n        const hipsProp = await this.parsePropertyFile()\n        const order = hipsProp.getItem(HiPSProperties.ORDER)\n        this.healpix = HiPSHelper.getHelpixByOrder(order)\n    }\n\n    private async parsePropertyFile() {\n        const hipsProp = HiPSPropManager.parsePropertyFile(this.baseURL)\n        return hipsProp\n    }\n\n    static getImageRADecList(center: Point, radiusDeg: number, pixelAngSize: number, TILE_WIDTH: number): TilesRaDecList2 | null {\n\n\n\n        const healpix = HiPSHelper.getHelpixBypxAngSize(pixelAngSize, TILE_WIDTH)\n\n        // let tilesRaDecList2 = new TilesRaDecList2(healpix.order)\n        let tilesRaDecList2 = new TilesRaDecList2()\n\n\n        const ptg = new Pointing(null, false, center.getSpherical().thetaRad, center.getSpherical().phiRad);\n        const radius_rad = degToRad(radiusDeg);\n\n        // ??? with fact 8 the original Java code starts returning the the ptg pixel. with my JS porting only from fact 16\n        const rangeset: RangeSet = healpix.queryDiscInclusive(ptg, radius_rad, 4); // <= check it \n\n        // TODO try to replace tileslist with FITSList!!!\n        // const tileslist: Array<number> = [];\n        for (let p = 0; p < rangeset.r.length; p++) {\n\n            // if (!tileslist.includes(rangeset.r[p]) && rangeset.r[p] != 0) {\n            //     tileslist.push(rangeset.r[p]);\n            // }\n            if (!tilesRaDecList2.getTilesList().includes(rangeset.r[p]) && rangeset.r[p] != 0) {\n                tilesRaDecList2.addTileNumber(rangeset.r[p])\n                // tileslist.push(rangeset.r[p]);\n            }\n\n        }\n\n        const cpix = healpix.ang2pix(ptg);\n        // if (!tileslist.includes(cpix)) {\n        //     tileslist.push(cpix);\n        // }\n        if (!tilesRaDecList2.getTilesList().includes(cpix)) {\n            tilesRaDecList2.getTilesList().push(cpix);\n        }\n\n\n        // let raDecList: Array<[number, number]> = []\n        let minra = center.getAstro().raDeg - radiusDeg;\n        let maxra = center.getAstro().raDeg + radiusDeg;\n        let mindec = center.getAstro().decDeg - radiusDeg;\n        let maxdec = center.getAstro().decDeg + radiusDeg;\n\n        tilesRaDecList2.getTilesList().forEach((tileno: number) => {\n            // tileslist.forEach((tileno: number) => {\n\n            for (let j = 0; j < TILE_WIDTH; j++) {\n                for (let i = 0; i < TILE_WIDTH; i++) {\n\n                    const point: Point | null = HiPSProj.pix2world(i, j, tileno, healpix, TILE_WIDTH);\n\n                    if (point == null) continue\n                    if (point.getAstro().raDeg < minra || point.getAstro().raDeg > maxra ||\n                        point.getAstro().decDeg < mindec || point.getAstro().decDeg > maxdec) {\n                        continue;\n                    }\n                    tilesRaDecList2.addImagePixel(new ImagePixel(point.getAstro().raDeg, point.getAstro().decDeg, tileno))\n                    // raDecList.push([point.getAstro().raDeg, point.getAstro().decDeg]);\n                }\n            }\n        })\n\n        // const tilesRaDecList = new TilesRaDecList(raDecList, tileslist)\n        // return tilesRaDecList\n        return tilesRaDecList2\n    }\n\n    static pix2world(i: number, j: number, tileno: number, healpix: Healpix, TILE_WIDTH: number): Point | null {\n\n        let p = null\n        if (healpix) {\n            const xyGridProj = HiPSIntermediateProj.setupByTile(tileno, healpix);\n            let xy = HiPSIntermediateProj.pix2intermediate(i, j, xyGridProj, TILE_WIDTH, TILE_WIDTH);\n            // TODO CHECK BELOW before it was only which is supposed to be wrong since intermediate2world returns SphericalCoords, not AstroCoords\n            /**  \n            let raDecDeg = HiPSHelper.intermediate2world(xy[0], xy[1]);\n            if (raDecDeg[0] > 360){\n                raDecDeg[0] -= 360;\n            }\n            return raDecDeg;\n            */\n            p = HiPSIntermediateProj.intermediate2world(xy[0], xy[1]);\n            // if (p.spherical.phiDeg > 360){\n            // \tsc.phiDeg -= 360;\n            // }\n        } else {\n            throw new Error(\"Healpix not set.\"); // or handle the issue as per your use case\n        }\n\n\n        return p;\n    }\n\n    // static getFITSFiles(inputValues: Uint8Array, tilesRaDecList: TilesRaDecList, fitsHeaderParams: FITSHeaderManager, pixelAngSize: number, TILE_WIDTH?: number): FITSList {\n    static getFITSFiles(tilesRaDecList: TilesRaDecList2, fitsHeaderParams: FITSHeaderManager, pixelAngSize: number, TILE_WIDTH: number): FITSList {\n\n        const healpix = HiPSHelper.getHelpixBypxAngSize(pixelAngSize, TILE_WIDTH)\n\n        let fitsList = new FITSList()\n\n        tilesRaDecList.getTilesList().forEach((tileno: number) => {\n            let hipsProp = new HiPSProperties()\n            hipsProp.addItem(HiPSProperties.ORDER, healpix.order)\n            hipsProp.addItem(HiPSProperties.TILE_WIDTH, TILE_WIDTH)\n            const hipsFits = new HiPSFITS(null, tileno, hipsProp)\n\n            const imagePixelsByTilesNo = tilesRaDecList.getImagePixelsByTile(tileno)\n\n            hipsFits.initFromUint8Array(imagePixelsByTilesNo, fitsHeaderParams, TILE_WIDTH)\n            fitsList.addFITS(hipsFits)\n        })\n        return fitsList\n\n    }\n\n    static async world2pix(radeclist: TilesRaDecList2, hipsOrder: number, isGalactic: boolean, TILE_WIDTH: number, baseHiPSURL: string): Promise<TilesRaDecList2 | null> {\n\n        const healpix = HiPSHelper.getHelpixByOrder(hipsOrder)\n\n        let tileno: number;\n        let prevTileno: number | null = null;\n        /* if HiPS in galactic => convert the full list of (RA, Dec) to Galactic  (l, b) */\n        if (isGalactic) {\n            HiPSProj.convertToGalactic(radeclist);\n        }\n        let xyGridProj: HEALPixXYSpace | null = null\n\n\n\n        radeclist.getImagePixelList().forEach((imgpx) => {\n            const ra = imgpx.getRADeg()\n            const dec = imgpx.getDecDeg()\n\n            const p = new Point(CoordsType.ASTRO, NumberType.DEGREES, ra, dec);\n            const ptg = new Pointing(null, false, p.getSpherical().thetaRad, p.getSpherical().phiRad);\n\n            tileno = healpix.ang2pix(ptg);\n\n            if (prevTileno !== tileno || prevTileno == null) {\n                xyGridProj = HiPSIntermediateProj.setupByTile(tileno, healpix);\n                prevTileno = tileno;\n            }\n            if (xyGridProj) {\n                const xy = HiPSIntermediateProj.world2intermediate(p.getAstro());\n                const ij = HiPSIntermediateProj.intermediate2pix(xy[0], xy[1], xyGridProj, TILE_WIDTH);\n                imgpx.setij(ij[0], ij[1])\n                imgpx.setTileNumber(tileno)\n            }\n            radeclist.addTileNumber(tileno)\n        });\n        let result = await HiPSProj.getPixelValues(radeclist, baseHiPSURL, hipsOrder)\n        return result\n    }\n\n    // TODO move this to Utils.js\n    static convertToGalactic(radeclist: TilesRaDecList2) {\n        // let finalradeclist: number[][] = [];\n        const deg2rad = Math.PI / 180\n        const rad2deg = 180 / Math.PI\n        const l_NCP = deg2rad * 122.930\n        const d_NGP = deg2rad * 27.1284\n        const a_NGP = deg2rad * 192.8595\n        radeclist.getImagePixelList().forEach( (imgpx) => {\n            const ra = imgpx.getRADeg()\n            const dec = imgpx.getDecDeg()\n            const ra_rad = deg2rad * ra\n            const dec_rad = deg2rad * dec\n            // sin(b)\n            const sin_b = Math.sin(d_NGP) * Math.sin(dec_rad) +\n                Math.cos(d_NGP) * Math.cos(dec_rad) * Math.cos(ra_rad - a_NGP);\n            const b = Math.asin(sin_b)\n            const b_deg = b * rad2deg\n\n            // l_NCP - l\n            const lNCP_minus_l = Math.atan((Math.cos(dec_rad) * Math.sin(ra_rad - a_NGP)) /\n                (Math.sin(dec_rad) * Math.cos(d_NGP) - Math.cos(dec_rad) * Math.sin(d_NGP) * Math.cos(ra_rad - a_NGP)));\n            const l = l_NCP - lNCP_minus_l\n            const l_deg = l * rad2deg\n            imgpx.setRADecDeg(l_deg, b_deg)\n            // finalradeclist.push([l_deg, b_deg])\n        });\n        // return finalradeclist;\n    }\n\n    static async getPixelValues(raDecList: TilesRaDecList2, baseHiPSURL: string, hipsOrder: number): Promise<TilesRaDecList2 | null> {\n\n        const tilesset = raDecList.getTilesList()\n        let promises = [];\n        \n        for (let hipstileno of tilesset) {\n\n            const dir = Math.floor(hipstileno / 10000) * 10000; // as per HiPS recomendation REC-HIPS-1.0-20170519 \n            const fitsurl = baseHiPSURL + \"/Norder\" + hipsOrder + \"/Dir\" + dir + \"/Npix\" + hipstileno + \".fits\";\n            console.log(`Identified source file ${fitsurl}`)\n\n            // TODO change the code below to used HiPSFITS and FITSList instead!\n            promises.push(FITSParser.loadFITS(fitsurl).then((fitsParsed) => {\n\n                if (fitsParsed) {\n\n                    const bitpix = Number(fitsParsed.header.findById(\"BITPIX\")?.value)\n                    const naxis1 = Number(fitsParsed.header.findById(\"NAXIS1\")?.value)\n                    const naxis2 = Number(fitsParsed.header.findById(\"NAXIS2\")?.value)\n                    if (!bitpix || !naxis1 || !naxis2) {\n                        console.error(`bitpix: ${bitpix}, naxis1: ${naxis1}, naxis2: ${naxis2} for fits file ${fitsurl}`)\n                        return\n                    }\n\n                    const bytesXelem = Math.abs(bitpix / 8);\n\n                    raDecList.getImagePixelsByTile(hipstileno).forEach((imgpx) => {\n                        const valueBytes = new Uint8Array(bytesXelem);\n                        for (let b = 0; b < bytesXelem; b++) {\n                            valueBytes[b] = fitsParsed.data[imgpx.getj()][imgpx.geti() * bytesXelem + b];\n                        }\n                        imgpx.setValue(valueBytes, bitpix);\n                        raDecList.setMinMaxValue(imgpx.getValue())\n                    })\n                }\n            }));\n        }\n        await Promise.all(promises);\n        return raDecList\n    }\n\n}","import { readFile } from \"node:fs/promises\";\nimport { HiPSProperties } from \"./HiPSProperties.js\";\n\n\nexport class HiPSPropManager {\n\n    static async parsePropertyFile(baseURL:string): Promise<HiPSProperties> {\n        let hipsPropText = \"\"\n        if (baseURL.includes(\"http\")) { // HiPS from web\n            hipsPropText = await HiPSPropManager.getPorpertyFromWeb(baseURL)\n        } else { // local HiPS\n            hipsPropText = await HiPSPropManager.getPorpertyFromFS(baseURL)\n        }\n        const hipsProp:HiPSProperties = HiPSPropManager.parseHiPSPropertiesBody(hipsPropText)\n        return hipsProp\n    }\n\n    private static async getPorpertyFromWeb(baseHiPSPath: string): Promise<string> {\n        const response = await fetch(baseHiPSPath + \"/properties\")\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`)\n        } else {\n            const propFile = await response.text()\n            return propFile\n        }\n        // let propFile: string\n        // if (response instanceof ArrayBuffer) {\n        //     const textDecoder = new TextDecoder(\"iso-8859-1\")\n        //     propFile = textDecoder.decode(new Uint8Array(response))\n        // } else {\n        //     propFile = response.toString()\n        // }\n        // return propFile\n    }\n\n    private static async getPorpertyFromFS(baseHiPSPath: string): Promise<string> {\n\n        const propPath = baseHiPSPath + \"/properties\"\n        const rawData: Buffer = await readFile(propPath)\n        const uint8 = new Uint8Array(rawData)\n        const textDecoder = new TextDecoder('ascii')\n        const propFile = textDecoder.decode(uint8);\n\n        return propFile\n    }\n\n    private static parseHiPSPropertiesBody(hipsPropText: string): HiPSProperties {\n        let hipsProp = new HiPSProperties()\n        const txtArr = hipsPropText.split('\\n');\n\n        for (let line of txtArr) {\n            if (!line.includes(\"=\")) {\n                continue;\n            }\n\n            const tokens = line.split(\"=\");\n            if (tokens[1] === undefined) {\n                continue;\n            }\n            const key = tokens[0].trim()\n            const val = tokens[1].trim()\n            let value: string|number = val\n            if (key == HiPSProperties.ORDER || key == HiPSProperties.TILE_WIDTH || key == HiPSProperties.SCALE || key == HiPSProperties.BITPIX) {\n                value = parseInt(val)\n            }\n            hipsProp.addItem(key, value)\n        }\n        return hipsProp\n    }\n}","export class HiPSProperties {\n\n    static TILE_WIDTH:string = \"hips_tile_width\"\n    static FRAME:string = \"hips_frame\"\n    static ORDER:string = \"hips_order\"\n    static GALACTIC:string = \"galactic\"\n    static SCALE:string = \"hips_pixel_scale\"\n    static BITPIX:string = \"hips_pixel_bitpix\"\n\n\n    private itemMap: Map<string, any> = new Map<string, any>()\n\n    constructor(){}\n\n    addItem(key:string, value:any) {\n        this.itemMap.set(key, value)\n    }\n\n    getItem(key: string){\n        return this.itemMap.get(key)\n    }\n\n    isGalactic(){\n        return this.itemMap.get(HiPSProperties.FRAME) == HiPSProperties.GALACTIC\n    }\n\n}","import { ParseUtils } from \"jsfitsio\"\n\nexport class ImagePixel {\n    i: number\n    j: number\n    ra: number\n    dec: number\n    tileno: number | undefined\n    uint8value: Uint8Array | null = null\n    value: number | null = null\n\n    constructor(i: number, j: number, tileno: number | undefined);\n\n    constructor(ra: number, dec: number, tileno: number | undefined);\n\n    constructor(a: number, b: number, tileno: number | undefined) {\n        \n        this.tileno = tileno;\n\n        // Heuristic: if `a` and `b` are integers, treat them as `i` and `j`\n        if (Number.isInteger(a) && Number.isInteger(b)) {\n            this.i = a;\n            this.j = b;\n            this.ra = NaN;\n            this.dec = NaN;\n        } else {\n            this.ra = a;\n            this.dec = b;\n            this.i = -1;\n            this.j = -1;\n        }\n        \n    }\n\n    geti(){\n        return this.i\n    }\n\n    getj(){\n        return this.j\n    }\n    getRADeg(){\n        return this.ra\n    }\n\n    getDecDeg(){\n        return this.dec\n    }\n\n    getUint8Value(){\n        return this.uint8value\n    }\n\n    getValue() {\n        return this.value\n    }\n\n    setValue(value: Uint8Array, bitpix: number){\n        if (this.uint8value == undefined) {\n            const bytesXelem = Math.abs(bitpix / 8);\n            this.uint8value = new Uint8Array(bytesXelem)\n        }\n        this.uint8value = value\n        this.value = ParseUtils.extractPixelValue(0, value, bitpix)\n    }\n\n    setTileNumber(tileno: number) {\n        this.tileno = tileno\n    }\n\n    setij(i:number, j:number){\n        this.i = i\n        this.j = j\n    }\n\n    setRADecDeg(ra:number, dec:number){\n        this.ra = ra\n        this.dec = dec\n    }\n\n}\n","import { MinMaxValue } from \"../MinMaxValue.js\"\nimport { RADecMinMaxCentral } from \"../RADecMinMaxCentral.js\"\nimport { ImagePixel } from \"./ImagePixel.js\"\n\nexport class TilesRaDecList2 {\n\n    // hipsOrder: number\n    tileList: Array<number>\n    imagePixelList: ImagePixel[]\n    minPixelValue: number | null = null\n    maxPixelValue: number | null = null\n\n\n    // constructor(hipsOrder: number) {\n    //     this.hipsOrder = hipsOrder\n    constructor() {\n        this.tileList = []\n        this.imagePixelList = new Array<ImagePixel>()\n\n    }\n\n    findImagePixel(i: number, j: number) {\n        return this.imagePixelList.find(p => p.i === i && p.j === j) || null;\n    }\n\n    getImagePixelsByTile(tileno: number): ImagePixel[] {\n        return this.imagePixelList.filter(p => p.tileno === tileno);\n    }\n\n    getImagePixelList() {\n        return this.imagePixelList\n    }\n\n    getTilesList() {\n        return this.tileList\n    }\n\n    addImagePixel(imgpx: ImagePixel) {\n        this.imagePixelList.push(imgpx)\n    }\n\n    addTileNumber(tileno: number) {\n        if (!this.tileList.includes(tileno)) {\n            this.tileList.push(tileno)\n        }\n    }\n\n\n    computeRADecMinMaxCentral(): RADecMinMaxCentral | null {\n        if (this.imagePixelList.length === 0) return null;\n\n        // Single pass, skip non-finite values\n        let minRA = Infinity, maxRA = -Infinity;\n        let minDec = Infinity, maxDec = -Infinity;\n\n        for (const p of this.imagePixelList) {\n            if (Number.isFinite(p.ra)) {\n                if (p.ra < minRA) minRA = p.ra;\n                if (p.ra > maxRA) maxRA = p.ra;\n            }\n            if (Number.isFinite(p.dec)) {\n                if (p.dec < minDec) minDec = p.dec;\n                if (p.dec > maxDec) maxDec = p.dec;\n            }\n        }\n\n        // If all values were non-finite, bail out\n        if (!Number.isFinite(minRA) || !Number.isFinite(maxRA) ||\n            !Number.isFinite(minDec) || !Number.isFinite(maxDec)) {\n            return null;\n        }\n\n        const cRA = minRA + (maxRA - minRA) / 2;\n        const cDec = minDec + (maxDec - minDec) / 2;\n\n        return new RADecMinMaxCentral(cRA, cDec, minRA, minDec, maxRA, maxDec);\n    }\n\n    setMinMaxValue(value: number | null) {\n        if (!value) return\n\n        if (!this.minPixelValue) {\n            this.minPixelValue = value\n        } else if (value < this.minPixelValue) {\n            this.minPixelValue = value\n        }\n\n        if (!this.maxPixelValue) {\n            this.maxPixelValue = value\n        } else if (value > this.minPixelValue) {\n            this.maxPixelValue = value\n        }\n    }\n\n    getMinMaxValues() {\n        if (this.minPixelValue && this.maxPixelValue) {\n            return new MinMaxValue(this.minPixelValue, this.maxPixelValue)\n        }\n        return null\n\n    }\n\n}\n","/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n * \n * @link   github https://github.com/fab77/wcslight\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n\n\n\nimport { FITSParser, FITSHeaderManager, FITSHeaderItem, FITSParsed, ParseUtils } from 'jsfitsio';\n\n\nimport { AbstractProjection } from '../AbstractProjection.js';\nimport { Point } from '../../model/Point.js';\nimport { CoordsType } from '../../model/CoordsType.js';\nimport { NumberType } from '../../model/NumberType.js';\nimport { TilesRaDecList2 } from '../hips/TilesRaDecList2.js';\nimport { ImagePixel } from '../hips/ImagePixel.js';\nimport { FITS } from '../../model/FITS.js';\n// import { HiPSProp } from '../hips/HiPSProp.js';\n\n\nexport class MercatorProjection extends AbstractProjection {\n\n    minra!: number;\n    mindec!: number;\n    naxis1!: number;\n    naxis2!: number;\n    bitpix!: number\n\n    fitsheader: FITSHeaderManager;\n    pxvalues: Array<Uint8Array>;\n\n    CTYPE1: string = \"'RA---CAR'\";\n    CTYPE2: string = \"'DEC--CAR'\";\n    craDeg!: number;\n    cdecDeg!: number;\n\n    pxsize!: number;\n    pxsize1!: number;\n    pxsize2!: number;\n\n    // _minphysicalval!: number;\n    // _maxphysicalval!: number;\n    _wcsname: string;\n\n    constructor() {\n        super();\n        this._wcsname = \"MER\"; // TODO check WCS standard and create ENUM\n        this.pxvalues = new Array<Uint8Array>();\n        this.fitsheader = new FITSHeaderManager();\n    }\n\n\n    async initFromFile(infile: string): Promise<FITSParsed> {\n\n        const fits = await FITSParser.loadFITS(infile);\n        if (!fits) {\n            console.error(\"FITS is null\")\n            throw new Error(\"FITS is null\")\n        }\n\n        this.pxvalues = fits.data;\n        this.fitsheader = fits.header;\n        this.naxis1 = Number(fits.header.findById(\"NAXIS1\")?.value)\n        this.naxis2 = Number(fits.header.findById(\"NAXIS2\")?.value)\n\n        this.bitpix = fits.header.findById(\"BITPIX\")?.value as number;\n        this.craDeg = fits.header.findById(\"CRVAL1\")?.value as number;\n        this.cdecDeg = fits.header.findById(\"CRVAL2\")?.value as number;\n\n        const pxsize1 = this.fitsheader.findById(\"CDELT1\")?.value as number;\n        const pxsize2 = this.fitsheader.findById(\"CDELT2\")?.value as number;\n        if (pxsize1 !== pxsize2 || pxsize1 === undefined || pxsize2 === undefined) {\n            throw new Error(\"pxsize1 is not equal to pxsize2\")\n        }\n        this.pxsize = pxsize1;\n\n        this.minra = this.craDeg - this.pxsize * this.naxis1 / 2;\n        if (this.minra < 0) {\n            this.minra += 360;\n        }\n        // this._mindec = this._cdecDeg - this._pxsize2 * this._naxis2 / 2;\n        this.mindec = this.cdecDeg - this.pxsize * this.naxis2 / 2;\n\n        return fits;\n\n    }\n\n    getBytePerValue(): number {\n        return Math.abs(this.bitpix / 8);\n    }\n\n\n    extractPhysicalValues(fits: FITSParsed): number[][] {\n\n        const bzero = Number(fits.header.findById(\"BZERO\")?.value);\n        const bscale = Number(fits.header.findById(\"BSCALE\")?.value);\n        const naxis1 = Number(fits.header.findById(\"NAXIS1\")?.value);\n        const naxis2 = Number(fits.header.findById(\"NAXIS2\")?.value);\n        const bitpix = Number(fits.header.findById(\"BITPIX\")?.value);\n        const bytesXelem = Math.abs(bitpix / 8);\n\n        let physicalvalues: number[][] = new Array<number[]>(naxis2);\n\n        for (let n2 = 0; n2 < naxis2; n2++) {\n            physicalvalues[n2] = new Array<number>(naxis1);\n            for (let n1 = 0; n1 < naxis1; n1++) {\n                const pixval = ParseUtils.extractPixelValue(0, fits.data[n2].slice(n1 * bytesXelem, (n1 + 1) * bytesXelem), bitpix);\n                if (pixval) {\n                    let physicalVal = bzero + bscale * pixval;\n                    physicalvalues[n2][n1] = physicalVal;\n                }\n\n            }\n        }\n        return physicalvalues;\n    }\n\n    // computeHeader(pxsize: number, bitpix: number, scale: number = 1, zero: number = 0, blank: number = 0): FITSHeaderManager{\n    //     const header = new FITSHeaderManager()\n\n    //     header.insert(new FITSHeaderItem(\"SIMPLE\", \"'T'\", \"\"));\n    //     header.insert(new FITSHeaderItem(\"BITPIX\", bitpix, \"\"));\n    //     header.insert(new FITSHeaderItem(\"NAXIS\", 2, \"\"));\n    //     header.insert(new FITSHeaderItem(\"NAXIS1\", this.naxis1, \"\"));\n    //     header.insert(new FITSHeaderItem(\"NAXIS2\", this.naxis2, \"\"));\n\n    //     header.insert(new FITSHeaderItem(\"BLANK\", blank, \"\"));\n\n    //     header.insert(new FITSHeaderItem(\"BSCALE\", scale, \"\"));\n\n    //     header.insert(new FITSHeaderItem(\"BZERO\", zero, \"\"));\n\n    //     header.insert(new FITSHeaderItem(\"CTYPE1\", this.CTYPE1, \"\"));\n    //     header.insert(new FITSHeaderItem(\"CTYPE2\", this.CTYPE2, \"\"));\n\n    //     header.insert(new FITSHeaderItem(\"CDELT1\", pxsize, \"\")); // ??? Pixel spacing along axis 1 ???\n    //     header.insert(new FITSHeaderItem(\"CDELT2\", pxsize, \"\")); // ??? Pixel spacing along axis 2 ???\n    //     header.insert(new FITSHeaderItem(\"CRPIX1\", this.naxis1 / 2, \"\")); // central/reference pixel i along naxis1\n    //     header.insert(new FITSHeaderItem(\"CRPIX2\", this.naxis2 / 2, \"\")); // central/reference pixel j along naxis2\n    //     header.insert(new FITSHeaderItem(\"CRVAL1\", this.craDeg, \"\")); // central/reference pixel RA\n    //     header.insert(new FITSHeaderItem(\"CRVAL2\", this.cdecDeg, \"\")); // central/reference pixel Dec\n\n    //     let min = zero + scale * this._minphysicalval;\n    //     let max = zero + scale * this._maxphysicalval;\n    //     header.insert(new FITSHeaderItem(\"DATAMIN\", min, \"\")); // min data value\n    //     header.insert(new FITSHeaderItem(\"DATAMAX\", max, \"\")); // max data value\n\n\n    //     header.insert(new FITSHeaderItem(\"ORIGIN\", \"'WCSLight v.0.x'\", \"\"));\n    //     header.insert(new FITSHeaderItem(\"COMMENT\", \"\", \"'WCSLight v0.x developed by F.Giordano and Y.Ascasibar'\"));\n    //     header.insert(new FITSHeaderItem(\"END\", \"\", \"\"));\n\n    //     return this.fitsheader;\n\n\n    // }\n\n    // TODO CHECK: there are 4 header related methods!!! prepareHeader, prepareFITSHeader, getCommonFitsHeaderParams and getFITSHeader\n    // static prepareHeader(radius: number, pixelAngSize: number,\n    //     bitpix: number, bscale?: number, bzero?: number\n    // ) {\n    //     if (!bscale) bscale = 1\n    //     if (!bzero) bzero = 0\n    //     const naxis1 = Math.ceil(2 * radius / pixelAngSize);\n    //     const naxis2 = naxis1\n    //     if (!bitpix) {\n    //         throw new Error(\"Bitpix not defined\")\n    //     }\n    // }\n\n\n    prepareHeader(pixelAngSize: number,\n        BITPIX: number,\n        TILE_WIDTH: number,\n        BLANK: number, BZERO: number, BSCALE: number,\n        cRA: number, cDec: number,\n        minValue: number, maxValue: number): FITSHeaderManager {\n\n        const fitsheader = new FITSHeaderManager();\n\n        fitsheader.insert(new FITSHeaderItem(\"SIMPLE\", \"T\", \"\"));\n        fitsheader.insert(new FITSHeaderItem(\"NAXIS1\", TILE_WIDTH, \"\"));\n        fitsheader.insert(new FITSHeaderItem(\"NAXIS2\", TILE_WIDTH, \"\"));\n        fitsheader.insert(new FITSHeaderItem(\"NAXIS\", 2, \"\"));\n        fitsheader.insert(new FITSHeaderItem(\"BITPIX\", BITPIX, \"\"));\n        fitsheader.insert(new FITSHeaderItem(\"BLANK\", BLANK, \"\"));\n        fitsheader.insert(new FITSHeaderItem(\"BSCALE\", BSCALE, \"\"));\n        fitsheader.insert(new FITSHeaderItem(\"BZERO\", BZERO, \"\"));\n\n        fitsheader.insert(new FITSHeaderItem(\"CTYPE1\", this.CTYPE1, \"\"));\n        fitsheader.insert(new FITSHeaderItem(\"CTYPE2\", this.CTYPE2, \"\"));\n\n        fitsheader.insert(new FITSHeaderItem(\"CDELT1\", pixelAngSize, \"\")); // ??? Pixel spacing along axis 1 ???\n        fitsheader.insert(new FITSHeaderItem(\"CDELT2\", pixelAngSize, \"\")); // ??? Pixel spacing along axis 2 ???\n        fitsheader.insert(new FITSHeaderItem(\"CRPIX1\", TILE_WIDTH / 2, \"\")); // central/reference pixel i along naxis1\n        fitsheader.insert(new FITSHeaderItem(\"CRPIX2\", TILE_WIDTH / 2, \"\")); // central/reference pixel j along naxis2\n\n        fitsheader.insert(new FITSHeaderItem(\"CRVAL1\", cRA, \"\")); // central/reference pixel RA\n        fitsheader.insert(new FITSHeaderItem(\"CRVAL2\", cDec, \"\")); // central/reference pixel Dec\n\n        const min = BZERO + BSCALE * minValue;\n        const max = BZERO + BSCALE * maxValue;\n        fitsheader.insert(new FITSHeaderItem(\"DATAMIN\", min, \"\")); // min data value\n        fitsheader.insert(new FITSHeaderItem(\"DATAMAX\", max, \"\")); // max data value\n\n\n        fitsheader.insert(new FITSHeaderItem(\"ORIGIN\", \"'WCSLight v.0.x'\", \"\"));\n        fitsheader.insert(new FITSHeaderItem(\"COMMENT\", \"\", \"'WCSLight v0.x developed by F.Giordano and Y.Ascasibar'\"));\n        fitsheader.insert(new FITSHeaderItem(\"END\", \"\", \"\"));\n\n        return fitsheader;\n\n    }\n\n\n    // TODO CHECK: there are 4 header related methods!!! prepareHeader, prepareFITSHeader, getCommonFitsHeaderParams and getFITSHeader\n    // prepareFITSHeader(fitsHeaderParams: FITSHeaderManager): FITSHeaderManager {\n\n    //     this.fitsheader = new FITSHeaderManager();\n\n    //     this.fitsheader.insert(new FITSHeaderItem(\"NAXIS1\", this.naxis1, \"\"));\n    //     this.fitsheader.insert(new FITSHeaderItem(\"NAXIS2\", this.naxis2, \"\"));\n    //     this.fitsheader.insert(new FITSHeaderItem(\"NAXIS\", 2, \"\"));\n\n    //     const bitpix = Number(fitsHeaderParams.findById(\"BITPIX\")?.value)\n    //     this.fitsheader.insert(new FITSHeaderItem(\"BITPIX\", bitpix, \"\"));\n\n    //     const simple = Number(fitsHeaderParams.findById(\"SIMPLE\")?.value)\n    //     this.fitsheader.insert(new FITSHeaderItem(\"SIMPLE\", simple, \"\"));\n\n    //     const blank = Number(fitsHeaderParams.findById(\"BLANK\")?.value)\n    //     if (blank) {\n    //         this.fitsheader.insert(new FITSHeaderItem(\"BLANK\", blank, \"\"));\n    //     }\n\n    //     let bscale = Number(fitsHeaderParams.findById(\"BSCALE\")?.value)\n    //     if (!bscale) {\n    //         bscale = 1.0;\n    //     }\n    //     this.fitsheader.insert(new FITSHeaderItem(\"BSCALE\", bscale, \"\"));\n\n    //     let bzero = Number(fitsHeaderParams.findById(\"BZERO\")?.value)\n    //     if (!bzero) {\n    //         bzero = 0.0;\n    //     }\n    //     this.fitsheader.insert(new FITSHeaderItem(\"BZERO\", bzero, \"\"));\n\n    //     this.fitsheader.insert(new FITSHeaderItem(\"CTYPE1\", this.CTYPE1, \"\"));\n    //     this.fitsheader.insert(new FITSHeaderItem(\"CTYPE2\", this.CTYPE2, \"\"));\n\n    //     this.fitsheader.insert(new FITSHeaderItem(\"CDELT1\", this.pxsize, \"\")); // ??? Pixel spacing along axis 1 ???\n    //     this.fitsheader.insert(new FITSHeaderItem(\"CDELT2\", this.pxsize, \"\")); // ??? Pixel spacing along axis 2 ???\n    //     this.fitsheader.insert(new FITSHeaderItem(\"CRPIX1\", this.naxis1 / 2, \"\")); // central/reference pixel i along naxis1\n    //     this.fitsheader.insert(new FITSHeaderItem(\"CRPIX2\", this.naxis2 / 2, \"\")); // central/reference pixel j along naxis2\n    //     this.fitsheader.insert(new FITSHeaderItem(\"CRVAL1\", this.craDeg, \"\")); // central/reference pixel RA\n    //     this.fitsheader.insert(new FITSHeaderItem(\"CRVAL2\", this.cdecDeg, \"\")); // central/reference pixel Dec\n\n    //     let min = bzero + bscale * this._minphysicalval;\n    //     let max = bzero + bscale * this._maxphysicalval;\n    //     this.fitsheader.insert(new FITSHeaderItem(\"DATAMIN\", min, \"\")); // min data value\n    //     this.fitsheader.insert(new FITSHeaderItem(\"DATAMAX\", max, \"\")); // max data value\n\n\n    //     this.fitsheader.insert(new FITSHeaderItem(\"ORIGIN\", \"'WCSLight v.0.x'\", \"\"));\n    //     this.fitsheader.insert(new FITSHeaderItem(\"COMMENT\", \"\", \"'WCSLight v0.x developed by F.Giordano and Y.Ascasibar'\"));\n    //     this.fitsheader.insert(new FITSHeaderItem(\"END\", \"\", \"\"));\n\n    //     return this.fitsheader;\n\n    // }\n    // TODO CHECK: there are 4 header related methods!!! prepareHeader, prepareFITSHeader, getCommonFitsHeaderParams and getFITSHeader\n    getFITSHeader(): FITSHeaderManager {\n        return this.fitsheader;\n    }\n    // TODO CHECK: there are 4 header related methods!!! prepareHeader, prepareFITSHeader, getCommonFitsHeaderParams and getFITSHeader\n    getCommonFitsHeaderParams(): FITSHeaderManager {\n        let header = new FITSHeaderManager();\n        for (const item of this.fitsheader.getItems()) {\n            const key = item.key\n            if ([\"SIMPLE\", \"BITPIX\", \"BSCALE\", \"BZERO\", \"BLANK\", \"ORDER\",].includes(key)) {\n                const value = item.value\n                header.insert(new FITSHeaderItem(key, value, \"\"));\n            }\n        }\n        return header;\n    }\n\n\n\n\n\n    // computeSquaredNaxes(d: number, ps: number): void {\n    //     this._naxis1 = Math.ceil(d / ps);\n    //     this._naxis2 = this._naxis1;\n    //     this._pxsize = ps;\n    // }\n\n    computeNaxisWidth(radius: number, pxsize: number): number {\n        return Math.ceil(2 * radius / pxsize);\n    }\n\n    getImageRADecList(center: Point, radius: number, pxsize: number, naxisWidth: number): TilesRaDecList2 {\n\n\n        const naxis1 = naxisWidth\n        const naxis2 = naxis1;\n\n        let minra = center.getAstro().raDeg - radius;\n        if (minra < 0) {\n            minra += 360;\n        }\n        const mindec = center.getAstro().decDeg - radius;\n\n        const tilesRaDecList = new TilesRaDecList2()\n\n        // let radeclist: Array<[number, number]> = new Array<[number, number]>();\n\n        // let centralRa, centralDec\n        for (let d = 0; d < naxis2; d++) {\n            for (let r = 0; r < naxis1; r++) {\n                tilesRaDecList.addImagePixel(new ImagePixel(minra + (r * pxsize), mindec + (d * pxsize), undefined))\n                // radeclist.push([minra + (r * pxsize), mindec + (d * pxsize)]);\n            }\n        }\n\n        const centralImgpx = tilesRaDecList.getImagePixelList().length / 2 - 1\n        // let cidx = (naxis2 / 2) * naxis1 + naxis1 / 2;\n        // if (naxis1 % 2 != 0) {\n        //     cidx = Math.floor(radeclist.length / 2);\n        // }\n        // this._craDeg = radeclist[cidx][0];\n        // this._cdecDeg = radeclist[cidx][1];\n\n        // return radeclist\n        return tilesRaDecList\n\n    }\n\n\n\n    /** TODO !!! check and handle RA passing through 360-0 */\n    pix2world(i: number, j: number): Point {\n\n        let ra: number;\n        let dec: number;\n        // ra = i * this._stepra + this._minra;\n        // dec = j * this._stepdec + this._mindec;\n        ra = i * this.pxsize + this.minra;\n        dec = j * this.pxsize + this.mindec;\n        let p = new Point(CoordsType.ASTRO, NumberType.DEGREES, ra, dec);\n        return p;\n        // return [ra, dec];\n\n    }\n\n    setPixelValues(raDecList: TilesRaDecList2, header: FITSHeaderManager): FITS {\n\n        const BITPIX = header.findById(\"BITPIX\")?.value as number;\n        if (!Number.isFinite(BITPIX)) {\n            throw new Error(\"BITPIX not found or invalid in header\");\n        }\n        const bytesPerElem = Math.abs(BITPIX) / 8;\n\n        const width = header.findById(\"NAXIS1\")?.value as number;\n        const height = (header.findById(\"NAXIS2\")?.value as number) ?? width; // fallback if square\n        if (!Number.isFinite(width) || width <= 0) throw new Error(\"NAXIS1 not found or invalid\");\n        if (!Number.isFinite(height) || height <= 0) throw new Error(\"NAXIS2 not found or invalid\");\n\n        const pixels = raDecList.getImagePixelList();\n        if (pixels.length !== width * height) {\n            throw new Error(`Pixel count mismatch: got ${pixels.length}, expected ${width * height}`);\n        }\n\n        // Map<rowIndex, Uint8Array[]>, each row has length = width\n        const pxvalues = new Map<number, Uint8Array[]>();\n        for (let r = 0; r < height; r++) {\n            pxvalues.set(r, new Array<Uint8Array>(width));\n        }\n\n        // Fill in row-major order: for each linear index, compute (row, col)\n        for (let idx = 0; idx < pixels.length; idx++) {\n            const row = Math.floor(idx / width);\n            const col = idx % width;\n\n            const rowArr = pxvalues.get(row)!;\n\n            let u8 = pixels[idx].getUint8Value();\n            if (u8 == null) {\n                // Your pipeline’s ImagePixel.setValue() should have set this already.\n                // Throwing is safer than inventing packing (FITS expects specific endian/precision).\n                throw new Error(`Pixel (${row},${col}) missing Uint8Array for BITPIX=${BITPIX}`);\n            }\n            if (u8.byteLength !== bytesPerElem) {\n                throw new Error(\n                    `Pixel (${row},${col}) byteLength=${u8.byteLength} != expected ${bytesPerElem} (BITPIX=${BITPIX})`\n                );\n            }\n\n            rowArr[col] = u8;\n            // no need to pxvalues.set(row, rowArr); reference already updated\n        }\n\n        return new FITS([header], pxvalues);\n    }\n\n\n\n\n\n    generateFITSFile(pixelAngSize: number,\n        BITPIX: number,\n        TILE_WIDTH: number,\n        BLANK: number, BZERO: number, BSCALE: number,\n        cRA: number, cDec: number,\n        minValue: number, maxValue: number,\n        raDecWithValues: TilesRaDecList2): FITS {\n            \n        const header: FITSHeaderManager = this.prepareHeader(\n            pixelAngSize,\n            BITPIX,\n            TILE_WIDTH,\n            BLANK, BZERO, BSCALE,\n            cRA, cDec,\n            minValue, maxValue)\n        const fits: FITS = this.setPixelValues(raDecWithValues, header)\n        return fits;\n    }\n\n\n    world2pix(raDecList: TilesRaDecList2): TilesRaDecList2 {\n\n        const bytesXvalue = this.getBytePerValue()\n\n        // TODO if I have the this.fitsheader available here, check if I can retrieve this.bitpix, this.pxsize, ... with this.fitsheader\n        // and remove the attributes at object level (with this)\n        const blank = Number(this.fitsheader.findById(\"BLANK\")?.value)\n        const blankBytes = ParseUtils.convertBlankToBytes(blank, bytesXvalue);\n\n        for (let imgPx of raDecList.getImagePixelList()) {\n\n            // console.log(\"raDeclist.getImagePixelList().indexOf(imgPx) \" + raDeclist.getImagePixelList().indexOf(imgPx))\n            const ra = imgPx.getRADeg();\n            const dec = imgPx.getDecDeg();\n\n            const i = Math.floor((ra - this.minra) / this.pxsize);\n            const j = Math.floor((dec - this.mindec) / this.pxsize);\n\n            if (j < 0 || j >= this.naxis2 || i < 0 || i >= this.naxis1) {\n                imgPx.setValue(blankBytes, this.bitpix)\n            } else {\n                const currentValue = this.pxvalues[j].slice(i * bytesXvalue, (i + 1) * bytesXvalue);\n                imgPx.setValue(currentValue, this.bitpix)\n            }\n            raDecList.setMinMaxValue(imgPx.getValue())\n        }\n        return raDecList;\n\n    }\n\n}\n","/* (ignored) */","/* (ignored) */","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { FITSWriter } from \"./FITSWriter.js\";\nimport { ParsePayload } from \"./ParsePayload.js\";\nimport { ParseHeader } from \"./ParseHeader.js\";\nimport { FITSHeaderManager } from \"./model/FITSHeaderManager.js\";\nexport class FITSParser {\n    static loadFITS(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const uint8data = yield FITSParser.getFile(url);\n            if (uint8data === null || uint8data === void 0 ? void 0 : uint8data.byteLength) {\n                const fits = FITSParser.processFits(uint8data);\n                return fits;\n            }\n            return null;\n        });\n    }\n    static processFits(rawdata) {\n        const header = ParseHeader.parse(rawdata);\n        const headerFinalised = ParsePayload.computePhysicalMinAndMax(header, rawdata);\n        if (headerFinalised == null) {\n            return null;\n        }\n        const dataOffset = 2880; // Assuming no additional header blocks\n        const payloadBuffer = new Uint8Array(rawdata.slice(dataOffset));\n        const payloadMatrix = FITSParser.createMatrix(payloadBuffer, header);\n        return {\n            header: headerFinalised,\n            data: payloadMatrix\n        };\n    }\n    static createMatrix(payload, header) {\n        const NAXIS1 = ParseHeader.getFITSItemValue(header, FITSHeaderManager.NAXIS1);\n        if (NAXIS1 === null) {\n            throw new Error(\"NAXIS1 not defined.\");\n        }\n        const NAXIS2 = ParseHeader.getFITSItemValue(header, FITSHeaderManager.NAXIS2);\n        if (NAXIS2 === null) {\n            throw new Error(\"NAXIS2 not defined.\");\n        }\n        const BITPIX = ParseHeader.getFITSItemValue(header, FITSHeaderManager.BITPIX);\n        if (BITPIX === null) {\n            throw new Error(\"BITPIX not defined.\");\n        }\n        const bytesXelem = Math.abs(BITPIX / 8);\n        if (payload.length !== NAXIS1 * NAXIS2 * bytesXelem) {\n            throw new Error(\"Payload size does not match the expected matrix dimensions.\");\n        }\n        // const matrix: Array<Uint8Array> = [];\n        const matrix = [];\n        for (let i = 0; i < NAXIS2; i++) {\n            matrix.push(payload.slice(i * NAXIS1 * bytesXelem, (i + 1) * NAXIS1 * bytesXelem));\n        }\n        return matrix;\n    }\n    static generateFITSForWeb(fitsParsed) {\n        return FITSWriter.typedArrayToURL(fitsParsed);\n    }\n    static saveFITSLocally(fitsParsed, path) {\n        return FITSWriter.writeFITSFile(fitsParsed, path);\n    }\n    static getFile(uri) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!uri.substring(0, 5).toLowerCase().includes(\"http\")) {\n                const p = yield import('./getLocalFile.js');\n                const rawData = yield p.getLocalFile(uri);\n                if (rawData === null || rawData === void 0 ? void 0 : rawData.length) {\n                    const uint8 = new Uint8Array(rawData);\n                    return uint8;\n                }\n                return new Uint8Array(0);\n            }\n            else {\n                const p = yield import('./getFile.js');\n                const rawData = yield p.getFile(uri);\n                if (rawData === null || rawData === void 0 ? void 0 : rawData.byteLength) {\n                    const uint8 = new Uint8Array(rawData);\n                    return uint8;\n                }\n                return new Uint8Array(0);\n            }\n        });\n    }\n}\n// const url = \"http://skies.esac.esa.int/Herschel/normalized/PACS_hips160//Norder8/Dir40000/Npix47180.fits\"\n// FITSParser.loadFITS(url).then((fits) => {\n//   if (fits == null) {\n//     return null\n//   }\n//   const path = \"./fitsTest1.fits\"\n//   console.log(fits.header)\n//   FITSParser.saveFITSLocally(fits, path)\n//   console.log(\"finished\")\n// })\n// // const file = \"/Users/fabriziogiordano/Desktop/PhD/code/new/FITSParser/tests/inputs/empty.fits\"\n// const file = \"/Users/fabriziogiordano/Desktop/PhD/code/new/FITSParser/tests/inputs/Npix43348.fits\"\n// FITSParser.loadFITS(file).then((fits) => {\n//   if (fits == null) {\n//     return null\n//   }\n//   const path = \"./fitsTest2.fits\"\n//   console.log(fits.header)\n//   FITSParser.saveFITSLocally(fits, path)\n//   console.log(\"finished\")\n// })\n//# sourceMappingURL=FITSParser.js.map","// import { FITSHeader } from \"./model/FITSHeader.js\"\nimport * as fs from 'fs';\nexport class FITSWriter {\n    static createFITS(fitsParsed) {\n        const headerBytes = this.createHeader(fitsParsed.header);\n        const dataBytes = this.createData(fitsParsed.data);\n        // Concatenate header and data to form a complete FITS file\n        const fitsFile = new Uint8Array(headerBytes.length + dataBytes.length);\n        fitsFile.set(headerBytes, 0);\n        fitsFile.set(dataBytes, headerBytes.length);\n        return fitsFile;\n    }\n    static createHeader(header) {\n        let headerString = \"\";\n        // Convert header items to FITS 80-character records\n        for (const item of header.getItems()) {\n            if (item.key === \"END\")\n                continue;\n            const key = item.key ? item.key.padEnd(8, \" \") : \"        \";\n            const value = item.value !== undefined ? `= ${item.value}` : \"\";\n            const comment = item.comment ? ` / ${item.comment}` : \"\";\n            let record = `${key}${value}${comment}`.padEnd(80, \" \");\n            headerString += record;\n        }\n        // End header with \"END\" record and pad to 2880-byte multiple\n        headerString += \"END\".padEnd(80, \" \");\n        while (headerString.length % 2880 !== 0) {\n            headerString += \" \";\n        }\n        return new TextEncoder().encode(headerString);\n    }\n    static createData(data) {\n        let totalLength = data.reduce((sum, row) => sum + row.length, 0);\n        let dataBytes = new Uint8Array(totalLength);\n        let offset = 0;\n        for (let row of data) {\n            dataBytes.set(row, offset);\n            offset += row.length;\n        }\n        return dataBytes;\n    }\n    static typedArrayToURL(fitsParsed) {\n        const fitsFile = this.createFITS(fitsParsed);\n        const blob = new Blob([fitsFile], { type: \"application/fits\" });\n        // console.log(`<html><body><img src='${URL.createObjectURL(b)}'</body></html>`);\n        const url = URL.createObjectURL(blob);\n        console.log(`Generated FITS file URL: ${url}`);\n        const revokeTimeout_sec = 10;\n        setTimeout(() => url, revokeTimeout_sec * 1000);\n        console.log(`Generated FITS will be available for ${revokeTimeout_sec} seconds: ${url}`);\n        return url;\n    }\n    static writeFITSFile(fitsParsed, filePath) {\n        const fitsFile = this.createFITS(fitsParsed);\n        try {\n            fs.writeFileSync(filePath, fitsFile);\n            console.log(`FITS file written successfully to: ${filePath}`);\n        }\n        catch (error) {\n            console.error(`Error writing FITS file: ${error}`);\n        }\n    }\n}\n// const fitsParsed: FITSParsed = {\n//   header: new FITSHeader(),\n//   data: [new Uint8Array([1, 2, 3]), new Uint8Array([4, 5, 6])]\n// };\n// // Specify the file path\n// const filePath = \"/Users/fabriziogiordano/Desktop/PhD/code/new/FITSParser/output.fits\";\n// // Write the FITS file to the filesystem\n// FITSWriter.writeFITSFile(fitsParsed, filePath);\n//# sourceMappingURL=FITSWriter.js.map","// import { FITSHeader } from \"./model/FITSHeader.js\";\nimport { FITSHeaderItem } from \"./model/FITSHeaderItem.js\";\nimport { FITSHeaderManager } from \"./model/FITSHeaderManager.js\";\n/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n *\n * @link   github https://github.com/fab77/FITSParser\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\nexport class ParseHeader {\n    static getFITSItemValue(header, key) {\n        const item = header.findById(key);\n        let VALUE = null;\n        if (item) {\n            VALUE = Number(item.value);\n        }\n        return VALUE;\n    }\n    static parse(rawdata) {\n        // only one header block (2880) allowed atm.\n        // TODO handle multiple header blocks\n        // let headerByteData = new Uint8Array(rawdata, 0, 2880);\n        const textDecoder = new TextDecoder('ascii');\n        const headerSize = 2880; // FITS headers are in 2880-byte blocks\n        const headerText = textDecoder.decode(rawdata.slice(0, headerSize));\n        const header = new FITSHeaderManager();\n        const lines = headerText.match(/.{1,80}/g) || [];\n        for (const line of lines) {\n            const key = line.slice(0, 8).trim();\n            let value;\n            let comment = \"\";\n            if (key && key !== 'END') {\n                const rawValue = line.slice(10).trim().split('/')[0].trim();\n                if (isNaN(Number(rawValue))) {\n                    value = rawValue;\n                }\n                else {\n                    value = Number(rawValue);\n                }\n                if (line.includes('/')) {\n                    comment = line.slice(10).trim().split('/')[1].trim();\n                }\n                const item = new FITSHeaderItem(key, value, comment);\n                header.insert(item);\n            }\n        }\n        return header;\n    }\n}\n//# sourceMappingURL=ParseHeader.js.map","// \"use strict\";\n/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n *\n * @link   github https://github.com/fab77/FITSParser\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n// import { FITSHeader } from \"./model/FITSHeader.js\";\nimport { FITSHeaderItem } from \"./model/FITSHeaderItem.js\";\nimport { FITSHeaderManager } from \"./model/FITSHeaderManager.js\";\nimport { ParseHeader } from \"./ParseHeader.js\";\nimport { ParseUtils } from \"./ParseUtils.js\";\nexport class ParsePayload {\n    static computePhysicalMinAndMax(header, rawData) {\n        const BITPIX = ParseHeader.getFITSItemValue(header, FITSHeaderManager.BITPIX);\n        if (BITPIX === null) {\n            return null;\n        }\n        const NAXIS1 = ParseHeader.getFITSItemValue(header, FITSHeaderManager.NAXIS1);\n        if (NAXIS1 === null) {\n            return null;\n        }\n        const NAXIS2 = ParseHeader.getFITSItemValue(header, FITSHeaderManager.NAXIS2);\n        if (NAXIS2 === null) {\n            return null;\n        }\n        const DATAMIN = ParseHeader.getFITSItemValue(header, FITSHeaderManager.DATAMIN);\n        const DATAMAX = ParseHeader.getFITSItemValue(header, FITSHeaderManager.DATAMAX);\n        if (!BITPIX || !NAXIS1 || !NAXIS2) {\n            return null; // return early if invalid data.\n        }\n        if (!DATAMAX || !DATAMIN) {\n            const [min, max] = ParsePayload.computePhysicalValues(rawData, header);\n            if (min && max) {\n                const maxitem = new FITSHeaderItem(\"DATAMAX\", min, \"computed by jsfitsio\");\n                const minitem = new FITSHeaderItem(\"DATAMIN\", max, \"computed by jsfitsio\");\n                header.insert(maxitem);\n                header.insert(minitem);\n            }\n        }\n        const endItem = new FITSHeaderItem('END', \"\", \"\");\n        header.insert(endItem);\n        return header;\n        // TODO: END tag shall be added here\n    }\n    static computePhysicalValues(rawData, header) {\n        const BITPIX = ParseHeader.getFITSItemValue(header, FITSHeaderManager.BITPIX);\n        if (BITPIX === null || isNaN(BITPIX)) {\n            return [null, null];\n        }\n        const BLANK = ParseHeader.getFITSItemValue(header, FITSHeaderManager.BLANK);\n        if (BLANK === null || isNaN(BITPIX)) {\n            return [null, null];\n        }\n        let BZERO = ParseHeader.getFITSItemValue(header, FITSHeaderManager.BZERO);\n        if (BZERO === null) {\n            BZERO = 0;\n        }\n        let BSCALE = ParseHeader.getFITSItemValue(header, FITSHeaderManager.BSCALE);\n        if (BSCALE === null) {\n            BSCALE = 1;\n        }\n        let i = 0;\n        const bytesXelem = Math.abs(BITPIX / 8);\n        const pxLength = rawData.byteLength / bytesXelem;\n        let min = null;\n        let max = null;\n        let physicalblank = null;\n        if (BLANK) {\n            physicalblank = ParsePayload.pixel2physicalValue(BLANK, BSCALE, BZERO);\n        }\n        while (i < pxLength) {\n            let px_val = ParsePayload.extractPixelValue(rawData, bytesXelem * i, BITPIX);\n            if (px_val === null) {\n                i++;\n                continue;\n            }\n            let ph_val = ParsePayload.pixel2physicalValue(px_val, BSCALE, BZERO);\n            if (!min) {\n                min = ph_val;\n            }\n            if (!max) {\n                max = ph_val;\n            }\n            // check this block if it is still applicable\n            if (physicalblank === null || physicalblank !== ph_val) {\n                if (ph_val !== null && (ph_val < min || min === null)) {\n                    min = ph_val;\n                }\n                if (ph_val !== null && (ph_val > max || max === null)) {\n                    max = ph_val;\n                }\n            }\n            i++;\n        }\n        return [min, max];\n    }\n    static pixel2physicalValue(pxval, BSCALE, BZERO) {\n        if (BZERO === null || BSCALE === null) {\n            throw new Error(\"Either BZERO or BSCALE is null\");\n        }\n        return BZERO + BSCALE * pxval;\n    }\n    static extractPixelValue(rawData, offset, BITPIX) {\n        let px_val = null; // pixel value\n        if (BITPIX == 16) {\n            // 16-bit 2's complement binary integer\n            px_val = ParseUtils.parse16bit2sComplement(rawData[offset], rawData[offset + 1]);\n        }\n        else if (BITPIX == 32) {\n            // IEEE 754 half precision (float16) ??\n            px_val = ParseUtils.parse32bit2sComplement(rawData[offset], rawData[offset + 1], rawData[offset + 2], rawData[offset + 3]);\n        }\n        else if (BITPIX == -32) {\n            // 32-bit IEEE single-precision floating point\n            // px_val = ParseUtils.parse32bitSinglePrecisionFloatingPoint (this._u8data[offset], this._u8data[offset+1], this._u8data[offset+2], this._u8data[offset+3]);\n            px_val = ParseUtils.parseFloatingPointFormat(rawData.slice(offset, offset + 4), 8, 23);\n        }\n        else if (BITPIX == 64) {\n            // 64-bit 2's complement binary integer\n            throw new Error(\"BITPIX=64 -> 64-bit 2's complement binary integer NOT supported yet.\");\n        }\n        else if (BITPIX == -64) {\n            // 64-bit IEEE double-precision floating point\n            //https://babbage.cs.qc.cuny.edu/ieee-754.old/Decimal.html\n            px_val = ParseUtils.parseFloatingPointFormat(rawData.slice(offset, offset + 8), 11, 52);\n        }\n        return px_val;\n    }\n}\n//# sourceMappingURL=ParsePayload.js.map","/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n *\n * @link   github https://github.com/fab77/FITSParser\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\nexport class ParseUtils {\n    static getStringAt(data, offset, length) {\n        const chars = [];\n        for (let i = offset, j = 0; i < offset + length; i++, j++) {\n            chars[j] = String.fromCharCode(data.charCodeAt(i) & 0xff);\n        }\n        return chars.join(\"\");\n    }\n    static byteString(n) {\n        if (n < 0 || n > 255 || n % 1 !== 0) {\n            throw new Error(n + \" does not fit in a byte\");\n        }\n        return (\"000000000\" + n.toString(2)).substr(-8);\n    }\n    static parse32bitSinglePrecisionFloatingPoint(byte1, byte2, byte3, byte4) {\n        let long = (((((byte1 << 8) + byte2) << 8) + byte3) << 8) + byte4;\n        if (long < 0)\n            long += 4294967296;\n        const float = (1.0 + (long & 0x007fffff) / 0x0800000) *\n            Math.pow(2, ((long & 0x7f800000) >> 23) - 127);\n        return float;\n    }\n    static convertBlankToBytes(blank, nbytes) {\n        let str = Math.abs(blank).toString(2);\n        while (str.length / 8 < nbytes) {\n            str += \"0\";\n        }\n        const buffer = new ArrayBuffer(nbytes);\n        const uint8 = new Uint8Array(buffer);\n        for (let i = 0; i < nbytes; i++) {\n            uint8[i] = parseInt(str.substr(8 * i, 8 * (i + 1)), 2);\n        }\n        return uint8;\n    }\n    /** https://gist.github.com/Manouchehri/f4b41c8272db2d6423fa987e844dd9ac */\n    static parseFloatingPointFormat(bytes, ebits, fbits) {\n        // Bytes to bits\n        const bits = [];\n        for (let i = bytes.length; i; i -= 1) {\n            let byte = bytes[i - 1];\n            for (let j = 8; j; j -= 1) {\n                bits.push(byte % 2 ? 1 : 0);\n                byte = byte >> 1;\n            }\n        }\n        bits.reverse();\n        const str = bits.join(\"\");\n        // Unpack sign, exponent, fraction\n        const bias = (1 << (ebits - 1)) - 1;\n        const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n        const e = parseInt(str.substring(1, 1 + ebits), 2);\n        const f = parseInt(str.substring(1 + ebits), 2);\n        // Produce number\n        if (e === (1 << ebits) - 1) {\n            return f !== 0 ? null : s * Infinity;\n        }\n        else if (e > 0) {\n            return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n        }\n        else if (f !== 0) {\n            return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n        }\n        else {\n            return s * 0;\n        }\n    }\n    static generate16bit2sComplement(val) {\n        throw new TypeError(\"not implemented yet\" + val);\n    }\n    static parse16bit2sComplement(byte1, byte2) {\n        const unsigned = (byte1 << 8) | byte2;\n        if (unsigned & 0x8000) {\n            return unsigned | 0xffff0000;\n        }\n        else {\n            return unsigned;\n        }\n    }\n    static parse32bit2sComplement(byte1, byte2, byte3, byte4) {\n        const unsigned = (byte1 << 24) | (byte2 << 16) | (byte3 << 8) | byte4;\n        const s = (unsigned & 0x80000000) >> 31;\n        let res = unsigned & 0xffffffff;\n        if (s) {\n            res = (~unsigned & 0xffffffff) + 1;\n            return -1 * res;\n        }\n        return res;\n    }\n    /**\n     *\n     * @param {*} data string?\n     * @param {*} offset offset in the data\n     * @returns returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index.\n     */\n    static getByteAt(data, offset) {\n        const dataOffset = 0;\n        return data.charCodeAt(offset + dataOffset) & 0xff;\n    }\n    static extractPixelValue(offset, bytes, bitpix) {\n        let px_val = null; // pixel value\n        // let px_val1, px_val2, px_val3, px_val4;\n        if (bitpix == 8) {\n            px_val = bytes[0];\n        }\n        else if (bitpix == 16) {\n            // 16-bit 2's complement binary integer\n            px_val = ParseUtils.parse16bit2sComplement(bytes[offset], bytes[offset + 1]);\n        }\n        else if (bitpix == 32) {\n            // IEEE 754 half precision (float16) ??\n            px_val = ParseUtils.parse32bit2sComplement(bytes[offset], bytes[offset + 1], bytes[offset + 2], bytes[offset + 3]);\n        }\n        else if (bitpix == -32) {\n            // 32-bit IEEE single-precision floating point\n            // px_val = ParseUtils.parse32bitSinglePrecisionFloatingPoint (this._u8data[offset], this._u8data[offset+1], this._u8data[offset+2], this._u8data[offset+3]);\n            px_val = ParseUtils.parseFloatingPointFormat(bytes.slice(offset, offset + 8), 8, 23);\n        }\n        else if (bitpix == 64) {\n            // 64-bit 2's complement binary integer\n            throw new Error(\"BITPIX=64 -> 64-bit 2's complement binary integer NOT supported yet.\");\n        }\n        else if (bitpix == -64) {\n            // 64-bit IEEE double-precision floating point\n            //https://babbage.cs.qc.cuny.edu/ieee-754.old/Decimal.html\n            px_val = ParseUtils.parseFloatingPointFormat(bytes.slice(offset, offset + 8), 11, 52);\n        }\n        return px_val;\n    }\n}\n// export default ParseUtils;\n//# sourceMappingURL=ParseUtils.js.map","export { FITSHeaderItem } from \"./model/FITSHeaderItem.js\";\n// export { FITSHeader } from \"./model/FITSHeader.js\";\nexport { FITSHeaderManager } from \"./model/FITSHeaderManager.js\";\nexport { FITSParser } from \"./FITSParser.js\";\nexport { FITSWriter } from \"./FITSWriter.js\";\nexport { ParseHeader } from \"./ParseHeader.js\";\nexport { ParsePayload } from \"./ParsePayload.js\";\nexport { ParseUtils } from \"./ParseUtils.js\";\n//# sourceMappingURL=index.js.map","/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n *\n * @link   github https://github.com/fab77/FITSParser\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\nexport class FITSHeaderItem {\n    constructor(key, value, comment) {\n        this._key = \"\";\n        this._value = \"\";\n        this._comment = \"\";\n        this._key = key;\n        this._value = value;\n        this._comment = comment;\n    }\n    get key() {\n        return this._key;\n    }\n    get comment() {\n        return this._comment;\n    }\n    get value() {\n        return this._value;\n    }\n}\n//# sourceMappingURL=FITSHeaderItem.js.map","import { FITSHeaderItem } from \"./FITSHeaderItem.js\";\nexport class FITSHeaderManager {\n    constructor() {\n        this.items = [];\n        this.items[0] = new FITSHeaderItem(FITSHeaderManager.SIMPLE, 'T', '');\n        this.items[1] = new FITSHeaderItem(FITSHeaderManager.BITPIX, '', '');\n        this.items[2] = new FITSHeaderItem(FITSHeaderManager.NAXIS, 2, '');\n        this.items[3] = new FITSHeaderItem(FITSHeaderManager.NAXIS1, '', '');\n        this.items[4] = new FITSHeaderItem(FITSHeaderManager.NAXIS2, '', '');\n    }\n    // insert(item: FITSHeaderItem, position?: number): void {\n    insert(item) {\n        if (item.key === FITSHeaderManager.SIMPLE) {\n            // this.items.splice(0, 0, item);\n            this.items[0] = item;\n        }\n        else if (item.key === FITSHeaderManager.BITPIX) {\n            // this.items.splice(1, 0, item);\n            this.items[1] = item;\n        }\n        else if (item.key === FITSHeaderManager.NAXIS) {\n            // this.items.splice(2, 0, item);\n            this.items[2] = item;\n        }\n        else if (item.key === FITSHeaderManager.NAXIS1) {\n            // this.items.splice(3, 0, item);\n            this.items[3] = item;\n        }\n        else if (item.key === FITSHeaderManager.NAXIS2) {\n            // this.items.splice(4, 0, item);\n            this.items[4] = item;\n        }\n        else {\n            this.items.push(item);\n        }\n        // if (position !== undefined && position >= 0 && position <= this.items.length) {\n        //     this.items.splice(position, 0, item);\n        // } else {\n        //     this.items.push(item);\n        // }\n    }\n    getItems() {\n        return this.items;\n    }\n    remove(key) {\n        this.items = this.items.filter(item => item.key !== key);\n    }\n    findById(key) {\n        const item = this.items.find(item => item.key === key);\n        if (!item) {\n            return null;\n        }\n        return item;\n    }\n}\nFITSHeaderManager.SIMPLE = \"SIMPLE\";\nFITSHeaderManager.BITPIX = \"BITPIX\";\nFITSHeaderManager.BZERO = \"BZERO\";\nFITSHeaderManager.BSCALE = \"BSCALE\";\nFITSHeaderManager.BLANK = \"BLANK\";\nFITSHeaderManager.NAXIS = \"NAXIS\";\nFITSHeaderManager.NAXIS1 = \"NAXIS1\";\nFITSHeaderManager.NAXIS2 = \"NAXIS2\";\nFITSHeaderManager.DATAMIN = \"DATAMIN\";\nFITSHeaderManager.DATAMAX = \"DATAMAX\";\nFITSHeaderManager.CRVAL1 = \"CRVAL1\";\nFITSHeaderManager.CRVAL2 = \"CRVAL2\";\nFITSHeaderManager.CTYPE1 = \"CTYPE1\";\nFITSHeaderManager.CTYPE2 = \"CTYPE2\";\nFITSHeaderManager.CRPIX1 = \"CRPIX1\";\nFITSHeaderManager.CRPIX2 = \"CRPIX2\";\nFITSHeaderManager.ORIGIN = \"ORIGIN\";\nFITSHeaderManager.COMMENT = \"COMMENT\";\n//# sourceMappingURL=FITSHeaderManager.js.map","import { Vec3 } from './Vec3.js';\nexport class CircleFinder {\n    /**\n     * @param point: Vec3\n     */\n    constructor(point) {\n        let np = point.length;\n        //HealpixUtils.check(np>=2,\"too few points\");\n        if (!(np >= 2)) {\n            console.log(\"too few points\");\n            return;\n        }\n        this.center = point[0].add(point[1]);\n        this.center.normalize();\n        this.cosrad = point[0].dot(this.center);\n        for (let i = 2; i < np; ++i) {\n            if (point[i].dot(this.center) < this.cosrad) { // point outside the current circle\n                this.getCircle(point, i);\n            }\n        }\n    }\n    ;\n    /**\n     * @parm point: Vec3\n     * @param q: int\n     */\n    getCircle(point, q) {\n        this.center = point[0].add(point[q]);\n        this.center.normalize();\n        this.cosrad = point[0].dot(this.center);\n        for (let i = 1; i < q; ++i) {\n            if (point[i].dot(this.center) < this.cosrad) { // point outside the current circle\n                this.getCircle2(point, i, q);\n            }\n        }\n    }\n    ;\n    /**\n     * @parm point: Vec3\n     * @param q1: int\n     * @param q2: int\n     */\n    getCircle2(point, q1, q2) {\n        this.center = point[q1].add(point[q2]);\n        this.center.normalize();\n        this.cosrad = point[q1].dot(this.center);\n        for (let i = 0; i < q1; ++i) {\n            if (point[i].dot(this.center) < this.cosrad) { // point outside the current circle\n                this.center = (point[q1].sub(point[i])).cross(point[q2].sub(point[i]));\n                this.center.normalize();\n                this.cosrad = point[i].dot(this.center);\n                if (this.cosrad < 0) {\n                    this.center.flip();\n                    this.cosrad = -this.cosrad;\n                }\n            }\n        }\n    }\n    ;\n    getCenter() {\n        return new Vec3(this.center.x, this.center.y, this.center.z);\n    }\n    getCosrad() {\n        return this.cosrad;\n    }\n    ;\n}\n//# sourceMappingURL=CircleFinder.js.map","export class Constants {\n}\n//\tstatic halfpi = Math.PI/2.;\nConstants.halfpi = 1.5707963267948966;\nConstants.inv_halfpi = 2. / Math.PI;\n/** The Constant twopi. */\nConstants.twopi = 2 * Math.PI;\nConstants.inv_twopi = 1. / (2 * Math.PI);\n//# sourceMappingURL=Constants.js.map","/**\n * Partial porting to Javascript of Fxyf.java from Healpix3.30\n */\nimport { Hploc } from './Hploc.js';\nexport class Fxyf {\n    constructor(x, y, f) {\n        this.fx = x;\n        this.fy = y;\n        this.face = f;\n        // coordinate of the lowest corner of each face\n        this.jrll = new Uint8Array([2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]);\n        this.jpll = new Uint8Array([1, 3, 5, 7, 0, 2, 4, 6, 1, 3, 5, 7]);\n        this.halfpi = Math.PI / 2.;\n    }\n    toHploc() {\n        let loc = new Hploc();\n        let jr = this.jrll[this.face] - this.fx - this.fy;\n        let nr;\n        if (jr < 1) {\n            nr = jr;\n            let tmp = nr * nr / 3.;\n            loc.z = 1 - tmp;\n            if (loc.z > 0.99) {\n                loc.sth = Math.sqrt(tmp * (2.0 - tmp));\n                loc.have_sth = true;\n            }\n        }\n        else if (jr > 3) {\n            nr = 4 - jr;\n            let tmp = nr * nr / 3.;\n            loc.z = tmp - 1;\n            if (loc.z < -0.99) {\n                loc.sth = Math.sqrt(tmp * (2.0 - tmp));\n                loc.have_sth = true;\n            }\n        }\n        else {\n            nr = 1;\n            loc.z = (2 - jr) * 2.0 / 3.;\n        }\n        let tmp = this.jpll[this.face] * nr + this.fx - this.fy;\n        if (tmp < 0) {\n            tmp += 8;\n        }\n        if (tmp >= 8) {\n            tmp -= 8;\n        }\n        loc.phi = (nr < 1e-15) ? 0 : (0.5 * this.halfpi * tmp) / nr;\n        return loc;\n    }\n    ;\n    toVec3() {\n        return this.toHploc().toVec3();\n    }\n    ;\n}\n//# sourceMappingURL=Fxyf.js.map","\"use strict\";\nimport { CircleFinder } from \"./CircleFinder.js\";\nimport { Constants } from \"./Constants.js\";\nimport { Fxyf } from \"./Fxyf.js\";\nimport { Hploc } from \"./Hploc.js\";\nimport { Pointing } from \"./Pointing.js\";\nimport { pstack } from \"./pstack.js\";\nimport { RangeSet } from \"./RangeSet.js\";\nimport { Vec3 } from \"./Vec3.js\";\nimport { Xyf } from \"./Xyf.js\";\nimport { Zphi } from \"./Zphi.js\";\n/**\n * Partial porting to Javascript of HealpixBase.java from Healpix3.30\n */\n// import Fxyf from './Fxyf.js';\n// import Hploc from './Hploc.js';\n// import Xyf from './Xyf.js';\n// import Vec3 from './Vec3.js';\n// import Pointing from './Pointing.js';\n// import CircleFinder from './CircleFinder.js';\n// import Zphi from './Zphi.js';\n// import pstack from './pstack.js';\n// import Constants from './Constants.js';\n// import RangeSet from './RangeSet.js';\nexport class Healpix {\n    constructor(nside_in) {\n        this.order_max = 29;\n        this.inv_halfpi = 2.0 / Math.PI;\n        this.twothird = 2.0 / 3.;\n        // console.log(\"twothird \"+this.twothird);\n        // this.ns_max=1L<<order_max;\n        this.ns_max = Math.pow(2, this.order_max);\n        this.ctab = new Uint16Array([\n            0, 1, 256, 257, 2, 3, 258, 259, 512, 513, 768, 769, 514, 515, 770, 771, 4, 5, 260, 261, 6, 7, 262,\n            263, 516, 517, 772, 773, 518, 519, 774, 775, 1024, 1025, 1280, 1281, 1026, 1027, 1282, 1283,\n            1536, 1537, 1792, 1793, 1538, 1539, 1794, 1795, 1028, 1029, 1284, 1285, 1030, 1031, 1286,\n            1287, 1540, 1541, 1796, 1797, 1542, 1543, 1798, 1799, 8, 9, 264, 265, 10, 11, 266, 267, 520,\n            521, 776, 777, 522, 523, 778, 779, 12, 13, 268, 269, 14, 15, 270, 271, 524, 525, 780, 781, 526,\n            527, 782, 783, 1032, 1033, 1288, 1289, 1034, 1035, 1290, 1291, 1544, 1545, 1800, 1801, 1546,\n            1547, 1802, 1803, 1036, 1037, 1292, 1293, 1038, 1039, 1294, 1295, 1548, 1549, 1804, 1805,\n            1550, 1551, 1806, 1807, 2048, 2049, 2304, 2305, 2050, 2051, 2306, 2307, 2560, 2561, 2816,\n            2817, 2562, 2563, 2818, 2819, 2052, 2053, 2308, 2309, 2054, 2055, 2310, 2311, 2564, 2565,\n            2820, 2821, 2566, 2567, 2822, 2823, 3072, 3073, 3328, 3329, 3074, 3075, 3330, 3331, 3584,\n            3585, 3840, 3841, 3586, 3587, 3842, 3843, 3076, 3077, 3332, 3333, 3078, 3079, 3334, 3335,\n            3588, 3589, 3844, 3845, 3590, 3591, 3846, 3847, 2056, 2057, 2312, 2313, 2058, 2059, 2314,\n            2315, 2568, 2569, 2824, 2825, 2570, 2571, 2826, 2827, 2060, 2061, 2316, 2317, 2062, 2063,\n            2318, 2319, 2572, 2573, 2828, 2829, 2574, 2575, 2830, 2831, 3080, 3081, 3336, 3337, 3082,\n            3083, 3338, 3339, 3592, 3593, 3848, 3849, 3594, 3595, 3850, 3851, 3084, 3085, 3340, 3341,\n            3086, 3087, 3342, 3343, 3596, 3597, 3852, 3853, 3598, 3599, 3854, 3855\n        ]);\n        this.utab = new Uint16Array([0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85, 256, 257, 260, 261, 272, 273, 276, 277,\n            320, 321, 324, 325, 336, 337, 340, 341, 1024, 1025, 1028, 1029, 1040, 1041, 1044, 1045, 1088,\n            1089, 1092, 1093, 1104, 1105, 1108, 1109, 1280, 1281, 1284, 1285, 1296, 1297, 1300, 1301,\n            1344, 1345, 1348, 1349, 1360, 1361, 1364, 1365, 4096, 4097, 4100, 4101, 4112, 4113, 4116,\n            4117, 4160, 4161, 4164, 4165, 4176, 4177, 4180, 4181, 4352, 4353, 4356, 4357, 4368, 4369,\n            4372, 4373, 4416, 4417, 4420, 4421, 4432, 4433, 4436, 4437, 5120, 5121, 5124, 5125, 5136,\n            5137, 5140, 5141, 5184, 5185, 5188, 5189, 5200, 5201, 5204, 5205, 5376, 5377, 5380, 5381,\n            5392, 5393, 5396, 5397, 5440, 5441, 5444, 5445, 5456, 5457, 5460, 5461, 16384, 16385, 16388,\n            16389, 16400, 16401, 16404, 16405, 16448, 16449, 16452, 16453, 16464, 16465, 16468, 16469,\n            16640, 16641, 16644, 16645, 16656, 16657, 16660, 16661, 16704, 16705, 16708, 16709, 16720,\n            16721, 16724, 16725, 17408, 17409, 17412, 17413, 17424, 17425, 17428, 17429, 17472, 17473,\n            17476, 17477, 17488, 17489, 17492, 17493, 17664, 17665, 17668, 17669, 17680, 17681, 17684,\n            17685, 17728, 17729, 17732, 17733, 17744, 17745, 17748, 17749, 20480, 20481, 20484, 20485,\n            20496, 20497, 20500, 20501, 20544, 20545, 20548, 20549, 20560, 20561, 20564, 20565, 20736,\n            20737, 20740, 20741, 20752, 20753, 20756, 20757, 20800, 20801, 20804, 20805, 20816, 20817,\n            20820, 20821, 21504, 21505, 21508, 21509, 21520, 21521, 21524, 21525, 21568, 21569, 21572,\n            21573, 21584, 21585, 21588, 21589, 21760, 21761, 21764, 21765, 21776, 21777, 21780, 21781,\n            21824, 21825, 21828, 21829, 21840, 21841, 21844, 21845]);\n        this.jrll = new Int16Array([2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]);\n        this.jpll = new Int16Array([1, 3, 5, 7, 0, 2, 4, 6, 1, 3, 5, 7]);\n        this.xoffset = new Int16Array([-1, -1, 0, 1, 1, 1, 0, -1]);\n        this.yoffset = new Int16Array([0, 1, 1, 1, 0, -1, -1, -1]);\n        this.facearray = [\n            new Int16Array([8, 9, 10, 11, -1, -1, -1, -1, 10, 11, 8, 9]),\n            new Int16Array([5, 6, 7, 4, 8, 9, 10, 11, 9, 10, 11, 8]),\n            new Int16Array([-1, -1, -1, -1, 5, 6, 7, 4, -1, -1, -1, -1]),\n            new Int16Array([4, 5, 6, 7, 11, 8, 9, 10, 11, 8, 9, 10]),\n            new Int16Array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]),\n            new Int16Array([1, 2, 3, 0, 0, 1, 2, 3, 5, 6, 7, 4]),\n            new Int16Array([-1, -1, -1, -1, 7, 4, 5, 6, -1, -1, -1, -1]),\n            new Int16Array([3, 0, 1, 2, 3, 0, 1, 2, 4, 5, 6, 7]),\n            new Int16Array([2, 3, 0, 1, -1, -1, -1, -1, 0, 1, 2, 3]) // N\n        ];\n        // questo forse deve essere un UInt8Array. Viene usato da neighbours\n        this.swaparray = [\n            new Int16Array([0, 0, 3]),\n            new Int16Array([0, 0, 6]),\n            new Int16Array([0, 0, 0]),\n            new Int16Array([0, 0, 5]),\n            new Int16Array([0, 0, 0]),\n            new Int16Array([5, 0, 0]),\n            new Int16Array([0, 0, 0]),\n            new Int16Array([6, 0, 0]),\n            new Int16Array([3, 0, 0]) // N\n        ];\n        if (nside_in <= this.ns_max && nside_in > 0) {\n            this.nside = nside_in;\n            this.npface = this.nside * this.nside;\n            this.npix = 12 * this.npface;\n            this.order = this.nside2order(this.nside);\n            this.nl2 = 2 * this.nside;\n            this.nl3 = 3 * this.nside;\n            this.nl4 = 4 * this.nside;\n            this.fact2 = 4.0 / this.npix;\n            this.fact1 = (this.nside << 1) * this.fact2;\n            this.ncap = 2 * this.nside * (this.nside - 1); // pixels in each polar cap\n            // console.log(\"order: \"+this.order);\n            // console.log(\"nside: \"+this.nside);\n        }\n        this.bn = [];\n        this.mpr = [];\n        this.cmpr = [];\n        this.smpr = [];\n        // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\n        // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\n        // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\n        // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\n        // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\n        // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\n        // TODO INFINITE LOOP!!!!!! FIX ITTTTTTTTTT\n        // Uncaught RangeError: Maximum call stack size exceeded\n        // MOVED TO computeBn()\n        //        for (let i=0; i <= this.order_max; ++i) {\n        //        \tthis.bn[i]=new Healpix(1<<i);\n        //        \tthis.mpr[i]=bn[i].maxPixrad();\n        //        \tthis.cmpr[i]=Math.cos(mpr[i]);\n        //        \tthis.smpr[i]=Math.sin(mpr[i]);\n        //        }\n    }\n    computeBn() {\n        for (let i = 0; i <= this.order_max; ++i) {\n            this.bn[i] = new Healpix(1 << i);\n            this.mpr[i] = this.bn[i].maxPixrad();\n            this.cmpr[i] = Hploc.cos(this.mpr[i]);\n            this.smpr[i] = Hploc.sin(this.mpr[i]);\n        }\n    }\n    getNPix() {\n        return this.npix;\n    }\n    ;\n    getBoundaries(pix) {\n        let points = new Array();\n        let xyf = this.nest2xyf(pix);\n        // console.log(\"PIXEL: \"+pix);\n        // console.log(\"XYF \"+xyf.ix+\" \"+xyf.iy+\" \"+xyf.face);\n        let dc = 0.5 / this.nside;\n        let xc = (xyf.ix + 0.5) / this.nside;\n        let yc = (xyf.iy + 0.5) / this.nside;\n        // let d = 1.0/(this.nside);\n        // console.log(\"------------------------\");\n        // console.log(\"xc, yc, dc \"+xc+\",\"+ yc+\",\"+ dc);\n        // console.log(\"xc+dc-d, yc+dc, xyf.face, d \"+(xc+dc) +\",\"+ (yc+dc)+\",\"+\n        // xyf.face+\",\"+ d);\n        points[0] = new Fxyf(xc + dc, yc + dc, xyf.face).toVec3();\n        points[1] = new Fxyf(xc - dc, yc + dc, xyf.face).toVec3();\n        points[2] = new Fxyf(xc - dc, yc - dc, xyf.face).toVec3();\n        points[3] = new Fxyf(xc + dc, yc - dc, xyf.face).toVec3();\n        // console.log(\"Points for npix: \"+pix);\n        // console.log(points);\n        // if (pix > 750){\n        // console.log(\"pix: \"+pix);\n        // console.log(\"dc: \"+dc);\n        // console.log(\"xyf.ix: \"+xyf.ix);\n        // console.log(\"xyf.iy: \"+xyf.iy);\n        // console.log(\"xc: \"+xc);\n        // console.log(\"yc: \"+yc);\n        // console.log(\"d: \"+d);\n        // }\n        return points;\n    }\n    ;\n    /** Returns a set of points along the boundary of the given pixel.\n     * Step 1 gives 4 points on the corners. The first point corresponds\n     * to the northernmost corner, the subsequent points follow the pixel\n     * boundary through west, south and east corners.\n     *\n     * @param pix pixel index number\n     * @param step the number of returned points is 4*step\n     * @return {@link Vec3} for each point\n     */\n    getBoundariesWithStep(pix, step) {\n        // var points = new Array(); \n        let points = new Array();\n        let xyf = this.nest2xyf(pix);\n        let dc = 0.5 / this.nside;\n        let xc = (xyf.ix + 0.5) / this.nside;\n        let yc = (xyf.iy + 0.5) / this.nside;\n        let d = 1.0 / (this.nside * step);\n        for (let i = 0; i < step; i++) {\n            points[i] = new Fxyf(xc + dc - i * d, yc + dc, xyf.face).toVec3();\n            points[i + step] = new Fxyf(xc - dc, yc + dc - i * d, xyf.face).toVec3();\n            points[i + 2 * step] = new Fxyf(xc - dc + i * d, yc - dc, xyf.face).toVec3();\n            points[i + 3 * step] = new Fxyf(xc + dc, yc - dc + i * d, xyf.face).toVec3();\n        }\n        return points;\n    }\n    ;\n    getPointsForXyfNoStep(x, y, face) {\n        let nside = Math.pow(2, this.order);\n        let points = new Array();\n        let xyf = new Xyf(x, y, face);\n        let dc = 0.5 / nside;\n        let xc = (xyf.ix + 0.5) / nside;\n        let yc = (xyf.iy + 0.5) / nside;\n        points[0] = new Fxyf(xc + dc, yc + dc, xyf.face).toVec3();\n        points[1] = new Fxyf(xc - dc, yc + dc, xyf.face).toVec3();\n        points[2] = new Fxyf(xc - dc, yc - dc, xyf.face).toVec3();\n        points[3] = new Fxyf(xc + dc, yc - dc, xyf.face).toVec3();\n        return points;\n    }\n    getPointsForXyf(x, y, step, face) {\n        let nside = step * Math.pow(2, this.order);\n        let points = new Array();\n        let xyf = new Xyf(x, y, face);\n        let dc = 0.5 / nside;\n        let xc = (xyf.ix + 0.5) / nside;\n        let yc = (xyf.iy + 0.5) / nside;\n        points[0] = new Fxyf(xc + dc, yc + dc, xyf.face).toVec3();\n        points[1] = new Fxyf(xc - dc, yc + dc, xyf.face).toVec3();\n        points[2] = new Fxyf(xc - dc, yc - dc, xyf.face).toVec3();\n        points[3] = new Fxyf(xc + dc, yc - dc, xyf.face).toVec3();\n        return points;\n    }\n    /** Returns the neighboring pixels of ipix.\n    This method works in both RING and NEST schemes, but is\n    considerably faster in the NEST scheme.\n    @param ipix the requested pixel number.\n    @return array with indices of the neighboring pixels.\n      The returned array contains (in this order)\n      the pixel numbers of the SW, W, NW, N, NE, E, SE and S neighbor\n      of ipix. If a neighbor does not exist (this can only happen\n      for the W, N, E and S neighbors), its entry is set to -1. */\n    neighbours(ipix) {\n        let result = new Int32Array(8);\n        let xyf = this.nest2xyf(ipix);\n        let ix = xyf.ix;\n        let iy = xyf.iy;\n        let face_num = xyf.face;\n        var nsm1 = this.nside - 1;\n        if ((ix > 0) && (ix < nsm1) && (iy > 0) && (iy < nsm1)) {\n            let fpix = Math.floor(face_num << (2 * this.order));\n            let px0 = this.spread_bits(ix);\n            let py0 = this.spread_bits(iy) << 1;\n            let pxp = this.spread_bits(ix + 1);\n            let pyp = this.spread_bits(iy + 1) << 1;\n            let pxm = this.spread_bits(ix - 1);\n            let pym = this.spread_bits(iy - 1) << 1;\n            result[0] = fpix + pxm + py0;\n            result[1] = fpix + pxm + pyp;\n            result[2] = fpix + px0 + pyp;\n            result[3] = fpix + pxp + pyp;\n            result[4] = fpix + pxp + py0;\n            result[5] = fpix + pxp + pym;\n            result[6] = fpix + px0 + pym;\n            result[7] = fpix + pxm + pym;\n        }\n        else {\n            for (let i = 0; i < 8; ++i) {\n                let x = ix + this.xoffset[i];\n                let y = iy + this.yoffset[i];\n                let nbnum = 4;\n                if (x < 0) {\n                    x += this.nside;\n                    nbnum -= 1;\n                }\n                else if (x >= this.nside) {\n                    x -= this.nside;\n                    nbnum += 1;\n                }\n                if (y < 0) {\n                    y += this.nside;\n                    nbnum -= 3;\n                }\n                else if (y >= this.nside) {\n                    y -= this.nside;\n                    nbnum += 3;\n                }\n                let f = this.facearray[nbnum][face_num];\n                if (f >= 0) {\n                    let bits = this.swaparray[nbnum][face_num >>> 2];\n                    if ((bits & 1) > 0) {\n                        x = Math.floor(this.nside - x - 1);\n                    }\n                    if ((bits & 2) > 0) {\n                        y = Math.floor(this.nside - y - 1);\n                    }\n                    if ((bits & 4) > 0) {\n                        let tint = x;\n                        x = y;\n                        y = tint;\n                    }\n                    result[i] = this.xyf2nest(x, y, f);\n                }\n                else {\n                    result[i] = -1;\n                }\n            }\n        }\n        return result;\n    }\n    ;\n    nside2order(nside) {\n        return ((nside & (nside - 1)) != 0) ? -1 : Math.log2(nside);\n    }\n    ;\n    nest2xyf(ipix) {\n        let pix = Math.floor(ipix & (this.npface - 1));\n        let xyf = new Xyf(this.compress_bits(pix), this.compress_bits(pix >> 1), Math.floor((ipix >> (2 * this.order))));\n        return xyf;\n    }\n    ;\n    xyf2nest(ix, iy, face_num) {\n        return Math.floor(face_num << (2 * this.order))\n            + this.spread_bits(ix) + (this.spread_bits(iy) << 1);\n    }\n    ;\n    loc2pix(hploc) {\n        let z = hploc.z;\n        let phi = hploc.phi;\n        let za = Math.abs(z);\n        let tt = this.fmodulo((phi * this.inv_halfpi), 4.0); // in [0,4)\n        let pixNo;\n        if (za <= this.twothird) { // Equatorial region\n            let temp1 = this.nside * (0.5 + tt);\n            let temp2 = this.nside * (z * 0.75);\n            let jp = Math.floor(temp1 - temp2); // index of ascending edge line\n            let jm = Math.floor(temp1 + temp2); // index of descending edge line\n            let ifp = Math.floor(jp >>> this.order); // in {0,4}\n            let ifm = Math.floor(jm >>> this.order);\n            let face_num = Math.floor((ifp == ifm) ? (ifp | 4) : ((ifp < ifm) ? ifp : (ifm + 8)));\n            let ix = Math.floor(jm & (this.nside - 1));\n            let iy = Math.floor(this.nside - (jp & (this.nside - 1)) - 1);\n            pixNo = this.xyf2nest(ix, iy, face_num);\n        }\n        else { // polar region, za > 2/3\n            let ntt = Math.min(3, Math.floor(tt));\n            let tp = tt - ntt;\n            let tmp = ((za < 0.99) || (!hploc.have_sth)) ?\n                this.nside * Math.sqrt(3 * (1 - za)) :\n                this.nside * hploc.sth / Math.sqrt((1.0 + za) / 3.);\n            let jp = Math.floor(tp * tmp); // increasing edge line index\n            let jm = Math.floor((1.0 - tp) * tmp); // decreasing edge line index\n            if (jp >= this.nside) {\n                jp = this.nside - 1; // for points too close to the boundary\n            }\n            if (jm >= this.nside) {\n                jm = this.nside - 1;\n            }\n            if (z >= 0) {\n                pixNo = this.xyf2nest(Math.floor(this.nside - jm - 1), Math.floor(this.nside - jp - 1), ntt);\n            }\n            else {\n                pixNo = this.xyf2nest(Math.floor(jp), Math.floor(jm), ntt + 8);\n            }\n        }\n        return pixNo;\n    }\n    ;\n    /** Returns the normalized 3-vector corresponding to the center of the\n    supplied pixel.\n    @param pix long the requested pixel number.\n    @return the pixel's center coordinates. */\n    pix2vec(pix) {\n        return this.pix2loc(pix).toVec3();\n    }\n    ;\n    /** Returns the Zphi corresponding to the center of the supplied pixel.\n     @param pix the requested pixel number.\n     @return the pixel's center coordinates. */\n    pix2zphi(pix) {\n        return this.pix2loc(pix).toZphi();\n    }\n    /**\n     * @param pix long\n     * @return Hploc\n     */\n    pix2loc(pix) {\n        let loc = new Hploc(undefined);\n        let xyf = this.nest2xyf(pix);\n        let jr = ((this.jrll[xyf.face]) << this.order) - xyf.ix - xyf.iy - 1;\n        let nr;\n        if (jr < this.nside) {\n            nr = jr;\n            let tmp = (nr * nr) * this.fact2;\n            loc.z = 1 - tmp;\n            if (loc.z > 0.99) {\n                loc.sth = Math.sqrt(tmp * (2. - tmp));\n                loc.have_sth = true;\n            }\n        }\n        else if (jr > this.nl3) {\n            nr = this.nl4 - jr;\n            let tmp = (nr * nr) * this.fact2;\n            loc.z = tmp - 1;\n            if (loc.z < -0.99) {\n                loc.sth = Math.sqrt(tmp * (2. - tmp));\n                loc.have_sth = true;\n            }\n        }\n        else {\n            nr = this.nside;\n            loc.z = (this.nl2 - jr) * this.fact1;\n        }\n        let tmp = (this.jpll[xyf.face]) * nr + xyf.ix - xyf.iy;\n        //      \tassert(tmp<8*nr); // must not happen\n        if (tmp < 0) {\n            tmp += 8 * nr;\n        }\n        loc.phi = (nr == this.nside) ? 0.75 * Constants.halfpi * tmp * this.fact1 : (0.5 * Constants.halfpi * tmp) / nr;\n        // loc.setPhi((nr == this.nside) ? 0.75 * Constants.halfpi * tmp * this.fact1 : (0.5 * Constants.halfpi * tmp)/nr);\n        return loc;\n    }\n    ;\n    ang2pix(ptg, mirror) {\n        return this.loc2pix(new Hploc(ptg));\n    }\n    ;\n    fmodulo(v1, v2) {\n        if (v1 >= 0) {\n            return (v1 < v2) ? v1 : v1 % v2;\n        }\n        var tmp = v1 % v2 + v2;\n        return (tmp === v2) ? 0.0 : tmp;\n    }\n    ;\n    compress_bits(v) {\n        var raw = Math.floor((v & 0x5555)) | Math.floor(((v & 0x55550000) >>> 15));\n        var compressed = this.ctab[raw & 0xff] | (this.ctab[raw >>> 8] << 4);\n        return compressed;\n    }\n    ;\n    spread_bits(v) {\n        return Math.floor(this.utab[v & 0xff]) | Math.floor((this.utab[(v >>> 8) & 0xff] << 16))\n            | Math.floor((this.utab[(v >>> 16) & 0xff] << 32)) | Math.floor((this.utab[(v >>> 24) & 0xff] << 48));\n    }\n    ;\n    /**\n     * Returns a range set of pixels that overlap with the convex polygon\n     * defined by the {@code vertex} array.\n     * <p>\n     * This method is more efficient in the RING scheme.\n     * <p>\n     * This method may return some pixels which don't overlap with the polygon\n     * at all. The higher {@code fact} is chosen, the fewer false positives are\n     * returned, at the cost of increased run time.\n     *\n     * @param vertex\n     *            an array containing the vertices of the requested convex\n     *            polygon.\n     * @param fact\n     *            The overlapping test will be done at the resolution\n     *            {@code fact*nside}. For NESTED ordering, {@code fact} must be\n     *            a power of 2, else it can be any positive integer. A typical\n     *            choice would be 4.\n     * @return the requested set of pixel number ranges\n     */\n    queryPolygonInclusive(vertex, fact) {\n        let inclusive = (fact != 0);\n        let nv = vertex.length;\n        //        let ncirc = inclusive ? nv+1 : nv;\n        if (!(nv >= 3)) {\n            console.log(\"not enough vertices in polygon\");\n            return;\n        }\n        let vv = new Array();\n        for (let i = 0; i < nv; ++i) {\n            vv[i] = Vec3.pointing2Vec3(vertex[i]);\n        }\n        let normal = new Array();\n        let flip = 0;\n        let index = 0;\n        let back = false;\n        while (index < vv.length) {\n            let first = vv[index];\n            let medium = null;\n            let last = null;\n            if (index == vv.length - 1) {\n                last = vv[1];\n                medium = vv[0];\n            }\n            else if (index == vv.length - 2) {\n                last = vv[0];\n                medium = vv[index + 1];\n            }\n            else {\n                medium = vv[index + 1];\n                last = vv[index + 2];\n            }\n            normal[index] = first.cross(medium).norm();\n            let hnd = normal[index].dot(last);\n            if (index == 0) {\n                flip = (hnd < 0.) ? -1 : 1;\n                let tmp = new Pointing(first); // TODO not used\n                back = false;\n            }\n            else {\n                let flipThnd = flip * hnd;\n                if (flipThnd < 0) {\n                    let tmp = new Pointing(medium);\n                    vv.splice(index + 1, 1);\n                    normal.splice(index, 1);\n                    back = true;\n                    index -= 1;\n                    continue;\n                }\n                else {\n                    let tmp = new Pointing(first);\n                    back = false;\n                }\n            }\n            normal[index].scale(flip);\n            index += 1;\n        }\n        nv = vv.length;\n        let ncirc = inclusive ? nv + 1 : nv;\n        let rad = new Array(ncirc);\n        rad = rad.fill(Constants.halfpi);\n        //        rad = rad.fill(1.5707963267948966);\n        //        let p = \"1.5707963267948966\";\n        //        rad = rad.fill(parseFloat(p));\n        if (inclusive) {\n            let cf = new CircleFinder(vv);\n            normal[nv] = cf.getCenter();\n            rad[nv] = Hploc.acos(cf.getCosrad());\n        }\n        return this.queryMultiDisc(normal, rad, fact);\n    }\n    ;\n    /**\n     * For NEST schema only\n     *\n     * @param normal:\n     *            Vec3[]\n     * @param rad:\n     *            Float32Array\n     * @param fact:\n     *            The overlapping test will be done at the resolution\n     *            {@code fact*nside}. For NESTED ordering, {@code fact} must be\n     *            a power of 2, else it can be any positive integer. A typical\n     *            choice would be 4.\n     * @return RangeSet the requested set of pixel number ranges\n     */\n    queryMultiDisc(norm, rad, fact) {\n        this.computeBn();\n        let inclusive = (fact != 0);\n        let nv = norm.length;\n        // HealpixUtils.check(nv==rad.lengt0,\"inconsistent input arrays\");\n        if (!(nv == rad.length)) {\n            console.error(\"inconsistent input arrays\");\n            return;\n        }\n        let res = new RangeSet(4 << 1);\n        // Removed code for Scheme.RING\n        let oplus = 0;\n        if (inclusive) {\n            if (!(Math.pow(2, this.order_max - this.order) >= fact)) {\n                console.error(\"invalid oversampling factor\");\n            }\n            if (!((fact & (fact - 1)) == 0)) {\n                console.error(\"oversampling factor must be a power of 2\");\n            }\n            oplus = this.ilog2(fact);\n        }\n        let omax = this.order + oplus; // the order up to which we test\n        // TODO: ignore all disks with radius>=pi\n        //        let crlimit = new Float32Array[omax+1][nv][3];\n        let crlimit = new Array(omax + 1);\n        let o;\n        let i;\n        for (o = 0; o <= omax; ++o) { // prepare data at the required orders\n            crlimit[o] = new Array(nv);\n            let dr = this.bn[o].maxPixrad(); // safety distance\n            for (i = 0; i < nv; ++i) {\n                crlimit[o][i] = new Float64Array(3);\n                crlimit[o][i][0] = (rad[i] + dr > Math.PI) ? -1 : Hploc.cos(rad[i] + dr);\n                crlimit[o][i][1] = (o == 0) ? Hploc.cos(rad[i]) : crlimit[0][i][1];\n                crlimit[o][i][2] = (rad[i] - dr < 0.) ? 1. : Hploc.cos(rad[i] - dr);\n            }\n        }\n        let stk = new pstack(12 + 3 * omax);\n        for (let i = 0; i < 12; i++) { // insert the 12 base pixels in reverse\n            // order\n            stk.push(11 - i, 0);\n        }\n        while (stk.size() > 0) { // as long as there are pixels on the stack\n            // pop current pixel number and order from the stack\n            let pix = stk.ptop();\n            let o = stk.otop();\n            stk.pop();\n            let pv = this.bn[o].pix2vec(pix);\n            let zone = 3;\n            for (let i = 0; (i < nv) && (zone > 0); ++i) {\n                let crad = pv.dot(norm[i]);\n                for (let iz = 0; iz < zone; ++iz) {\n                    if (crad < crlimit[o][i][iz]) {\n                        zone = iz;\n                    }\n                }\n            }\n            if (zone > 0) {\n                this.check_pixel(o, omax, zone, res, pix, stk, inclusive);\n            }\n        }\n        return res;\n    }\n    ;\n    /** Integer base 2 logarithm.\n    @param arg\n    @return the largest integer {@code n} that fulfills {@code 2^n<=arg}.\n    For negative arguments and zero, 0 is returned. */\n    ilog2(arg) {\n        let max = Math.max(arg, 1);\n        return 31 - Math.clz32(max);\n    }\n    ;\n    /** Computes the cosine of the angular distance between two z, phi positions\n      on the unit sphere. */\n    cosdist_zphi(z1, phi1, z2, phi2) {\n        return z1 * z2 + Hploc.cos(phi1 - phi2) * Math.sqrt((1.0 - z1 * z1) * (1.0 - z2 * z2));\n    }\n    /**\n     * @param int o\n     * @param int omax\n     * @param int zone\n     * @param RangeSet pixset\n     * @param long pix\n     * @param pstack stk\n     * @param boolean inclusive\n     */\n    check_pixel(o, omax, zone, pixset, pix, stk, inclusive) {\n        if (zone == 0)\n            return;\n        if (o < this.order) {\n            if (zone >= 3) { // output all subpixels\n                let sdist = 2 * (this.order - o); // the \"bit-shift distance\" between map orders\n                pixset.append1(pix << sdist, ((pix + 1) << sdist));\n            }\n            else { // (zone>=1)\n                for (let i = 0; i < 4; ++i) {\n                    stk.push(4 * pix + 3 - i, o + 1); // add children\n                }\n            }\n        }\n        else if (o > this.order) { // this implies that inclusive==true\n            if (zone >= 2) { // pixel center in shape\n                pixset.append(pix >>> (2 * (o - this.order))); // output the parent pixel at order\n                stk.popToMark(); // unwind the stack\n            }\n            else { // (zone>=1): pixel center in safety range\n                if (o < omax) { // check sublevels\n                    for (let i = 0; i < 4; ++i) { // add children in reverse order\n                        stk.push(4 * pix + 3 - i, o + 1); // add children\n                    }\n                }\n                else { // at resolution limit\n                    pixset.append(pix >>> (2 * (o - this.order))); // output the parent pixel at order\n                    stk.popToMark(); // unwind the stack\n                }\n            }\n        }\n        else { // o==order\n            if (zone >= 2) {\n                pixset.append(pix);\n            }\n            else if (inclusive) { // and (zone>=1)\n                if (this.order < omax) { // check sublevels\n                    stk.mark(); // remember current stack position\n                    for (let i = 0; i < 4; ++i) { // add children in reverse order\n                        stk.push(4 * pix + 3 - i, o + 1); // add children\n                    }\n                }\n                else { // at resolution limit\n                    pixset.append(pix); // output the pixel\n                }\n            }\n        }\n    }\n    /** Returns the maximum angular distance between a pixel center and its\n    corners.\n    @return maximum angular distance between a pixel center and its\n      corners. */\n    maxPixrad() {\n        let zphia = new Zphi(2. / 3., Math.PI / this.nl4);\n        let xyz1 = this.convertZphi2xyz(zphia);\n        let va = new Vec3(xyz1[0], xyz1[1], xyz1[2]);\n        let t1 = 1. - 1. / this.nside;\n        t1 *= t1;\n        let zphib = new Zphi(1 - t1 / 3, 0);\n        let xyz2 = this.convertZphi2xyz(zphib);\n        let vb = new Vec3(xyz2[0], xyz2[1], xyz2[2]);\n        return va.angle(vb);\n    }\n    ;\n    /**\n     * this is a workaround replacing the Vec3(Zphi) constructor.\n     */\n    convertZphi2xyz(zphi) {\n        let sth = Math.sqrt((1.0 - zphi.z) * (1.0 + zphi.z));\n        let x = sth * Hploc.cos(zphi.phi);\n        let y = sth * Hploc.sin(zphi.phi);\n        let z = zphi.z;\n        return [x, y, z];\n    }\n    ;\n    /** Returns a range set of pixels which overlap with a given disk. <p>\n      This method is more efficient in the RING scheme. <p>\n      This method may return some pixels which don't overlap with\n      the polygon at all. The higher {@code fact} is chosen, the fewer false\n      positives are returned, at the cost of increased run time.\n      @param ptg the angular coordinates of the disk center\n      @param radius the radius (in radians) of the disk\n      @param fact The overlapping test will be done at the resolution\n        {@code fact*nside}. For NESTED ordering, {@code fact} must be a power\n        of 2, else it can be any positive integer. A typical choice would be 4.\n      @return the requested set of pixel number ranges  */\n    queryDiscInclusive(ptg, radius, fact) {\n        this.computeBn();\n        let inclusive = (fact != 0);\n        let pixset = new RangeSet();\n        if (radius >= Math.PI) { // disk covers the whole sphere\n            pixset.append1(0, this.npix);\n            return pixset;\n        }\n        let oplus = 0;\n        if (inclusive) {\n            // HealpixUtils.check ((1L<<order_max)>=fact,\"invalid oversampling factor\");\n            if (!((fact & (fact - 1)) == 0)) {\n                console.error(\"oversampling factor must be a power of 2\");\n            }\n            oplus = this.ilog2(fact);\n        }\n        let omax = Math.min(this.order_max, this.order + oplus); // the order up to which we test\n        let vptg = Vec3.pointing2Vec3(ptg);\n        let crpdr = new Array(omax + 1);\n        let crmdr = new Array(omax + 1);\n        let cosrad = Hploc.cos(radius);\n        let sinrad = Hploc.sin(radius);\n        for (let o = 0; o <= omax; o++) { // prepare data at the required orders\n            let dr = this.mpr[o]; // safety distance\n            let cdr = this.cmpr[o];\n            let sdr = this.smpr[o];\n            crpdr[o] = (radius + dr > Math.PI) ? -1. : cosrad * cdr - sinrad * sdr;\n            crmdr[o] = (radius - dr < 0.) ? 1. : cosrad * cdr + sinrad * sdr;\n        }\n        let stk = new pstack(12 + 3 * omax);\n        for (let i = 0; i < 12; i++) { // insert the 12 base pixels in reverse order\n            stk.push(11 - i, 0);\n        }\n        while (stk.size() > 0) { // as long as there are pixels on the stack\n            // pop current pixel number and order from the stack\n            let pix = stk.ptop();\n            let curro = stk.otop();\n            stk.pop();\n            let pos = this.bn[curro].pix2zphi(pix);\n            // cosine of angular distance between pixel center and disk center\n            let cangdist = this.cosdist_zphi(vptg.z, ptg.phi, pos.z, pos.phi);\n            if (cangdist > crpdr[curro]) {\n                let zone = (cangdist < cosrad) ? 1 : ((cangdist <= crmdr[curro]) ? 2 : 3);\n                this.check_pixel(curro, omax, zone, pixset, pix, stk, inclusive);\n            }\n        }\n        return pixset;\n    }\n}\n//# sourceMappingURL=Healpix.js.map","import { Vec3 } from './Vec3.js';\nimport { Zphi } from './Zphi.js';\nexport class Hploc {\n    constructor(ptg) {\n        Hploc.PI4_A = 0.7853981554508209228515625;\n        Hploc.PI4_B = 0.794662735614792836713604629039764404296875e-8;\n        Hploc.PI4_C = 0.306161699786838294306516483068750264552437361480769e-16;\n        Hploc.M_1_PI = 0.3183098861837906715377675267450287;\n        if (ptg) {\n            this.sth = 0.0;\n            this.have_sth = false;\n            this.z = Hploc.cos(ptg.theta);\n            this._phi = ptg.phi;\n            if (Math.abs(this.z) > 0.99) {\n                this.sth = Hploc.sin(ptg.theta);\n                this.have_sth = true;\n            }\n        }\n    }\n    setZ(z) {\n        this.z = z;\n    }\n    ;\n    get phi() {\n        return this._phi;\n    }\n    ;\n    set phi(phi) {\n        this._phi = phi;\n    }\n    ;\n    setSth(sth) {\n        this.sth = sth;\n    }\n    ;\n    toVec3() {\n        var st = this.have_sth ? this.sth : Math.sqrt((1.0 - this.z) * (1.0 + this.z));\n        // var vector = new Vec3(st*Hploc.cos(this.phi),st*Hploc.sin(this.phi),this.z);\n        var vector = new Vec3(st * Math.cos(this.phi), st * Math.sin(this.phi), this.z);\n        return vector;\n    }\n    ;\n    toZphi() {\n        return new Zphi(this.z, this.phi);\n    }\n    static sin(d) {\n        let u = d * Hploc.M_1_PI;\n        let q = Math.floor(u < 0 ? u - 0.5 : u + 0.5);\n        let x = 4.0 * q;\n        d -= x * Hploc.PI4_A;\n        d -= x * Hploc.PI4_B;\n        d -= x * Hploc.PI4_C;\n        if ((q & 1) != 0) {\n            d = -d;\n        }\n        return this.sincoshelper(d);\n    }\n    ;\n    static cos(d) {\n        //\t\tlet u = d * Hploc.M_1_PI - 0.5;\n        let u = d * Hploc.M_1_PI - 0.5;\n        //\t\tu -= 0.5;\n        let q = 1 + 2 * Math.floor(u < 0 ? u - 0.5 : u + 0.5);\n        let x = 2.0 * q;\n        let t = x * Hploc.PI4_A;\n        d = d - t;\n        d -= x * Hploc.PI4_B;\n        d -= x * Hploc.PI4_C;\n        if ((q & 2) == 0) {\n            d = -d;\n        }\n        return Hploc.sincoshelper(d);\n    }\n    ;\n    static sincoshelper(d) {\n        let s = d * d;\n        let u = -7.97255955009037868891952e-18;\n        u = u * s + 2.81009972710863200091251e-15;\n        u = u * s - 7.64712219118158833288484e-13;\n        u = u * s + 1.60590430605664501629054e-10;\n        u = u * s - 2.50521083763502045810755e-08;\n        u = u * s + 2.75573192239198747630416e-06;\n        u = u * s - 0.000198412698412696162806809;\n        u = u * s + 0.00833333333333332974823815;\n        u = u * s - 0.166666666666666657414808;\n        return s * u * d + d;\n    }\n    ;\n    /** This method calculates the arc sine of x in radians. The return\n    value is in the range [-pi/2, pi/2]. The results may have\n    maximum error of 3 ulps. */\n    static asin(d) {\n        return Hploc.mulsign(Hploc.atan2k(Math.abs(d), Math.sqrt((1 + d) * (1 - d))), d);\n    }\n    ;\n    /** This method calculates the arc cosine of x in radians. The\n        return value is in the range [0, pi]. The results may have\n        maximum error of 3 ulps. */\n    static acos(d) {\n        return Hploc.mulsign(Hploc.atan2k(Math.sqrt((1 + d) * (1 - d)), Math.abs(d)), d) + (d < 0 ? Math.PI : 0);\n    }\n    ;\n    static mulsign(x, y) {\n        let sign = Hploc.copySign(1, y);\n        return sign * x;\n    }\n    ;\n    static copySign(magnitude, sign) {\n        return sign < 0 ? -Math.abs(magnitude) : Math.abs(magnitude);\n        // let finalsign = 1;\n        // if (Object.is(finalsign , -0)){\n        // \tsign = -1;\n        // }else if (Object.is(finalsign , 0)){\n        // \tsign = 1;\n        // }else {\n        // \tsign = Math.sign(finalsign);\n        // }\n        // return finalsign * magnitude;\n    }\n    static atanhelper(s) {\n        let t = s * s;\n        let u = -1.88796008463073496563746e-05;\n        u = u * t + (0.000209850076645816976906797);\n        u = u * t + (-0.00110611831486672482563471);\n        u = u * t + (0.00370026744188713119232403);\n        u = u * t + (-0.00889896195887655491740809);\n        u = u * t + (0.016599329773529201970117);\n        u = u * t + (-0.0254517624932312641616861);\n        u = u * t + (0.0337852580001353069993897);\n        u = u * t + (-0.0407629191276836500001934);\n        u = u * t + (0.0466667150077840625632675);\n        u = u * t + (-0.0523674852303482457616113);\n        u = u * t + (0.0587666392926673580854313);\n        u = u * t + (-0.0666573579361080525984562);\n        u = u * t + (0.0769219538311769618355029);\n        u = u * t + (-0.090908995008245008229153);\n        u = u * t + (0.111111105648261418443745);\n        u = u * t + (-0.14285714266771329383765);\n        u = u * t + (0.199999999996591265594148);\n        u = u * t + (-0.333333333333311110369124);\n        return u * t * s + s;\n    }\n    ;\n    static atan2k(y, x) {\n        let q = 0.;\n        if (x < 0) {\n            x = -x;\n            q = -2.;\n        }\n        if (y > x) {\n            let t = x;\n            x = y;\n            y = -t;\n            q += 1.;\n        }\n        return Hploc.atanhelper(y / x) + q * (Math.PI / 2);\n    }\n    ;\n    /** This method calculates the arc tangent of y/x in radians, using\n    the signs of the two arguments to determine the quadrant of the\n    result. The results may have maximum error of 2 ulps. */\n    static atan2(y, x) {\n        let r = Hploc.atan2k(Math.abs(y), x);\n        r = Hploc.mulsign(r, x);\n        if (Hploc.isinf(x) || x == 0) {\n            r = Math.PI / 2 - (Hploc.isinf(x) ? (Hploc.copySign(1, x) * (Math.PI / 2)) : 0);\n        }\n        if (Hploc.isinf(y)) {\n            r = Math.PI / 2 - (Hploc.isinf(x) ? (Hploc.copySign(1, x) * (Math.PI * 1 / 4)) : 0);\n        }\n        if (y == 0) {\n            r = (Hploc.copySign(1, x) == -1 ? Math.PI : 0);\n        }\n        return Hploc.isnan(x) || Hploc.isnan(y) ? NaN : Hploc.mulsign(r, y);\n    }\n    ;\n    /** Checks if the argument is a NaN or not. */\n    static isnan(d) {\n        return d != d;\n    }\n    ;\n    /** Checks if the argument is either positive or negative infinity. */\n    static isinf(d) {\n        return Math.abs(d) === +Infinity;\n    }\n    ;\n}\nHploc.PI4_A = 0.7853981554508209228515625;\nHploc.PI4_B = 0.794662735614792836713604629039764404296875e-8;\nHploc.PI4_C = 0.306161699786838294306516483068750264552437361480769e-16;\nHploc.M_1_PI = 0.3183098861837906715377675267450287;\n//# sourceMappingURL=Hploc.js.map","import { Hploc } from './Hploc.js';\nexport class Pointing {\n    /**\n     *\n     * @param {*} vec3 Vec3.js\n     * @param {*} mirror\n     * @param {*} in_theta radians\n     * @param {*} in_phi radians\n     */\n    constructor(vec3, mirror, in_theta, in_phi) {\n        if (vec3 != null) {\n            this.theta = Hploc.atan2(Math.sqrt(vec3.x * vec3.x + vec3.y * vec3.y), vec3.z);\n            if (mirror) {\n                this.phi = -Hploc.atan2(vec3.y, vec3.x);\n            }\n            else {\n                this.phi = Hploc.atan2(vec3.y, vec3.x);\n            }\n            if (this.phi < 0.0) {\n                this.phi = this.phi + 2 * Math.PI;\n            }\n            if (this.phi >= 2 * Math.PI) {\n                this.phi = this.phi - 2 * Math.PI;\n            }\n        }\n        else {\n            this.theta = in_theta;\n            this.phi = in_phi;\n        }\n    }\n}\n//# sourceMappingURL=Pointing.js.map","export class RangeSet {\n    /**\n     * @param int cap: initial capacity\n     */\n    constructor(cap) {\n        if (cap < 0)\n            console.error(\"capacity must be positive\");\n        this.r = new Int32Array(cap << 1);\n        this.sz = 0;\n    }\n    ;\n    /** Append a single-value range to the object.\n    @param val value to append */\n    append(val) {\n        this.append1(val, val + 1);\n    }\n    ;\n    /** Append a range to the object.\n   @param a first long in range\n   @param b one-after-last long in range */\n    append1(a, b) {\n        if (a >= b)\n            return;\n        if ((this.sz > 0) && (a <= this.r[this.sz - 1])) {\n            if (a < this.r[this.sz - 2])\n                console.error(\"bad append operation\");\n            if (b > this.r[this.sz - 1])\n                this.r[this.sz - 1] = b;\n            return;\n        }\n        // this.ensureCapacity(this.sz+2);\n        let cap = this.sz + 2;\n        if (this.r.length < cap) {\n            let newsize = Math.max(2 * this.r.length, cap);\n            let rnew = new Int32Array(newsize);\n            rnew.set(this.r);\n            this.r = rnew;\n        }\n        this.r[this.sz] = a;\n        this.r[this.sz + 1] = b;\n        this.sz += 2;\n    }\n    ;\n    /** Make sure the object can hold at least the given number of entries.\n     * @param cap int\n     * */\n    ensureCapacity(cap) {\n        if (this.r.length < cap)\n            this.resize(Math.max(2 * this.r.length, cap));\n    }\n    ;\n    /**\n     * @param newsize int\n     */\n    resize(newsize) {\n        if (newsize < this.sz)\n            console.error(\"requested array size too small\");\n        if (newsize == this.r.length)\n            return;\n        let rnew = new Int32Array(newsize);\n        let sliced = this.r.slice(0, this.sz + 1);\n        //\t\tthis.arrayCopy(this.r, 0, rnew, 0, this.sz);\n        this.r = sliced;\n    }\n    ;\n}\n//# sourceMappingURL=RangeSet.js.map","/**\n * Partial porting to Javascript of Vec3.java from Healpix3.30\n */\nimport { Hploc } from './Hploc.js';\nimport { Pointing } from './Pointing.js';\nexport class Vec3 {\n    constructor(in_x, in_y, in_z) {\n        if (in_x instanceof Pointing) {\n            let ptg = in_x;\n            let sth = Hploc.sin(ptg.theta);\n            this.x = sth * Hploc.cos(ptg.phi);\n            this.y = sth * Hploc.sin(ptg.phi);\n            this.z = Hploc.cos(ptg.theta);\n        }\n        else {\n            this.x = in_x;\n            this.y = in_y;\n            this.z = in_z;\n        }\n    }\n    getX() {\n        return this.x;\n    }\n    ;\n    getY() {\n        return this.y;\n    }\n    ;\n    getZ() {\n        return this.z;\n    }\n    ;\n    /** Scale the vector by a given factor\n    @param n the scale factor */\n    scale(n) {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n    }\n    ;\n    /** Vector cross product.\n    @param v another vector\n    @return the vector cross product between this vector and {@code v} */\n    cross(v) {\n        return new Vec3(this.y * v.z - v.y * this.z, this.z * v.x - v.z * this.x, this.x * v.y - v.x * this.y);\n    }\n    ;\n    /** Vector addition\n        * @param v the vector to be added\n        * @return addition result */\n    add(v) {\n        return new Vec3(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n    ;\n    /** Normalize the vector */\n    normalize() {\n        let d = 1. / this.length();\n        this.x *= d;\n        this.y *= d;\n        this.z *= d;\n    }\n    ;\n    /** Return normalized vector */\n    norm() {\n        let d = 1. / this.length();\n        return new Vec3(this.x * d, this.y * d, this.z * d);\n    }\n    ;\n    /** Vector length\n    @return the length of the vector. */\n    length() {\n        return Math.sqrt(this.lengthSquared());\n    }\n    ;\n    /** Squared vector length\n        @return the squared length of the vector. */\n    lengthSquared() {\n        return this.x * this.x + this.y * this.y + this.z * this.z;\n    }\n    ;\n    /** Computes the dot product of the this vector and {@code v1}.\n     * @param v1 another vector\n     * @return dot product */\n    dot(v1) {\n        return this.x * v1.x + this.y * v1.y + this.z * v1.z;\n    }\n    ;\n    /** Vector subtraction\n     * @param v the vector to be subtracted\n     * @return subtraction result */\n    sub(v) {\n        return new Vec3(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    ;\n    /** Angle between two vectors.\n    @param v1 another vector\n    @return the angle in radians between this vector and {@code v1};\n      constrained to the range [0,PI]. */\n    angle(v1) {\n        return Hploc.atan2(this.cross(v1).length(), this.dot(v1));\n    }\n    /** Invert the signs of all components */\n    flip() {\n        this.x *= -1.0;\n        this.y *= -1.0;\n        this.z *= -1.0;\n    }\n    static pointing2Vec3(pointing) {\n        let sth = Hploc.sin(pointing.theta);\n        let x = sth * Hploc.cos(pointing.phi);\n        let y = sth * Hploc.sin(pointing.phi);\n        let z = Hploc.cos(pointing.theta);\n        return new Vec3(x, y, z);\n    }\n    ;\n}\n//# sourceMappingURL=Vec3.js.map","/**\n * Partial porting to Javascript of Xyf.java from Healpix3.30\n */\nexport class Xyf {\n    constructor(x, y, f) {\n        this.ix = x;\n        this.iy = y;\n        this.face = f;\n    }\n}\n//# sourceMappingURL=Xyf.js.map","export class Zphi {\n    /** Creation from individual components */\n    constructor(z_, phi_) {\n        this.z = z_;\n        this.phi = phi_;\n    }\n    ;\n}\n//# sourceMappingURL=Zphi.js.map","export { Constants } from \"./Constants.js\";\nexport { pstack } from \"./pstack.js\";\nexport { CircleFinder } from './CircleFinder.js';\nexport { Fxyf } from './Fxyf.js';\nexport { Healpix } from './Healpix.js';\nexport { Pointing } from './Pointing.js';\nexport { RangeSet } from './RangeSet.js';\nexport { Vec3 } from './Vec3.js';\nexport { Xyf } from './Xyf.js';\nexport { Zphi } from './Zphi.js';\nexport { Hploc } from './Hploc.js';\n//# sourceMappingURL=index.js.map","export class pstack {\n    /** Creation from individual components */\n    constructor(sz) {\n        this.p = new Array(sz);\n        this.o = new Int32Array(sz);\n        this.s = 0;\n        this.m = 0;\n    }\n    ;\n    /**\n     * @param p long\n     * @param o int\n     */\n    push(p_, o_) {\n        this.p[this.s] = p_;\n        this.o[this.s] = o_;\n        ++this.s;\n    }\n    ;\n    pop() {\n        --this.s;\n    }\n    ;\n    popToMark() {\n        this.s = this.m;\n    }\n    ;\n    size() {\n        return this.s;\n    }\n    ;\n    mark() {\n        this.m = this.s;\n    }\n    ;\n    otop() {\n        return this.o[this.s - 1];\n    }\n    ;\n    ptop() {\n        return this.p[this.s - 1];\n    }\n    ;\n}\n//# sourceMappingURL=pstack.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var inProgress = {};\nvar dataWebpackPrefix = \"wcslight:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"wcslight.min\": 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkwcslight\"] = self[\"webpackChunkwcslight\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","\nexport {WCSLight} from './WCSLight.js'\n\nexport {AstroCoords} from './model/AstroCoords.js'\nexport {CartesianCoords} from './model/CartesianCoords.js'\nexport {CoordsType} from './model/CoordsType.js'\nexport {CutoutResult} from './model/CutoutResult.js'\nexport {EquatorialCoords} from './model/EquatorialCoords.js'\nexport {GalacticCoords} from './model/GalacticCoords.js'\nexport {HEALPixXYSpace} from './model/HEALPixXYSpace.js'\nexport {HMSCoords} from './model/HMSCoords.js'\nexport {ICoordsFormat} from './model/ICoordsFormat.js'\nexport {ImagePixel} from './model/ImagePixel.js'\nexport {NumberType} from './model/NumberType.js'\nexport {Point} from './model/Point.js'\nexport {SexagesimalCoords} from './model/SexagesimalCoords.js'\nexport {SphericalCoords} from './model/SphericalCoords.js'\nexport { \n    sphericalToCartesian, \n    cartesianToSpherical, \n    sphericalToAstro, \n    fillSpherical,\n    astroToSpherical, \n    degToRad, \n    fillAstro, \n    radToDeg } from './model/Utils.js'\nexport {AbstractProjection} from './projections/AbstractProjection.js'\nexport {HiPSHelper} from './projections/HiPSHelper.js'\nexport {HiPSProj} from './projections/hips/HiPSProj.js'\nexport {MercatorProjection} from './projections/mercator/MercatorProjection.js'\n\nexport { HiPSFITS } from './projections/hips/HiPSFITS.js'"],"names":[],"sourceRoot":""}