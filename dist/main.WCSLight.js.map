{"version":3,"sources":["webpack://wcslight/webpack/universalModuleDefinition","webpack://wcslight/./src/WCSLight.js","webpack://wcslight/./src/exceptions/HPXTilesMapNotDefined.js","webpack://wcslight/./src/exceptions/ProjectionNotFound.js","webpack://wcslight/./src/model/ImagePixel.js","webpack://wcslight/./src/projections/AbstractProjection.js","webpack://wcslight/./src/projections/HEALPixProjection.js","webpack://wcslight/./src/projections/MercatorProjection.js","webpack://wcslight/./src/projections/ProjFactory.js"],"names":["WCSLight","center","radius","pxsize","outProjectionName","inProjectionName","_tilesMap","undefined","_outprojection","ProjFactory","get","_inprojection","generatePxMatrix","HEALPixProjection","generateTilesMap","getPxMap","e","console","error","getError","exit","inData","tileno","isNumber","forEach","imgpx","pxij","world2pix","ra","dec","pxval","getValue","i","j","_pxmap","HPXTilesMapNotDefined","projection","_error","ProjectionNotFound","ImagePixel","_ra","_dec","_i","_j","val","_value","AbstractProjection","TypeError","prepareFITSHeader","pix2world","RAD2DEG","Math","PI","DEG2RAD","H","K","healpixResMapK0","pxXtile","THETAX","Hploc","asin","nside","computeNside","_hp","Healpix","phiTheta_rad","convert2PhiTheta","bbox","computeBbox","degToRad","_tilesSet","hp","queryPolygonInclusive","theta0px","_HIPSResMapK0","k","log","Match","round","point","phitheta_rad","phiTheta_deg","astroDegToSpherical","phi_rad","phi","theta_rad","theta","raDeg","decDeg","phiThetaDeg","phiThetaRad","phiDeg","thetaDeg","degrees","radius_rad","push","Pointing","r","raDecMap","tilesMap","length","item","astroDegToSphericalRad","getRA","getDec","ptg","phiRad","tile","ang2pix","pixno","naxis1","naxis2","_naxis1","_naxis2","_pixno","_xyGridProj","NaN","isNaN","EvalError","healpix","cornersVec3","getBoundariesWithStep","pointings","a","b","abs","coThetaRad","decRad","raRad","xyDeg","world2intermediate","gridPointsDeg","max_y","min_y","max_x","min_x","result","xy","pix2intermediate","raDecDeg","intermediate2world","xyCoords","skyCoords","i_norm","j_norm","xInterval","yInterval","yMean","x","y","Yx","sigma","w","thetaRad","x_c","floor","radeg","decdeg","phirad","thetarad","ij","intermediate2pix","x_grid","y_grid","sin","sqrt","phi_c","minra","mindec","deltara","deltadec","fotw","pxscale","_nside","pix","projectOnHPXGrid","MercatorProjection","computeSquare","_minra","_mindec","_pxsize","_fitsheader","d","ps","_stepra","_stepdec","row","Array","ii","projectionName"],"mappings":"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","file":"main.WCSLight.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"wcslight\"] = factory();\n\telse\n\t\troot[\"wcslight\"] = factory();\n})(window, function() {\nreturn ","\"use strict\";\n/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n * \n * @link   github https://github.com/fab77/wcslight\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n\nimport ProjFactory from \"./projections/ProjFactory\";\nimport HEALPixProjection from \"./projections/HEALPixProjection\";\n\nimport HPXTilesMapNotDefined from \"./exceptions/HPXTilesMapNotDefined\";\n\nclass WCSLight {\n\n    _inprojection;\n    _outprojection;\n    // used only when HEALPix is the input projection. Map of (RA, Dec, outp_i, outp_j) points organised per tile.\n    _tilesMap; \n\n    /**\n     * \n     * @param {*} center {\"ra\":,\"dec\"} in degrees\n     * @param {*} radius decimal deg\n     * @param {*} pxsize decimal deg\n     * @param {*} projection from constant?\n     */\n    constructor(center, radius, pxsize, outProjectionName, inProjectionName) {\n        this._tilesMap = undefined;\n        try {\n            this._outprojection = ProjFactory.get(center, radius, pxsize, outProjectionName);\n            this._inprojection = ProjFactory.get(center, radius, pxsize, inProjectionName);\n            this._outprojection.generatePxMatrix();\n            if (this._inprojection instanceof HEALPixProjection) {\n                this._tilesMap = this._inprojection.generateTilesMap(this._outprojection.getPxMap());\n                // the program calling WCSLight must iterate over tilesMap and:\n                //  - retrieve the FITS file and extract the data (pixels values)\n                //  - call WCS process(data, tilesMap[n]) which fills the values in the output for the given input tile\n            }\n        } catch (e) {\n            console.error(e.getError());\n            exit(-1);\n        }\n\n    }\n\n    processData(inData, tileno) {\n\n        if (isNumber(tileno)){ // HEALPix in projection\n        // foreach ImageItem ii in this._tilesMap[tileno]:\n            //  - pxval = this._inprojection.world2pix(ii.ra, ii.dec)\n            //  - this._outprojection._pxmap[ii.i][ii.j] = pxval\n            this._tilesMap[tileno].forEach(imgpx => {\n                let pxij = this._inprojection.world2pix(imgpx.ra, imgpx.dec);\n                let pxval = this._inprojection.getValue(pxij.i, pxij.j);    // <-- TODO to be implemented!!!\n                this._outprojection._pxmap[imgpx.i][imgpx.j] = pxval\n            });\n        }\n        \n    }\n\n    /**\n     * It should be called only when HEALPix is used as input projection. \n     */\n    getHEALPixTilesMap () {\n        if (this._tilesMap === undefined) {\n            throw new HPXTilesMapNotDefined();\n        }\n        return this._tilesMap;\n    }\n\n}\n\nexport default WCSLight;","\"use strict\";\n/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n * \n * @link   github https://github.com/fab77/wcslight\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n\nclass HPXTilesMapNotDefined {\n\n    _error;\n\n    constructor(projection)  {\n        this._error = \"HEALPix tiles map not defined. Check if HEALPix is used as input projection.\";\n    }\n\n    getError() {\n        return this._error;\n    }\n\n}\n\nexport default HPXTilesMapNotDefined;","\"use strict\";\n/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n * \n * @link   github https://github.com/fab77/wcslight\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n\nclass ProjectionNotFound {\n\n    _error;\n\n    constructor(projection)  {\n        this._error = \"Projection \" + projection + \" not found\";\n    }\n\n    getError() {\n        return this._error;\n    }\n\n}\n\nexport default ProjectionNotFound;","\"use strict\";\n/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n * \n * @link   github https://github.com/fab77/wcslight\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n\nclass ImagePixel {\n    _ra;    // decimal degrees\n    _dec;   // decimal degrees\n    _i;     // int\n    _j;     // int\n    _value;\n\n    /**\n     * \n     * @param {*} ra world coordinate\n     * @param {*} dec world coordinate\n     * @param {*} i pixel coordinate in FITS\n     * @param {*} j pixel coordinate in FITS\n     */\n    constructor (ra, dec, i, j) {\n        this._ra = ra;\n        this._dec = dec;\n        this._i = i;\n        this._j = j;\n    }\n\n    /**\n     * @param {any} val\n     */\n    set value(val) {\n        this._value = val;\n    }\n\n    getRA() {\n        return this._ra;\n    }\n\n    getDec() {\n        return this._dec;\n    }\n\n    geti() {\n        return this._i;\n    }\n\n    getj() {\n        return this._j;\n    }\n}\nexport default ImagePixel;","\"use strict\";\n/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n * \n * @link   github https://github.com/fab77/wcslight\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n\nclass AbstractProjection {\n\n    constructor(){\n\n        if (new.target === AbstractProjection) {\n            throw new TypeError(\"Abstract class cannot be instantiated.\");\n        }\n\n        if (this.prepareFITSHeader === undefined) {\n            throw new TypeError(\"Must override prepareFITSHeader()\");\n        }\n\n        if (this.generatePxMatrix === undefined) {\n            throw new TypeError(\"Must override generateMatrix()\");\n        }\n\n        /**\n         * \n         * @param {double} i \n         * @param {double} j \n         * @returns RA, Dec\n         */\n        if (this.pix2world === undefined) {\n            throw new TypeError(\"Must override pix2world(i, j)\");\n        }\n\n        /**\n         * \n         * @param {double} ra \n         * @param {double} dec \n         * @returns [X, Y] projection on the cartesian plane of RA and Dec\n         */\n        if (this.world2pix === undefined) {\n            throw new TypeError(\"Must override world2pix(ra, dec)\");\n        }\n\n    }\n\n}\n\nexport default AbstractProjection;","\"use strict\";\n/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n * \n * @link   github https://github.com/fab77/wcslight\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n\n\nimport AbstractProjection from './AbstractProjection';\nimport {Hploc, Vec3, Pointing} from \"healpixjs\";\n// import Healpix from \"healpixjs\";\n\nconst RAD2DEG = 180 / Math.PI;\nconst DEG2RAD = Math.PI / 180;\nconst H = 4;\nconst K = 3;\n\nconst healpixResMapK0 = [58.6, 0, 1];\nconst pxXtile = 512;\n\n\nclass HEALPixProjection extends AbstractProjection {\n\n\n\n\t\n\n    _deltara;//NOT USED\n    _deltadec;//NOT USED\n    _minra;//NOT USED\n    _mindec;//NOT USED\n    _stepra;//NOT USED\n    _stepdec;//NOT USED\n    _np1;//NOT USED\n    _np2;//NOT USED\n    _scale;//NOT USED\n\n    _fotw;\n    _naxis1;\n    _naxis2;\n    _pixno;\n    THETAX;\n\tMAX_TILES = 20;\n\t_HIPSResMapK0 = [58.6/pxXtile, 0, 1];\n\t// _pxsize;\n\t// _radius;\n\t_tilesSet;\n\t_hp;\n    /** \n     * the conversion from RA, Deg to pixel (i, j) goes in this way:\n     * convert (RA, Dec) to to intermediate coordinates (X, Y) World2Intermediate\n     * convert (X, Y) to pixel coordinates (i, j)\n     */ \n    _xyGridProj; // intermediate coordinates in the X, Y plane\n\n\t/**\n\t * \n\t * @param {*} center {ra, dec} in decimal degrees\n\t * @param {*} radius decimal degrees\n\t * @param {*} pxsize decimal degrees\n\t */\n    constructor (center, radius, pxsize) {\n        \n\t\tsuper();\n        this.THETAX = Hploc.asin( (K - 1)/K );\n\t\tlet nside = this.computeNside(pxsize);\n\t\tthis._hp = new Healpix(nside);\n\t\tlet phiTheta_rad = this.convert2PhiTheta(center);\n\t\tlet bbox = this.computeBbox(phiTheta_rad, this.degToRad(radius));\n\t\tthis._tilesSet = hp.queryPolygonInclusive(bbox, 32);\n\t\t\n    }\n\n\t/**\n\t * Table 1 - ref paper HEALPix — a Framework for High Resolution Discretization,\n\t * and Fast Analysis of Data Distributed on the Sphere\n\t * K. M. G´orski1,2, E. Hivon3,4, A. J. Banday5, B. D. Wandelt6,7, F. K. Hansen8, M.\n\t * Reinecke5, M. Bartelman9\n\t */\n\t/**\n\t * \n\t * @param {decimal degrees} pxsize \n\t * @returns {int} nside\n\t */\n\tcomputeNside(pxsize){\n\t\t/**\n\t\t * with same order k (table 1), HIPS angular resolution is higher of order of 512 (2^9) pixels than \n\t\t * the HEALPix. This is because each tile in a HiPS is represented by default by 512x512 pixels.\\\n\t\t * Angular resolution of different HEALPix orders in respect to the order 0, can be calculated this\n\t\t * way:\n\t\t * \n\t\t * \tL(k) = L(0) / 2^k = 58.6 / 2^k\n\t\t * \n\t\t * Therefore, in the case of HiPS we need to take into account the extra resolution given by the \n\t\t * 512x512 (2^9) tiles. In this case the above becomes:\n\t\t * \t\n\t\t * \tL(k) = L(0) / (2^k * 2^9) \n\t\t * \n\t\t * Though, in order to compute the required order starting from the pxsize desired (in input) we\n\t\t * need to perform these steps:\n\t\t * \n\t\t * \tpxsize = L(k) = L(0) / (2^k * 2^9)\n\t\t * \t2^k = L(0) / (pxsize * 2^9)\n\t\t *  k * Log 2 = Log L(0) - Log (pxsize * 2^9)\n\t\t * \tk = Log (L(0)/2) - Log (pxsize * 2^8)\n\t\t * \n\t\t */\n\t\tlet theta0px = this._HIPSResMapK0[0];\n\t\tlet k = Math.log(theta0px/2) - Math.log(pxsize * 2**8);\n\t\tk = Match.round(k);\n\t\tlet nside = 2**k;\n\t\treturn nside;\n\t\t\n\t}\n\n\t/**\n\t * \n\t * @param {Object {ra, dec}} point  decimal degrees\n\t * @returns {Object {phi_rad, theta_rad}} in radians\n\t */\n\tconvert2PhiTheta (point) {\n\t\tlet phitheta_rad = {};\n\t\tlet phiTheta_deg = this.astroDegToSpherical(point.ra, point.dec);\n\t\tphitheta_rad.phi_rad = this.degToRad(phiTheta_deg.phi);\n        phitheta_rad.theta_rad = this.degToRad(phiTheta_deg.theta);\n\t\treturn phitheta_rad;\n\t}\n\n\tastroDegToSphericalRad(raDeg, decDeg) {\n\t\tlet phiThetaDeg = this.astroDegToSpherical(raDeg, decDeg);\n\t\tlet phiThetaRad = {\n\t\t\tphi_rad: degToRad(phiThetaDeg.phiDeg),\n\t\t\ttheta_rad: degToRad(phiThetaDeg.thetaDeg)\n\t\t}\n\t\treturn phiThetaRad;\n\t}\n\n\tdegToRad(degrees) {\n\t\treturn (degrees / 180 ) * Math.PI ;\n\t}\n\n\tastroDegToSpherical(raDeg, decDeg){\n\t\n\t\tlet phiDeg, thetaDeg;\n\t\tphiDeg = raDeg;\n\t\tif (phiDeg < 0){\n\t\t\tphiDeg += 360;\n\t\t}\n\t\t\n\t\tthetaDeg = 90 - decDeg;\n\t\t\n\t\treturn {\n\t\t\tphi: phiDeg,\n\t\t\ttheta: thetaDeg\n\t\t};\n\t}\n\n\t/**\n\t * \n\t * @param {Object {phi_rad, theta_rad}} phiTheta_rad Center of the circle in radians\n\t * @param {decimal} radius_rad Radius of the circle in radians\n\t * @returns \n\t */\n\tcomputeBbox(phiTheta_rad, radius_rad) {\n\n\t\tlet bbox = [];\n\t\tbbox.push(new Pointing(null, false, phiTheta_rad.theta_rad-r, phiTheta_rad.phi_rad-r));\n\t\tbbox.push(new Pointing(null, false, phiTheta_rad.theta_rad-r, phiTheta_rad.phi_rad+r));\n\t\tbbox.push(new Pointing(null, false, phiTheta_rad.theta_rad+r, phiTheta_rad.phi_rad+r));\n\t\tbbox.push(new Pointing(null, false, phiTheta_rad.theta_rad-r, phiTheta_rad.phi_rad-r));\n\n        return bbox;\n\t}\n\n\t/**\n\t * Generates an array where the key is the HPX tile number and the value is an array of {ImageItem.js} from the output projected image\n\t * @param {Array[Array[ImageItem]]} raDecMap Map of RA Dec generated in the OUTPUT projection with generatePxMatrix()\n\t * @returns {} tilesMap\n\t */\n\tgenerateTilesMap(raDecMap) {\n\t\tlet tilesMap = [];\n\t\t// rows\n\t\tfor (let i = 0; i < raDecMap.length; i++) {\n\t\t\t// cols\n\t\t\tfor (let j = 0; j < raDecMap[i].length; j++) {\n\t\t\t\tlet item = raDecMap[i][j];\n\t\t\t\tlet phiTheta_rad = astroDegToSphericalRad(item.getRA(), item.getDec());\n\t\t\t\tlet ptg = new Pointing(null, false, phiTheta_rad.theta_rad, phiTheta_rad.phiRad)\n\t\t\t\tlet tile = this._hp.ang2pix(ptg);\n\t\t\t\tif (tilesMap[tile].length == 0){\n\t\t\t\t\ttilesMap[tile] = [];\n\t\t\t\t}\n\t\t\t\ttilesMap[tile].push(item);\n\t\t\t}\n\t\t}\n\t\treturn tilesMap;\n\t}\n\t\n\n    init(nside, pixno, naxis1, naxis2) {\n\n        this._naxis1 = naxis1;\n        this._naxis2 = naxis2;\n        this._pixno = pixno;\n\n        this._xyGridProj = {\n\t\t\t\"min_y\": NaN,\n\t\t\t\"max_y\": NaN,\n\t\t\t\"min_x\": NaN,\n\t\t\t\"max_x\": NaN,\n\t\t\t\"gridPointsDeg\": []\n\t\t}\n\t\tif (isNaN(nside)){\n\t\t\tthrow new EvalError(\"nside not set\");\n\t\t}\n\n\t\tlet healpix = new Healpix(nside);\n\t\tlet cornersVec3 = healpix.getBoundariesWithStep(this._pixno, 1);\n\t\tlet pointings = [];\n\t\t\n\t\tfor (let i = 0; i < cornersVec3.length; i++) {\n\t\t\tpointings[i] = new Pointing(cornersVec3[i]);\n\t\t\tif (i >= 1){\n                let a = pointings[i-1].phi;\n                let b = pointings[i].phi;\n                // case when RA is just crossing the origin (e.g. 357deg - 3deg)\n                if (Math.abs(a - b) > Math.PI) {\n                    if (pointings[i-1].phi < pointings[i].phi) {\n                        pointings[i-1].phi += 2 * Math.PI;\n                    }else{\n                        pointings[i].phi += 2 * Math.PI;\n                    }\n                }    \n            }\n\t\t}\n\n\t\tfor (let j = 0; j < pointings.length; j++) {\n\t\t\tlet coThetaRad = pointings[j].theta;\n            // HEALPix works with colatitude (0 North Pole, 180 South Pole)\n            // converting the colatitude in latitude (dec)\n\t\t\tlet decRad = Math.PI/2 - coThetaRad;\n\n\t\t\tlet raRad = pointings[j].phi;\n\t\t\t\n\t\t\t// projection on healpix grid\n\t\t\tlet xyDeg = this.world2intermediate(raRad, decRad);\n\t\t\tthis._xyGridProj.gridPointsDeg[j * 2] = xyDeg[0];\n\t\t\tthis._xyGridProj.gridPointsDeg[j * 2 + 1] = xyDeg[1];\n\n\t\t\tif (isNaN(this._xyGridProj.max_y) || xyDeg[1] > this._xyGridProj.max_y ) {\n\t\t\t\tthis._xyGridProj.max_y = xyDeg[1];\n\t\t\t}\n\t\t\tif (isNaN(this._xyGridProj.min_y) || xyDeg[1] < this._xyGridProj.min_y) {\n\t\t\t\tthis._xyGridProj.min_y = xyDeg[1];\n\t\t\t}\n\t\t\tif (isNaN(this._xyGridProj.max_x) || xyDeg[0] > this._xyGridProj.max_x) {\n\t\t\t\tthis._xyGridProj.max_x = xyDeg[0];\n\t\t\t}\n\t\t\tif (isNaN(this._xyGridProj.min_x) || xyDeg[0] < this._xyGridProj.min_x) {\n\t\t\t\tthis._xyGridProj.min_x = xyDeg[0];\n\t\t\t}\n\n\t\t}\n    }\n\n    pix2world (i, j) {\n        let result = {\n            \"skyCoords\": [],\n\t\t\t\"xyCoords\": []\n        };\n\n        let xy = this.pix2intermediate(i, j);\n\t\tlet raDecDeg = this.intermediate2world(xy[0], xy[1]);\n\n\t\tif (raDecDeg[0] > 360){\n\t\t\traDecDeg[0] -= 360;\n\t\t}\n\n        result.xyCoords = xy;\n        result.skyCoords = raDecDeg;\n\n        return result;\n\n\t\t// return {\n\t\t// \t\"skyCoords\": [raDecDeg[0], raDecDeg[1]],\n\t\t// \t\"xyCoords\": [x, y]\n\t\t// };\n    }\n\n    pix2intermediate (i, j) {\n        /**\n\t \t * (i_norm,w_pixel) = (0,0) correspond to the lower-left corner of the facet in the image\n\t\t * (i_norm,w_pixel) = (1,1) is the upper right corner\n\t\t * dimamond in figure 1 from \"Mapping on the HEalpix grid\" paper\n\t\t * (0,0) leftmost corner\n\t\t * (1,0) upper corner\n\t\t * (0,1) lowest corner\n\t\t * (1,1) rightmost corner\n\t\t * Thanks YAGO! :p\n\t\t */\n        let i_norm = (i + 0.5) / this._naxis1;\n\t\tlet j_norm = (j + 0.5) / this._naxis2;\n\n        let xInterval = Math.abs(this._xyGridProj.max_x - this._xyGridProj.min_x) / 2.0;\n\t\tlet yInterval = Math.abs(this._xyGridProj.max_y - this._xyGridProj.min_y) / 2.0;\n\t\tlet yMean = (this._xyGridProj.max_y + this._xyGridProj.min_y) / 2.0;\n\n        // bi-linear interpolation\n\t\tlet x = this._xyGridProj.max_x - xInterval * (i_norm + j_norm);\n\t\tlet y = yMean - yInterval * (j_norm - i_norm);\n\t\t\n        return [x, y];\n    }\n\n\n    intermediate2world(x, y) {\n\n        let phiDeg, thetaDeg;\n\t\tlet Yx = 90 * (K - 1) / H;\n\n\t\t\n\n\t\tif (Math.abs(y) <= Yx) { // equatorial belts\n\n\t\t\tphiDeg = x;\n\t\t\tthetaDeg = Math.asin( (y  * H) / (90 * K)) * RAD2DEG;\n\n\t\t} else if (Math.abs(y) > Yx) { // polar regions\n\n\t\t\tlet sigma = (K + 1) / 2 - Math.abs(y * H) / 180;\n\t\t\tlet w = 0; // omega\n\t\t\tif (K % 2 !== 0 || thetaRad > 0) { // K odd or thetax > 0\n\t\t\t\tw = 1;\n\t\t\t}\n\t\t\tlet x_c = -180 + ( 2 * Math.floor((x + 180) * H/360 + (1 - w) /2  ) + w) * (180 / H);\n\t\t\tphiDeg = x_c + ( x - x_c) / sigma;\n\t\t\tlet thetaRad = Hploc.asin( 1 - (sigma * sigma) / K );\n\t\t\tthetaDeg = thetaRad * RAD2DEG;\n\t\t\tif (y <= 0){\n\t\t\t\tthetaDeg *= -1;\n\t\t\t}\n\t\t}\n\t\treturn [phiDeg, thetaDeg];\n\n    }\n    \n\n    /**\n     * \n     * @param {*} radeg \n     * @param {*} decdeg\n     *  \n     */\n    world2pix (radeg, decdeg) {\n        let phirad = radeg * DEG2RAD;\n\t\tlet thetarad = decdeg * DEG2RAD;\n        let xy = this.world2intermediate(phirad, thetarad);\n        let ij = this.intermediate2pix(xy[0], xy[1]);\n        return ij;\n    }\n\n    \n    /**\n     * Projection of the World coordinates into the intermediate coordinates plane (Paper .....)\n     * @param {*} phiRad \n     * @param {*} thetaRad \n     * @returns \n     */\n     world2intermediate(phiRad, thetaRad) {\n        let x_grid, y_grid;\n\n\t\tif ( Math.abs(thetaRad) <= this.THETAX) { // equatorial belts\n\t\t\tx_grid = phiRad * RAD2DEG;\n\t\t\t\n\t\t\ty_grid = Hploc.sin(thetaRad) * K * 90 / H;\n\t\t\t\n\n\t\t} else if ( Math.abs(thetaRad) > this.THETAX) { // polar zones\n\n\t\t\tlet phiDeg = phiRad  * RAD2DEG;\n\n\t\t\tlet w = 0; // omega\n\t\t\tif (K % 2 !== 0 || thetaRad > 0) { // K odd or thetax > 0\n\t\t\t\tw = 1;\n\t\t\t}\n\n\t\t\tlet sigma = Math.sqrt( K * (1 - Math.abs(Hploc.sin(thetaRad)) ) );\n\t\t\tlet phi_c = - 180 + ( 2 * Math.floor( ((phiRad + 180) * H/360) + ((1 - w)/2) ) + w ) * ( 180 / H );\n\t\t\t\n\t\t\tx_grid = phi_c + (phiDeg - phi_c) * sigma;\n\t\t\ty_grid = (180  / H) * ( ((K + 1)/2) - sigma);\n\n\t\t\tif (thetaRad < 0) {\n\t\t\t\ty_grid *= -1;\n\t\t\t}\n\t\t}\n\n\t\treturn [x_grid, y_grid];\n\n    }\n\n    intermediate2pix(x, y) {\n        let xInterval = Math.abs(this._xyGridProj.max_x - this._xyGridProj.min_x);\n\t\tlet yInterval = Math.abs(this._xyGridProj.max_y - this._xyGridProj.min_y);\n\n\t\tlet i_norm, j_norm;\n\t\tif ( (this._xyGridProj.min_x > 360 || this._xyGridProj.max_x > 360) && x < this._xyGridProj.min_x) {\n\t\t\ti_norm = (x + 360 - this._xyGridProj.min_x) / xInterval;\t\n\t\t}else {\n\t\t\ti_norm = (x - this._xyGridProj.min_x) / xInterval;\n\t\t}\n\t\tj_norm = (y - this._xyGridProj.min_y) / yInterval;\n\t\t\n\t\tlet i = 0.5 - (i_norm - j_norm);\n\t\tlet j = (i_norm + j_norm) - 0.5;\n\t\ti = Math.floor(i * 512);\n\t\tj = Math.floor(j * 512) + 1;\n\t\treturn [i , j];\n\n    }\n\n\n    generatePxMatrix (minra, mindec, deltara, deltadec, fotw, pxscale) {}\n\n\n    /**\n\t * compute boundaries of the current facet and compute max and min theta and phi projected on the HEALPix grid\n\t * @param {} nside optional\n\t * @returns result: object containing facet's corners coordinates and min and max theta and phi\n\t */\n\tgetFacetProjectedCoordinates (nside) {\n\t\t\n        // nside = (nside !== undefined) ? nside : Math.pow(2, this._header.getValue('ORDER'));\n\t\t\n\t\tif (isNaN(this._nside)){\n\t\t\tthrow new EvalError(\"nside not set\");\n\t\t}\n\t\tlet pix = this.pixno;\n\n\t\tlet healpix = new Healpix(this._nside);\n\t\tlet cornersVec3 = healpix.getBoundariesWithStep(pix, 1);\n\t\tlet pointings = [];\n\t\t\n\t\tfor (let i = 0; i < cornersVec3.length; i++) {\n\t\t\tpointings[i] = new Pointing(cornersVec3[i]);\n\t\t\tif (i >= 1){\n                let a = pointings[i-1].phi;\n                let b = pointings[i].phi;\n                // case when RA is just crossing the origin (e.g. 357deg - 3deg)\n                if (Math.abs(a - b) > Math.PI) {\n                    if (pointings[i-1].phi < pointings[i].phi) {\n                        pointings[i-1].phi += 2 * Math.PI;\n                    }else{\n                        pointings[i].phi += 2 * Math.PI;\n                    }\n                }    \n            }\n\t\t}\n\n\t\t// // case when RA is just crossing the origin (e.g. 357deg - 3deg)\n\t\t// for (let i = 0; i < pointings.length - 1; i++) {\n\t\t// \tlet a = pointings[i].phi;\n\t\t// \tlet b = pointings[i+1].phi;\n\t\t// \tif (Math.abs(a - b) > Math.PI) {\n\t\t// \t\tif (pointings[i].phi < pointings[i+1].phi) {\n\t\t// \t\t\tpointings[i].phi += 2 * Math.PI;\n\t\t// \t\t}else{\n\t\t// \t\t\tpointings[i+1].phi += 2 * Math.PI;\n\t\t// \t\t}\n\t\t// \t} \n\t\t// }\n\n\t\tlet result = {\n\t\t\t\"min_y\": NaN,\n\t\t\t\"max_y\": NaN,\n\t\t\t\"min_x\": NaN,\n\t\t\t\"max_x\": NaN,\n\t\t\t\"gridPointsDeg\": []\n\t\t}\n\t\t\n\t\tfor (let j = 0; j < pointings.length; j++) {\n\t\t\tlet coThetaRad = pointings[j].theta;\n\t\t\tlet thetaRad = Math.PI/2 - coThetaRad;\n\t\t\n\t\t\tlet phiRad = pointings[j].phi;\n\t\t\t\n\n\t\t\t// projection on healpix grid\n\t\t\tlet xyDeg = this.projectOnHPXGrid(phiRad, thetaRad);\n\t\t\tresult.gridPointsDeg[j * 2] = xyDeg[0];\n\t\t\tresult.gridPointsDeg[j * 2 + 1] = xyDeg[1];\n\t\t\t\n\t\t\tif (isNaN(result.max_y) || xyDeg[1] > result.max_y ) {\n\t\t\t\tresult.max_y = xyDeg[1];\n\t\t\t}\n\t\t\tif (isNaN(result.min_y) || xyDeg[1] < result.min_y) {\n\t\t\t\tresult.min_y = xyDeg[1];\n\t\t\t}\n\n\t\t\tif (isNaN(result.max_x) || xyDeg[0] > result.max_x) {\n\n\t\t\t\tresult.max_x = xyDeg[0];\n\t\t\t}\n\t\t\tif (isNaN(result.min_x) || xyDeg[0] < result.min_x) {\n\t\t\t\tresult.min_x = xyDeg[0];\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport default HEALPixProjection;","\"use strict\";\n/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n * \n * @link   github https://github.com/fab77/wcslight\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n\n\nimport AbstractProjection from './AbstractProjection';\n// import ParseUtils from '../ParseUtils';\nimport ImagePixel from '../model/ImagePixel';\n\nclass MercatorProjection extends AbstractProjection {\n\n    _minra;\n    _mindec;\n    \n    _naxis1;\n    _naxis2;\n    \n    _pxsize;\n\n    _pxmap;\n\n    _fitsheader;\n\n    /**\n     * \n     * @param {*} center {ra, dec} in decimal degrees\n     * @param {*} radius decimal degrees\n     * @param {*} pxsize decimal degrees\n     */\n    constructor (center, radius, pxsize) {\n        super();\n        this.computeSquare (2 * radius, pxsize);\n        this._minra = center.raDeg - radius;\n        if (this._minra < 0) {\n            this._minra += 360;\n        }\n        this._mindec = center.decDeg - radius;\n        this._pxsize = pxsize;\n\n        this.prepareFITSHeader();\n        \n    }\n\n    prepareFITSHeader () {\n        // TODO\n        this._fitsheader = \"\";\n    }\n\n    computeSquare (d, ps) {\n        this._naxis1 =  d / ps;\n        this._naxis2 = this._naxis1;\n    }\n\n    /** TODO !!! check and handle RA passing through 360-0 */\n    pix2world (i, j) {\n\n        let ra, dec;\n        ra = i * this._stepra + this._minra;\n        dec = j * this._stepdec + this._mindec;\n        return [ra, dec];\n\n    }\n\n    /**\n     * \n     * @param {*} radeg \n     * @param {*} decdeg\n     *  \n     */\n    world2pix (radeg, decdeg) {}\n\n\n    /**\n     * @return an empty array of (ImagePixel.js} representing the output image/FITS. \n     * It will be filled with pixels values in another method.\n     */\n    generatePxMatrix () {\n        this._pxmap = [];\n        for (let i =  0; i < this._naxis1; i++) { // rows\n\n            let row = new Array(this._naxis2);\n            \n            for (let  j = 0; j < this._naxis2; j++) { // cols\n                if (this._minra > 360) {\n                    this._minra -= 360;\n                }\n                let ii = new ImagePixel (this._minra + this._pxsize * j, this._mindec + this._pxsize * i, i, j);\n                row[j] = ii;\n            }\n\n            this._pxmap.push(row); // row based\n\n        }\n    }\n\n    getPxMap() {\n        return this._pxmap;\n    }\n}\n\nexport default MercatorProjection;","\"use strict\";\n/**\n * Summary. (bla bla bla)\n *\n * Description. (bla bla bla)\n * \n * @link   github https://github.com/fab77/wcslight\n * @author Fabrizio Giordano <fabriziogiordano77@gmail.com>\n */\n\nimport HEALPixProjection from \"./HEALPixProjection\";\nimport MercatorProjection from \"./MercatorProjection\";\nimport ProjectionNotFound from \"../exceptions/ProjectionNotFound\";\n\nclass ProjFactory  {\n\n    static getProjection(center, radius, pxsize, projectionName) {\n        if (projectionName === \"Mercator\") {\n            return new MercatorProjection(center, radius, pxsize);\n        } else  if (projectionName === \"HEALPix\") {\n            return new  HEALPixProjection(center, radius, pxsize);\n        } else {\n            throw new ProjectionNotFound(projectionName);\n        }\n    }\n}\n\nexport default ProjFactory;"],"sourceRoot":""}